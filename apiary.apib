FORMAT: 1A
HOST: https://api.lightrail.com/v2/

# Lightrail Documentation

Welcome to Lightrail. Lightrail makes it easy to create gift cards, manage customer account credit, run promotional discount programs, and collect multi-tender payment in a unified checkout solution. Create an account to generate API keys and begin testing.

[Create an account](https://www.lightrail.com/app/#/auth/register)

## Authentication
Authentication is done via an authorization header. You can retrieve your Lightrail API key [here](https://www.lightrail.com).

In requests to Lightrail you must include the following header:
```
Authorization: Bearer <API_KEY>
```

## Dates

All dates are sent and received in 8601 format.

```text
YYYY-MM-DDTHH:MM:SSZ
```

## Filtering

Resources that may contain lots of entries ([Contacts](#reference/0/contacts/list-contacts), [Values](#reference/0/values/list-values), [Programs](#reference/0/programs/list-programs), [Transactions](#reference/0/transactions)) have filters for retrieving a subset of the entries.

Some query filter properties support operators for more powerful filtering.  The operator is specified after the property and a dot (eg: `balance.ne` for balance not equal to).

| operator | description |
|----------|-------------|
| lt       | Less than (&lt;). |
| lte      | Less than or equal to (&lt;=). |
| gt       | Greater than (&gt;). |
| gte      | Greater than or equal to (&gt;=). |
| eq       | Equal to (==).  This is the default where no operator is specified. |
| ne       | Not equal to (!=). |
| in       | Equals one of the members of a comma-separated list.  Literal commas must be escaped (\\,). |
| like     | Equal to with wildcard support.  Percent signs (%) in the value are wild.  This operator is only supported on string properties. |

**Examples**

`https://api.lightrail.com/v2/contacts?tags.in=gold,silver` searches for [Contacts](#reference/0/contacts/list-contacts) tagged `gold` *or* `silver`.

`https://api.lightrail.com/v2/values?currency=USD&balance.gte=1000` searches for [Values](#reference/0/values/list-values) in the `USD` `currency` with a `balance` greater than or equal to $10.

`https://api.lightrail.com/v2/contacts?email.like=%@gmail.com` searches for [Contacts](#reference/0/contacts/list-contacts) whose email address is "like" `%@gmail.com` where `%` acts as a wild card (ie: ends with @gmail.com).

## Paging

Resources that may contain lots of entries ([Contacts](#reference/0/contacts/list-contacts), [Values](#reference/0/values/list-values), [Programs](#reference/0/programs/list-programs)) may not return all results in a single response.  Instead they return a number of results limited by the `limit` query parameter.

Retrieving results after the first page means following links in the [Link header](https://tools.ietf.org/html/rfc5988).  Here's an example Link header...

```text
(all line-breaks are inserted here for clarity and don't exist in production)

Link:
  <https://api/lightrail.com/v2/contacts?limit=100>;
    rel="first",
  <https://api/lightrail.com/v2/contacts?limit=100&before=eyJpZCI6ImplZmYgaXMgYXdlc29tZSJ9>;
    rel="prev",
  <https://api/lightrail.com/v2/contacts?limit=100&next=eyJpZCI6ImplbiBpcyBhd2Vzb21lIHRvbyJ9>;
    rel="next",
  <https://api/lightrail.com/v2/contacts?limit=100&last=true>;
    rel="last"
```

This example has links to the first page, the previous page, the next page, and the last page.  When already at the first page there will only be links to the next and last.  When already at the last page there will only be links to the first and prev.  If there are no results to page though or only 1 page there will not be any links.

It's important to follow the links in the Link header and not construct the URLs on your own.

## Errors

Lightrail uses the following HTTP status codes to indicate an error:

| code | meaning |
|------|---------|
| 400  | The request could not be understood.  eg: JSON body could not be parsed. |
| 401  | Authentication missing. |
| 403  | The operation is not allowed for the given authentication. |
| 404  | The resource was not found.  eg: There is no Contact for the given ID. |
| 409  | The operation could not be performed because of the state of the system.  eg: There is not enough balance for a Transaction to complete. |
| 422  | The request was understood but has a logical problem.  eg: Attempting to credit a negative amount. If using the `stripe` payment rail, most Stripe errors will result in a `422`. |
| 424  | The request failed due to an error which leave the system in an inconsistent state between Lightrail and a third party API. eg: While attempting to reverse a checkout Transaction with two Stripe charges, the first charge is refunded but the second refund fails. Refunds in Stripe cannot be undone which leaves the system in a state that it cannot automatically recover from. Note, this status code is extremely rare and represents a worst-case scenario for which some intervening action will be necessary. |  
| 429  | Too many requests in a given amount of time. |
| 500  | Internal server error.  Please [contact us](mailto:hello@lightrail.com) with details of your request and we'll look into it. |

Lightrail errors contain a JSON body with the following properties:

| property    | always present | purpose |
|-------------|----------------|---------|
| message     | yes            | English explanation of the error.  This is for display purposes only as the explanation may be formatted or change between system updates. |
| statusCode  | yes            | The HTTP status code. |
| messageCode | no             | A constant corresponding to the message.  This can be used to take action in response to the error. |
| stripeError | no             | When using the `stripe` rail: the full error response from Stripe in case of an error charging a credit card. |

An example:

```json
{
    "message": "Insufficient balance for the transaction.",
    "statusCode": 409,
    "messageCode": "InsufficientBalance"
}
```

## Support
[Contact us](mailto:hello@lightrail.com) any time if you have any questions.  We're here to help.

## Contacts [/contacts/]

Contacts are the people or businesses who buy products or services from you.  They're identified by a unique `id`, which typically corresponds to an existing identifier in your system.

Values can be [attached](#reference/0/contacts/attach-a-contact-to-a-value) to Contacts.  All (applicable) Value attached to a Contact will be used in a [checkout Transaction](#reference/0/transactions/checkout) simply by specifying the Contact checking out.

### Create a Contact [POST /contacts]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - The ID you choose to represent the Contact.  Two Contacts can't have the same ID, guaranteeing repeated calls won't create extra resources.  We recommend not using email addresses as IDs because users can change email addresses but the ID can't be changed.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + tags (array[string], optional) - Segmentation tags. (support coming soon)
        + metadata (object, optional) - Arbitrary data associated with the Contact.

    + Body

            {"id":"031a98ab-0080-4d6a-a","firstName":"Jeffrey","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino"}}
    
+ Response 201 (application/json)
    + Attributes (Contact)

    + Body
            
            {"id":"031a98ab-0080-4d6a-a","firstName":"Jeffrey","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino"},"createdDate":"2018-11-13T19:13:15.000Z","updatedDate":"2018-11-13T19:13:15.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Get a Contact [GET /contacts/{id}]

+ Parameter
    + id (string) - the ID of the Contact to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Contact)

    + Body

            {"id":"031a98ab-0080-4d6a-a","firstName":"Jeffrey","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino"},"createdDate":"2018-11-13T19:13:15.000Z","updatedDate":"2018-11-13T19:13:15.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

### List Contacts [GET /contacts{?limit}{?id}{?tags}{?firstName}{?lastName}{?email}]
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + id (string, optional) - Filter by ID.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + tags (string, optional) - Filter by tag. (support coming soon)  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + firstName (string, optional) - Filter by the firstName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.
    + lastName (string, optional) - Filter by the lastName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.
    + email (string, optional) - Filter by email.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"

    + Attributes (array[Contact])

    + Body

            [{"id":"031a98ab-0080-4d6a-a","firstName":"Jeffrey","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino"},"createdDate":"2018-11-13T19:13:15.000Z","updatedDate":"2018-11-13T19:13:15.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]
### Update a Contact [PATCH /contacts/{id}]
            
+ Parameter
    + id (string) - the ID of the Contact to update.

+ Request (application/json)

    Applies a JSON merge. Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, optional) - The ID you choose to represent the Contact.  If present must match the ID in the path.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + tags (array[string], optional) - Segmentation tags. (support coming soon)
        + metadata (object, optional) - Arbitrary data associated with the Contact.

    + Body

            {"firstName":"The Dude","metadata":{"alias":"El Duderino","note":"Into the whole 'brevity thing'"}}
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {"id":"031a98ab-0080-4d6a-a","firstName":"The Dude","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino","note":"Into the whole 'brevity thing'"},"createdDate":"2018-11-13T19:13:15.000Z","updatedDate":"2018-11-13T19:13:15.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Delete a Contact [DELETE /contacts/{id}]

+ Parameter
    + id (string) - the ID of the Contact to delete.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Contact that is associated with one or more Values. Values that are associated with the Contact would need to be deleted first. 
    
    + Attributes (RestError)

    + Body

            {
                "statusCode": 409,
                "message": "Contact 'unique-id-123' is in use",
                "messageCode": "ContactInUse"
            }

### List a Contact's Values [GET /contacts/{id}/values{?limit}{?programId}{?currency}{?balance}{?usesRemaining}{?discount}{?active}{?frozen}{?canceled}{?pretax}{?startDate}{?endDate}{?createdDate}{?updatedDate}{?tags}]

+ Parameter
    + id (string) - the ID of the Contact to get the Values of.
    + limit (number, optional) - The max number of items to get.
    + programId (string, optional) - Filter by Program ID.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + balance (number, optional) - Filter by balance.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + usesRemaining (number, optional) - Filter by number of uses remaining.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + discount (boolean, optional) - Filter by discount.
    + active (boolean, optional) - Filter active/inactive.
    + frozen (boolean, optional) - Filter frozen/unfrozen.
    + canceled (boolean, optional) - Filter canceled.
    + pretax (boolean, optional) - Filter by whether or not the Value is applied pretax.
    + startDate (string, optional) - Filter by startDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + tags (string, optional) - Filter by tag. (support coming soon)  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers

            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"

    + Attributes (array[Value])

    + Body

            [{"id":"cf96ee52-1386-41b7-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"e6cb72b4-4571-4592-a","issuanceId":null,"contactId":"031a98ab-0080-4d6a-a","code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:16.000Z","updatedDate":"2018-11-13T19:13:16.000Z","updatedContactIdDate":"2018-11-13T19:13:16.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]
### Attach a Contact to a Value [POST /contacts/{id}/values/attach]

Attaching a Contact to a Value sets the Value's `contactId` to that Contact's ID.  The Contact "has" that Value.  In a checkout Transaction specifying the same `contactId` will have all applicable Values for the Contact applied to the Transaction. 

If the Value is attached by `code` and the code is generic then a copy of the Value will be created for the Contact (so that other Contacts can also use that code) and a Transaction created to record it.  If the original Value has a limited number of `usesRemaining` 1 will be taken off and applied to the copy.

+ Parameter
    + id (string) - the ID of the Contact to attach Value to.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + valueId (string, optional) - The `id` of the Value to attach to the Contact.  One of `valueId` or `code` must be specified.
        + code (string, optional) - The `code` of the Value to attach to the Contact.  One of `valueId` or `code` must be specified.

    + Body

            {"valueId":"cf96ee52-1386-41b7-8"}
    
+ Response 200 (application/json)
    
    + Attributes (Value)

    + Body
            
            {"id":"cf96ee52-1386-41b7-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"e6cb72b4-4571-4592-a","issuanceId":null,"contactId":"031a98ab-0080-4d6a-a","code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:16.000Z","updatedDate":"2018-11-13T19:13:16.000Z","updatedContactIdDate":"2018-11-13T19:13:16.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)
    
    A Value with `isGenericCode=true` true and `usesRemaining=0` cannot be attached to any more Contacts.
    
    + Attributes (RestError)
    
    + Body
    
            {
                "statusCode": 409,
                "message": "The Value with id '123abc' cannot be attached because it has a generic code and has 0 usesRemaining."
                "messageCode": "InsufficientUses"
            }

+ Response 409 (application/json)
    
    A Value that is frozen cannot be attached.
    
    + Attributes (RestError)
    
    + Body
    
            {
                "statusCode": 409,
                "message": "The Value cannot be attached because it is frozen."
                "messageCode": "ValueFrozen"
            }

+ Response 409 (application/json)
    
    A Value that is canceled cannot be attached.
    
    + Attributes (RestError)
    
    + Body
    
            {
                "statusCode": 409,
                "message": "The Value cannot be attached because it is canceled."
                "messageCode": "ValueCanceled"
            }

## Values [/values]

A Value (naturally) represents value in the Lightrail system.  This includes a gift card, a promotion, a coupon, store credit, etc.  Values can be created one at a time but are most often [issued](#reference/0/programs/create-issuance) from a [Program](#reference/0/programs).  Issuing Value from a Program makes it part of that Program which keeps different ways of using Value organized.
 
Most Values will be accessed by a code, or attached to a [Contact](#reference/0/contacts).  All Values attached to a Contact can be used in a [checkout Transaction](#reference/0/transactions/checkout) by only specifying the Contact.

### Create a Value [POST /values{?showCode}]

+ Parameter
    + showCode (boolean, optional) - Show the full code for the Value.  This is useful when using the `generateCode` param and you want to see the generated code.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Value.  Two Values can't have the same ID, guaranteeing repeated calls won't create extra resources.
        + programId (string, optional) - Create as part of a Program and copy default properties from it.
        + contactId (string, optional) - Directly attach to a Contact.
        + code (string, optional) - Assign a code.
        + isGenericCode (boolean) - (Deprecated. Lightrail is currently in the process of updating the functionality of generic codes. Please [contact us](mailto:hello@lightrail.com) for more information.) If true the code is to be shared publicly and not secret. If false the code is treated as a secret. Defaults to false if not provided.
        + generateCode (CodeGeneration, optional) - Parameters to generate a code. The code generated will be stored securely. Required if `code` is not set. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`.
        + currency (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. Required if `programId` is not set.
        + balance (number, optional) - The amount of money available in a Value. This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500. When this is set an `initialBalance` Transaction is created tracking the amount created.
        + pretax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + discount (boolean, optional) - If true the Value will be marked as a discount on checkout.
        + discountSellerLiability (number, optional) - In a marketplace: a number between 0 and 1 for the ratio of the discount the seller is liable for. (eg: at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount).
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + balanceRule (Rule, optional) - A Rule controlling the effective balance of the Value in a Checkout. To use this `balance` must be set to `null`. The syntax will be defined in a separate document.
        + usesRemaining (number, optional) - The number of times the Value can be used in checkout. When this number reaches 0 the Value can no longer be used in checkout.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + tags (array[string], optional) - Segmentation tags. (support coming soon)
        + metadata (object, optional) - Arbitrary data associated with the Value. If `programId` is set `metadata` from the Program is inherited but any keys specified will override those of the Program.
        
    + Body
    
            {"id":"cf96ee52-1386-41b7-8","programId":"e6cb72b4-4571-4592-a","balance":500}
    
+ Response 201 (application/json)
    + Attributes (Value)

    + Body
    
            {"id":"cf96ee52-1386-41b7-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"e6cb72b4-4571-4592-a","issuanceId":null,"contactId":null,"code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:16.000Z","updatedDate":"2018-11-13T19:13:16.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Get a Value [GET /values/{id}{?showCode}]

+ Parameter
    + id (string) - the ID of the Value to get.
    + showCode (boolean, optional) - Show the full code for the Value.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {"id":"cf96ee52-1386-41b7-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"e6cb72b4-4571-4592-a","issuanceId":null,"contactId":null,"code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:16.000Z","updatedDate":"2018-11-13T19:13:16.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

### Get a Value by Code [GET /values?code={code}{?showCode}]

+ Parameter
    + code (string) - the code (secret or generic) of the Value to get.
    + showCode (boolean, optional) - Show the full code for the Value.

+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {"id":"cf96ee52-1386-41b7-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"e6cb72b4-4571-4592-a","issuanceId":null,"contactId":null,"code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:16.000Z","updatedDate":"2018-11-13T19:13:16.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

### List Values [GET /values{?limit}{?showCode}{?programId}{?currency}{?contactId}{?balance}{?usesRemaining}{?discount}{?active}{?frozen}{?canceled}{?pretax}{?startDate}{?endDate}{?createdDate}{?updatedDate}{?tags}]
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + showCode (boolean, optional) - Show the full code for the Value.
    + programId (string, optional) - Filter by Program ID.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + contactId (string, optional) - Filter by Values attached to the given Contact ID.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + balance (number, optional) - Filter by balance.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + usesRemaining (number, optional) - Filter by number of uses remaining.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + discount (boolean, optional) - Filter by discount.
    + active (boolean, optional) - Filter active/inactive.
    + frozen (boolean, optional) - Filter frozen/unfrozen.
    + canceled (boolean, optional) - Filter canceled.
    + pretax (boolean, optional) - Filter by whether or not the Value is applied pretax.
    + startDate (string, optional) - Filter by startDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + tags (string, optional) - Filter by tag. (support coming soon)  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Value])

    + Body

            [{"id":"cf96ee52-1386-41b7-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"e6cb72b4-4571-4592-a","issuanceId":null,"contactId":null,"code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:16.000Z","updatedDate":"2018-11-13T19:13:16.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

+ Response 200 (text/csv)

    You can request a CSV file of the output by setting `Accept: text/csv` in the request header.

    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Body

            id,currency,balance,usesRemaining,programId,contactId,code,isGenericCode,pretax,active,canceled,frozen,discount,discountSellerLiability,redemptionRule,balanceRule,startDate,endDate,metadata,createdDate,updatedDate
            vs-1,USD,2500,,giftCards,,…GYOA,false,false,true,false,false,false,,,,,,,2018-04-17T23:20:08.000Z,2018-04-17T23:20:08.000Z
### Update a Value [PATCH /values/{id}]

+ Parameter
    + id (string) - the ID of the Value to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge. Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + contactId (string, optional) - Directly attach to a Contact.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + canceled (boolean, optional) - If true the Value is canceled. Once canceled the Value can never be uncanceled.
        + pretax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + discount (boolean, optional) - If true the Value will be marked as a discount on checkout.
        + discountSellerLiability (number, optional) - In a marketplace: a number between 0 and 1 for the ratio of the discount the seller is liable for. (eg: at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount).
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + balanceRule (Rule, optional) - A Rule controlling the effective balance of the Value in a Checkout. To use this `balance` must be set to `null`. The syntax will be defined in a separate document.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + tags (array[string], optional) - Segmentation tags. (support coming soon)
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {"frozen":true}
    
+ Response 200 (application/json)
    + Attributes (Value)

    + Body
    
            {"id":"cf96ee52-1386-41b7-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"e6cb72b4-4571-4592-a","issuanceId":null,"contactId":"031a98ab-0080-4d6a-a","code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":true,"discount":true,"discountSellerLiability":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:16.000Z","updatedDate":"2018-11-13T19:13:16.000Z","updatedContactIdDate":"2018-11-13T19:13:16.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Delete a Value [DELETE /values/{id}]

+ Parameter
    + id (string) - the ID of the Value to delete.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Value that has been used in a Transaction.
    
    + Attributes (RestError)

    + Body
    
            {
                "statusCode": 409,
                "message": "Value 'abc123' is in use.",
                "messageCode": "ValueInUse"
            }
### Change a Value's code [POST /values/{id}/changeCode]

+ Parameter
    + id (string) - the ID of the Value to change the code of.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, optional) - The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`.
        + generateCode (CodeGeneration, optional) - Parameters to generate a code. The code generated will be stored securely. Required if `code` is not set. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`.
        + isGenericCode (boolean, optional) - (Deprecated. Lightrail is currently in the process of updating the functionality of generic codes. Please [contact us](mailto:hello@lightrail.com) for more information.) If true the code is to be shared publicly and not secret. If false the code is treated as a secret. Defaults to false if not provided.
        
        
    + Body
    
            {"generateCode":{}}

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {"id":"20777963-792a-4935-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"e6cb72b4-4571-4592-a","issuanceId":null,"contactId":null,"code":"\u2026NESC","isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:21.000Z","updatedDate":"2018-11-13T19:13:21.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### List a Value's Transactions [GET /values/{id}/transactions{?limit}{?transactionType}{?createdDate}{?currency}]

+ Parameter
    + id (string) - the ID of the Value to get the Transactions of.
    + transactionType (string, optional) - Filter by the transactionType.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Transaction])

    + Body

            [{"id":"aa889369-458e-4aa2-9","transactionType":"debit","currency":"USD","totals":{"remainder":0},"lineItems":null,"paymentSources":null,"steps":[{"rail":"lightrail","valueId":"6991a23c-41da-4276-a","contactId":null,"code":null,"balanceBefore":3000,"balanceAfter":2000,"balanceChange":-1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null}],"metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"},"tax":null,"createdDate":"2018-11-13T19:13:17.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

## Programs [/programs]

Programs organize [Values](#reference/0/values) and Values can be [issued](#reference/0/programs/create-issuance) from Programs.  Programs are typically created through the web app.

Programs are most commonly used to define and organize promotion campaigns. For example, the Value issued for a new user promotion that gives them a 5% discount on their first purchase should behave differently from the Value for a "TEN-DOLLAR-TUESDAYS" promotion. These different promotions will also need to be tracked and analyzed separately, all of which can happen in the web app.

### Create Program [POST /programs]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - The ID you choose to represent the Program.  
        + name (string, required) - A human-readable name for the Program.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + discount (boolean, optional) - If true Values created in the Program will be marked as a discount on checkout.
        + pretax (boolean, optional) - If true the balance on Values created in the Program is applied on checkout before tax is calculated.
        + active (boolean, optional) - Whether Values created in the Program are active and can be used upon creation.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when Values created in the Program can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + balanceRule (Rule, optional) - A Rule controlling the effective balance of Values created in the Program in a Checkout. To use this `balance` must be set to `null`. The syntax will be defined in a separate document.
        + minInitialBalance (number, optional) - The minimum balance Values created in the Program can be created with.
        + maxInitialBalance (number, optional) - The maximum balance Values created in the Program can be created with.
        + fixedInitialBalances (array[number], optional) -  A list of exact balances Values created in the Program can be created with.
        + fixedInitialUsesRemaining (array[number], optional) -  A list of exact usesRemaining the Value can be created with.
        + tags (array[string], optional) - Segmentation tags. (support coming soon)
        + startDate (string, optional) - Earliest date that Values created in the Program can be active.
        + endDate (string, optional) - Latest date that Values created in the Program can be active.
        + metadata (object, optional) - Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys.
        
    + Body

            {"id":"e6cb72b4-4571-4592-a","name":"Spring Promotion USD","currency":"USD","pretax":true,"discount":true,"fixedInitialBalances":[500]}
    
+ Response 201 (application/json)
    + Attributes (Program)

    + Body
            
            {"id":"e6cb72b4-4571-4592-a","name":"Spring Promotion USD","currency":"USD","discount":true,"discountSellerLiability":null,"pretax":true,"active":true,"minInitialBalance":null,"maxInitialBalance":null,"fixedInitialBalances":[500],"fixedInitialUsesRemaining":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":null,"createdDate":"2018-11-13T19:13:15.000Z","updatedDate":"2018-11-13T19:13:15.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Get a Program [GET /programs/{id}]

+ Parameter
    + id (string) - the ID of the Program to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Program)

    + Body

                {"id":"e6cb72b4-4571-4592-a","name":"Spring Promotion USD","currency":"USD","discount":true,"discountSellerLiability":null,"pretax":true,"active":true,"minInitialBalance":null,"maxInitialBalance":null,"fixedInitialBalances":[500],"fixedInitialUsesRemaining":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":null,"createdDate":"2018-11-13T19:13:15.000Z","updatedDate":"2018-11-13T19:13:15.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

### List Programs [GET /programs{?limit}{?id}{?currency}{?tags}{?startDate}{?endDate}{?createdDate}{?updatedDate}]
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + id (string, optional) - Filter by ID. This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency. This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + tags (string, optional) - Filter by tag. (support coming soon) This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + startDate (string, optional) - Filter by startDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Program])

    + Body

            [{"id":"e6cb72b4-4571-4592-a","name":"Spring Promotion USD","currency":"USD","discount":true,"discountSellerLiability":null,"pretax":true,"active":true,"minInitialBalance":null,"maxInitialBalance":null,"fixedInitialBalances":[500],"fixedInitialUsesRemaining":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":null,"createdDate":"2018-11-13T19:13:15.000Z","updatedDate":"2018-11-13T19:13:15.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]
### Update a Program [PATCH /programs/{id}]

+ Parameter
    + id (string) - the ID of the Program to modify.

+ Request (application/json)

    Applies a JSON merge. Only members that are present are changed and all others are left untouched. 
    Note that updating a Program does not automatically update the attributes of Values that have already been generated through it. Only new Values generated afterwards will reflect the changes. If you want existing Values to reflect your changes, you will need to update them in a separate step. 

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + name (string, optional) - A human-readable name for the Program.
        + active (boolean, optional) - Whether Values created in the Program are active and can be used upon creation.
        + discount (boolean, optional) - If true Values created in the Program will be marked as a discount on checkout. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        + pretax (boolean, optional) - If true the balance on Values created in the Program is applied on checkout before tax is calculated. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        + minInitialBalance (number, optional) - The minimum balance Values created in the Program can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + maxInitialBalance (number, optional) - The maximum balance Values created in the Program can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + fixedInitialBalances (array[number], optional) -  A list of exact balances Values created in the Program can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + fixedInitialUsesRemaining (array[number], optional) -  A list of exact usesRemaining the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + tags (array[string], optional) - Segmentation tags. (support coming soon)
        + startDate (string, optional) - Earliest date that Values created in the Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        + endDate (string, optional) - Latest date that Values created in the Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        + metadata (object, optional) - Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys.

    + Body

            {"name":"Spring Promo US Dollars"}
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {"id":"e6cb72b4-4571-4592-a","name":"Spring Promo US Dollars","currency":"USD","discount":true,"discountSellerLiability":null,"pretax":true,"active":true,"minInitialBalance":null,"maxInitialBalance":null,"fixedInitialBalances":[500],"fixedInitialUsesRemaining":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":null,"createdDate":"2018-11-13T19:13:15.000Z","updatedDate":"2018-11-13T19:13:16.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Delete a Program [DELETE /programs/{id}]

+ Parameter
    + id (string) - the ID of the Promotion Program to delete.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Promotion Program that is in use. If the Program is referenced by one or more Values, those objects would need to be deleted first. If a Value created through this Program is referenced by a Transaction, it cannot be deleted because Transactions cannot be deleted. Programs in use can still be updated. 

    + Body
    
            {
                "statusCode": 409,
                "message": "Program 'abc123' is in use.",
                "messageCode": "ProgramInUse"
            }
### Create Issuance[POST /programs/{id}/issuances]
[Value](#reference/0/values) is usually created by issuing it from a [Program](#reference/0/programs) in the web app. Each block of Values issued at once is tracked as an Issuance. Issuances are tracked for downloading secured codes after creation.

+ Parameter
    + id (string) - the ID of the Program to issue Value from.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Issuance.  Two Issuances can't have the same ID, guaranteeing repeated calls won't create extra resources.
        + name (string, required) - A human-readable name for the Issuance.
        + count (number, required) - The numbers of Values to issue. Must be between 1-1000.
        + generateCode (CodeGeneration, optional) - This will cause each Value created in the Issuance to have its own unique generated code. The code generated will be stored securely. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`.
        + code (string, optional) - The code to set on the Value. This is only available when `count` is 1.
        + isGenericCode (boolean, optional) - If true the code is to be shared publicly and not secret. If false the code is treated as a secret. Defaults to false if not provided. This is only available when `count` is 1.
        + balance (number, optional) - The balance to set on each Value. This can be constrained by the Program's `minInitialBalance` and `maxInitialBalance` or must be in the `fixedInitialBalances` array.
        + usesRemaining (number, optional) - The usesRemaining to set on each Value. This can be restricted to values defined by the Program's `fixedInitialUsesRemaining`.  
        + startDate (string, optional) - Override the Program's startDate for the Value.
        + endDate (string, optional) - Override the Program's endDate for the Value.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Values can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + balanceRule (Rule, optional) - A Rule controlling the effective balance of the Values in checkout. To use this `balance` must be set to `null`. The syntax will be defined in a separate document.
        + tags (array[string], optional) - Segmentation tags. (support coming soon) These are applied to each Value.
        + metadata (object, optional) - Arbitrary data associated with the Issuance. `metadata` from the Program is inherited but any keys specified will override those of the Program.
        
    + Body
    
            {"id":"c6586b76-abbe-4a58-a","name":"My First Issuance","count":10,"generateCode":{},"balance":500}
    
+ Response 201 (application/json)
    + Attributes (Issuance)

    + Body
    
            {"id":"c6586b76-abbe-4a58-a","name":"My First Issuance","programId":"e6cb72b4-4571-4592-a","count":10,"balance":500,"redemptionRule":null,"balanceRule":null,"usesRemaining":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:23.000Z","updatedDate":"2018-11-13T19:13:23.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Get an Issuance [GET /programs/{programId}/issuances/{issuanceId}]

+ Parameter
    + issuanceId (string) - the ID of the Issuance to get.
    + programId (string) - the ID of the Program of the Issuance.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Issuance)

    + Body

            {"id":"c6586b76-abbe-4a58-a","name":"My First Issuance","programId":"e6cb72b4-4571-4592-a","count":10,"balance":500,"redemptionRule":null,"balanceRule":null,"usesRemaining":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:23.000Z","updatedDate":"2018-11-13T19:13:23.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

### List Issuances [GET /programs/{id}/issuances]

+ Parameter
    + id (string) - the ID of the Program to get Issuances from.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
            
    + Attributes (array[Issuance])

    + Body
    
            [{"id":"c6586b76-abbe-4a58-a","name":"My First Issuance","programId":"e6cb72b4-4571-4592-a","count":10,"balance":500,"redemptionRule":null,"balanceRule":null,"usesRemaining":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2018-11-13T19:13:23.000Z","updatedDate":"2018-11-13T19:13:23.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

## Transactions [/transactions]

Transactions can add and remove balance on Lightrail Values or create Stripe charges.

Lightrail Values cannot be transacted against if they are inactive, canceled, frozen, have not yet started or have ended. 

### Checkout [POST /transactions/checkout]

The checkout endpoint collects all payment for a purchase.  It can apply all Lightrail promotions, calculate tax, debit funds from Lightrail and charge credit cards through Stripe. Your Stripe account must be [connected to Lightrail](https://www.lightrail.com/app/#/account/api) in order for Lightrail to make charges on your behalf.

Lightrail and Stripe payment sources are referred to as the payment rails `lightrail` and `stripe` respectively. There is also an `internal` payment rail which can be used to represent any other payment source. This is intended as a stop-gap solution to support transitioning from legacy systems.

Error responses: If using the `stripe` rail, it is possible for checkout transactions to fail for reasons outside of Lightrail's control, such as an invalid card token or a card being declined. Stripe errors will be passed on in full under the `stripeError` key in the response. 

+ Request (application/json)
    
    Data used in example:
    - Purchasing: 
        - 2x $5 socks (8% tax rate)
        - 1x $1.99 chocolate bar  (5% tax rate)
        - 1x $3.49 shipping (0% tax rate)
    - Payment Sources:
        - Contact with prepaid account and a chocolate bar promotion.
            - Account has $10.
            - Sock promo is for 20% off retail price of socks.
        - Credit card
    
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + lineItems (array[LineItem])
        + sources (array[TransactionParty])
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place. If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through using whatever amount is available: this might not cover the full amount of the transaction. The remainder (i.e. amount still owing) will be indicated.
        + pending (boolean, optional) - (Coming soon) If true the transaction is created as pending and does not complete until captured. The transaction will be automatically voided if not captured.
        + tax (Tax, optional) 
        + metadata (object, optional) - Any additional data you want to store for the item. All metadata will also be saved on any Stripe charge(s).
        
    + Body 
    
            {"id":"36746c18-aa7b-4081-a","sources":[{"rail":"lightrail","contactId":"031a98ab-0080-4d6a-a"},{"rail":"stripe","source":"tok_visa"}],"lineItems":[{"productId":"socks","unitPrice":500,"quantity":2,"taxRate":0.08},{"productId":"chocolate_bar","unitPrice":199,"taxRate":0.05},{"productId":"shipping","unitPrice":349,"taxRate":0.0}],"currency":"USD"}
    
+ Response 201 (application/json)

    + Attributes (Transaction)

    + Body
    
            {"id":"36746c18-aa7b-4081-a","transactionType":"checkout","currency":"USD","createdDate":"2018-11-13T19:13:17.000Z","tax":{"roundingMode":"HALF_EVEN"},"totals":{"subtotal":1548,"tax":74,"discount":200,"payable":1422,"remainder":0,"discountLightrail":200,"paidLightrail":1000,"paidStripe":422,"paidInternal":0},"lineItems":[{"productId":"socks","unitPrice":500,"quantity":2,"taxRate":0.08,"lineTotal":{"subtotal":1000,"taxable":800,"tax":64,"discount":200,"remainder":0,"payable":864}},{"productId":"shipping","unitPrice":349,"taxRate":0,"quantity":1,"lineTotal":{"subtotal":349,"taxable":349,"tax":0,"discount":0,"remainder":0,"payable":349}},{"productId":"chocolate_bar","unitPrice":199,"taxRate":0.05,"quantity":1,"lineTotal":{"subtotal":199,"taxable":199,"tax":10,"discount":0,"remainder":0,"payable":209}}],"steps":[{"rail":"lightrail","valueId":"30ed51b7-ffa6-49e0-a","contactId":"031a98ab-0080-4d6a-a","code":null,"balanceBefore":null,"balanceAfter":null,"balanceChange":-200,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null},{"rail":"lightrail","valueId":"91c3a137-0117-4855-9","contactId":"031a98ab-0080-4d6a-a","code":null,"balanceBefore":1000,"balanceAfter":0,"balanceChange":-1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null},{"rail":"stripe","chargeId":"ch_1DW7K6CM9MOvFvZK6k2DTNzo","charge":{"id":"ch_1DW7K6CM9MOvFvZK6k2DTNzo","object":"charge","amount":422,"amount_refunded":0,"application":"ca_Bg76g9LV6IsnS40GKfnFrdlAOFohjAtz","application_fee":null,"balance_transaction":"txn_1DW7K7CM9MOvFvZKUAzhoYqc","captured":true,"created":1542136398,"currency":"usd","customer":null,"description":null,"destination":null,"dispute":null,"failure_code":null,"failure_message":null,"fraud_details":{},"invoice":null,"livemode":false,"metadata":{"lightrailTransactionId":"36746c18-aa7b-4081-a","lightrailTransactionSources":"[{\"rail\":\"lightrail\",\"valueId\":\"30ed51b7-ffa6-49e0-a\"},{\"rail\":\"lightrail\",\"valueId\":\"91c3a137-0117-4855-9\"}]","lightrailUserId":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"},"on_behalf_of":null,"order":null,"outcome":{"network_status":"approved_by_network","reason":null,"risk_level":"normal","risk_score":45,"seller_message":"Payment complete.","type":"authorized"},"paid":true,"payment_intent":null,"receipt_email":null,"receipt_number":null,"refunded":false,"refunds":{"object":"list","data":[],"has_more":false,"total_count":0,"url":"/v1/charges/ch_1DW7K6CM9MOvFvZK6k2DTNzo/refunds"},"review":null,"shipping":null,"source":{"id":"card_1DW7K6CM9MOvFvZKThYMYRyJ","object":"card","address_city":null,"address_country":null,"address_line1":null,"address_line1_check":null,"address_line2":null,"address_state":null,"address_zip":null,"address_zip_check":null,"brand":"Visa","country":"US","customer":null,"cvc_check":null,"dynamic_last4":null,"exp_month":11,"exp_year":2019,"fingerprint":"vnMoEG5eZVxSMPc7","funding":"credit","last4":"4242","metadata":{},"name":null,"tokenization_method":null},"source_transfer":null,"statement_descriptor":null,"status":"succeeded","transfer_group":null},"amount":-422}],"paymentSources":[{"rail":"lightrail","contactId":"031a98ab-0080-4d6a-a"},{"rail":"stripe","source":"tok_visa"}],"metadata":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)

    You cannot checkout if the balance of all Values does not cover the `lineItems` and there is no credit card to charge (if `allowRemainder` is not `true`).

    + Attributes (StripeRestError)

    + Body

            {
                "statusCode": 409,
                "message": "Insufficient balance for the transaction.",
                "messageCode": "InsufficientBalance"
            }

+ Response 409 (application/json)

    Idempotency error: you cannot create use a Transaction `id` more than once, for the same or a different Transaction request.

    + Body

            {
                "statusCode": 409,
                "message": "A Lightrail transaction with transactionId 'transac-12345' already exists.",
                "messageCode": "TransactionExists"
            }

+ Response 422 (application/json)

    Stripe minimum charge error: Stripe will not process charges for less than $0.50 USD (or equivalent). This error can be triggered in a split tender transaction if the customer does not have quite enough balance in their account or on their gift card. You may wish to handle this error by asking your customer to top up their account balance, or by adding a "minimum credit card amount fee" line item to the order that covers the difference. 

    + Body

            {
                "statusCode": 409,
                "message": "Failed to charge credit card: amount '25' for Stripe was too small.",
                "messageCode": "StripeAmountTooSmall",
                "stripeError": {...}
            }

### Debit [POST /transactions/debit]

Debit (remove an amount from) a Lightrail payment source.  Debiting is simpler and less powerful than checkout.  It does not apply the promotion logic of `balanceRules`, calculate discount or taxes.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        + source (LightrailTransactionParty, required) - The rail to debit.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to debit.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        + uses (number, optional) - The number of `usesRemaining` to add.  Defaults to 0.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place. If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through using whatever amount is available: this might not cover the full amount of the transaction. The remainder (i.e. amount still owing) will be indicated.
        + pending (boolean, optional) - (Coming soon) If true the transaction is created as pending and does not complete until captured. The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {"id":"aa889369-458e-4aa2-9","source":{"rail":"lightrail","valueId":"6991a23c-41da-4276-a"},"amount":1000,"currency":"USD","metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"}}
    
+ Response 201 (application/json)

    + Attributes (Transaction)

    + Body

            {"id":"aa889369-458e-4aa2-9","transactionType":"debit","currency":"USD","createdDate":"2018-11-13T19:13:17.000Z","tax":null,"totals":{"remainder":0},"lineItems":null,"steps":[{"rail":"lightrail","valueId":"6991a23c-41da-4276-a","contactId":null,"code":null,"balanceBefore":3000,"balanceAfter":2000,"balanceChange":-1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null}],"paymentSources":null,"metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"},"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)

    You cannot debit a Value by more balance than is available (if `allowRemainder` is not `true`).

    + Attributes (RestError)

    + Body

            {
                "statusCode": 409,
                "message": "Insufficient balance for the transaction.",
                "messageCode": "InsufficientBalance"
            }
### Credit [POST /transactions/credit]

Credit (add an amount to) a Lightrail payment destination.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        + destination (LightrailTransactionParty, required) - The rail to credit.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, optional) - The amount to credit.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        + uses (number, optional) - The number of `usesRemaining` to add.  Defaults to 0.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place. If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + pending (boolean, optional) - (Coming soon) If true the transaction is created as pending and does not complete until captured. The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {"id":"805db0a5-9ba5-4a66-8","destination":{"rail":"lightrail","valueId":"6991a23c-41da-4276-a"},"amount":2500,"currency":"USD","metadata":{"note":"Frequent buyer bonus"}}
    
+ Response 201 (application/json)

    + Attributes (RestError)

    + Body

            {"id":"805db0a5-9ba5-4a66-8","transactionType":"credit","currency":"USD","createdDate":"2018-11-13T19:13:16.000Z","tax":null,"totals":null,"lineItems":null,"steps":[{"rail":"lightrail","valueId":"6991a23c-41da-4276-a","contactId":null,"code":null,"balanceBefore":500,"balanceAfter":3000,"balanceChange":2500,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null}],"paymentSources":null,"metadata":{"note":"Frequent buyer bonus"},"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Transfer [POST /transactions/transfer]

Transfer value from a Lightrail or Stripe payment source to a Lightrail payment destination.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        + source (StripeOrLightrailTransactionParty, required) - Supported rails: `["lightrail", "stripe"]`.
        + destination (LightrailTransactionParty, required) - Only supported rail is `"lightrail"` and must it refer to a single Value.
        + amount (number, required) - The amount to transfer, > 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place. If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through using whatever amount is available: this might not cover the full amount of the transaction. The remainder (i.e. amount still owing) will be indicated.
        + pending (boolean, optional) - (Coming soon) If true the transaction is created as pending and does not complete until captured. The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {"id":"b8d3fb13-0696-4692-9","source":{"rail":"lightrail","valueId":"82a39cdf-9804-415c-a"},"destination":{"rail":"lightrail","valueId":"7b6b595c-7249-45de-a"},"amount":100,"currency":"USD","metadata":{"reference":"customer request to move funds. ref: #4948173593"}}

+ Response 201 (application/json)

    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.
        + transactionType (string, required) - `transfer`
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The amount still owing, if a remainder is allowed by setting `allowRemainder: true`.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - Date when the Transaction was created.
        + pending (boolean, optional) - (Coming soon) If true the transaction is created as pending and does not complete until captured. The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {"id":"b8d3fb13-0696-4692-9","transactionType":"transfer","currency":"USD","createdDate":"2018-11-13T19:13:22.000Z","tax":null,"totals":{"remainder":0},"lineItems":null,"steps":[{"rail":"lightrail","valueId":"82a39cdf-9804-415c-a","contactId":null,"code":null,"balanceBefore":500,"balanceAfter":400,"balanceChange":-100,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null},{"rail":"lightrail","valueId":"7b6b595c-7249-45de-a","contactId":null,"code":null,"balanceBefore":500,"balanceAfter":600,"balanceChange":100,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null}],"paymentSources":null,"metadata":{"reference":"customer request to move funds. ref: #4948173593"},"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)

    You cannot transfer from a Value more balance than is available (if `allowRemainder` is not `true`).

    + Attributes (StripeRestError)

    + Body

            {
                "statusCode": 409,
                "message": "Insufficient balance for the transaction.",
                "messageCode": "InsufficientBalance"
            }
### Reverse [POST /transactions/{id}/reverse]
Returns value back to where it came from. Reverse adds a Transaction to the [Transaction Chain](#reference/0/transactions/get-transaction-chain).      

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
     
    + Body

            {"id":"4528e877-056b-4c7c-9"}

+ Response 201 (application/json)

    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.
        + transactionType (string, required) - `reverse`
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The amount still owing, if a remainder is allowed by setting `allowRemainder: true`.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - Date when the Transaction was created.
        + pending (boolean, optional) - (Coming soon) If true the transaction is created as pending and does not complete until captured. The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {"id":"4528e877-056b-4c7c-9","transactionType":"reverse","currency":"USD","createdDate":"2018-11-13T19:13:19.000Z","tax":{"roundingMode":"HALF_EVEN"},"totals":{"subtotal":-1548,"tax":-74,"discount":-200,"discountLightrail":-200,"payable":-1422,"paidLightrail":-1000,"paidStripe":-422,"paidInternal":0,"remainder":0},"lineItems":null,"steps":[{"rail":"lightrail","valueId":"30ed51b7-ffa6-49e0-a","contactId":"031a98ab-0080-4d6a-a","code":null,"balanceBefore":null,"balanceAfter":null,"balanceChange":200,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":0},{"rail":"lightrail","valueId":"91c3a137-0117-4855-9","contactId":"031a98ab-0080-4d6a-a","code":null,"balanceBefore":0,"balanceAfter":1000,"balanceChange":1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":0},{"rail":"stripe","chargeId":"ch_1DW7K6CM9MOvFvZK6k2DTNzo","charge":{"id":"re_1DW7K8CM9MOvFvZKelV297Ml","object":"refund","amount":422,"balance_transaction":"txn_1DW7K8CM9MOvFvZKfM21RCFL","charge":"ch_1DW7K6CM9MOvFvZK6k2DTNzo","created":1542136400,"currency":"usd","metadata":{"reason":"not specified"},"reason":null,"receipt_number":null,"source_transfer_reversal":null,"status":"succeeded"},"amount":422}],"paymentSources":null,"metadata":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 422 (application/json)

    A Transaction cannot be reversed if it is not the last Transaction in the Transaction Chain. 

    + Attributes (StripeRestError)

    + Body

            {
                "statusCode": 422,
                "message": "Cannot reverse Transaction that is not last in the Transaction Chain. See documentation for more information on the Transaction Chain.",
                "messageCode": "TransactionNotReversible"
            }
### Get a Transaction [GET /transactions/{id}]

+ Parameter
    + id (string) - the ID of the Transaction to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {"id":"aa889369-458e-4aa2-9","transactionType":"debit","currency":"USD","createdDate":"2018-11-13T19:13:17.000Z","tax":null,"totals":{"remainder":0},"lineItems":null,"steps":[{"rail":"lightrail","valueId":"6991a23c-41da-4276-a","contactId":null,"code":null,"balanceBefore":3000,"balanceAfter":2000,"balanceChange":-1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null}],"paymentSources":null,"metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"},"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
            
### Get Transaction Chain [GET /transactions/{id}/chain]
Returns all Transactions in a Transaction Chain. 

A Transaction Chain is an ordered list of Transactions and results from creating Transactions that depend on another; such Transactions are reverse and pending capture/void (coming soon). The Transaction Chain can be retrieved using any Transaction ID in the chain and can be used to understand the current state of a Transaction.  

+ Parameter
    + id (string, required) - The ID of any Transaction in the chain to look up. 

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Transaction])

    + Body

            [{"id":"36746c18-aa7b-4081-a","transactionType":"checkout","currency":"USD","totals":{"subtotal":1548,"tax":74,"discount":200,"discountLightrail":200,"payable":1422,"paidLightrail":1000,"paidStripe":422,"paidInternal":0,"remainder":0},"lineItems":[{"productId":"socks","unitPrice":500,"quantity":2,"taxRate":0.08,"lineTotal":{"subtotal":1000,"taxable":800,"tax":64,"discount":200,"remainder":0,"payable":864}},{"productId":"shipping","unitPrice":349,"taxRate":0,"quantity":1,"lineTotal":{"subtotal":349,"taxable":349,"tax":0,"discount":0,"remainder":0,"payable":349}},{"productId":"chocolate_bar","unitPrice":199,"taxRate":0.05,"quantity":1,"lineTotal":{"subtotal":199,"taxable":199,"tax":10,"discount":0,"remainder":0,"payable":209}}],"paymentSources":[{"rail":"lightrail","contactId":"031a98ab-0080-4d6a-a"},{"rail":"stripe","source":"tok_visa"}],"steps":[{"rail":"lightrail","valueId":"30ed51b7-ffa6-49e0-a","contactId":"031a98ab-0080-4d6a-a","code":null,"balanceBefore":null,"balanceAfter":null,"balanceChange":-200,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null},{"rail":"lightrail","valueId":"91c3a137-0117-4855-9","contactId":"031a98ab-0080-4d6a-a","code":null,"balanceBefore":1000,"balanceAfter":0,"balanceChange":-1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null},{"rail":"stripe","amount":-422,"chargeId":"ch_1DW7K6CM9MOvFvZK6k2DTNzo","charge":{"id":"ch_1DW7K6CM9MOvFvZK6k2DTNzo","object":"charge","amount":422,"amount_refunded":0,"application":"ca_Bg76g9LV6IsnS40GKfnFrdlAOFohjAtz","application_fee":null,"balance_transaction":"txn_1DW7K7CM9MOvFvZKUAzhoYqc","captured":true,"created":1542136398,"currency":"usd","customer":null,"description":null,"destination":null,"dispute":null,"failure_code":null,"failure_message":null,"fraud_details":{},"invoice":null,"livemode":false,"metadata":{"lightrailTransactionId":"36746c18-aa7b-4081-a","lightrailTransactionSources":"[{\"rail\":\"lightrail\",\"valueId\":\"30ed51b7-ffa6-49e0-a\"},{\"rail\":\"lightrail\",\"valueId\":\"91c3a137-0117-4855-9\"}]","lightrailUserId":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"},"on_behalf_of":null,"order":null,"outcome":{"network_status":"approved_by_network","reason":null,"risk_level":"normal","risk_score":45,"seller_message":"Payment complete.","type":"authorized"},"paid":true,"payment_intent":null,"receipt_email":null,"receipt_number":null,"refunded":false,"refunds":{"object":"list","data":[],"has_more":false,"total_count":0,"url":"/v1/charges/ch_1DW7K6CM9MOvFvZK6k2DTNzo/refunds"},"review":null,"shipping":null,"source":{"id":"card_1DW7K6CM9MOvFvZKThYMYRyJ","object":"card","address_city":null,"address_country":null,"address_line1":null,"address_line1_check":null,"address_line2":null,"address_state":null,"address_zip":null,"address_zip_check":null,"brand":"Visa","country":"US","customer":null,"cvc_check":null,"dynamic_last4":null,"exp_month":11,"exp_year":2019,"fingerprint":"vnMoEG5eZVxSMPc7","funding":"credit","last4":"4242","metadata":{},"name":null,"tokenization_method":null},"source_transfer":null,"statement_descriptor":null,"status":"succeeded","transfer_group":null}}],"metadata":null,"tax":{"roundingMode":"HALF_EVEN"},"createdDate":"2018-11-13T19:13:17.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"},{"id":"4528e877-056b-4c7c-9","transactionType":"reverse","currency":"USD","totals":{"subtotal":-1548,"tax":-74,"discount":-200,"discountLightrail":-200,"payable":-1422,"paidLightrail":-1000,"paidStripe":-422,"paidInternal":0,"remainder":0},"lineItems":null,"paymentSources":null,"steps":[{"rail":"lightrail","valueId":"30ed51b7-ffa6-49e0-a","contactId":"031a98ab-0080-4d6a-a","code":null,"balanceBefore":null,"balanceAfter":null,"balanceChange":200,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":0},{"rail":"lightrail","valueId":"91c3a137-0117-4855-9","contactId":"031a98ab-0080-4d6a-a","code":null,"balanceBefore":0,"balanceAfter":1000,"balanceChange":1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":0},{"rail":"stripe","amount":422,"chargeId":"ch_1DW7K6CM9MOvFvZK6k2DTNzo","charge":{"id":"re_1DW7K8CM9MOvFvZKelV297Ml","object":"refund","amount":422,"balance_transaction":"txn_1DW7K8CM9MOvFvZKfM21RCFL","charge":"ch_1DW7K6CM9MOvFvZK6k2DTNzo","created":1542136400,"currency":"usd","metadata":{"reason":"not specified"},"reason":null,"receipt_number":null,"source_transfer_reversal":null,"status":"succeeded"}}],"metadata":null,"tax":{"roundingMode":"HALF_EVEN"},"createdDate":"2018-11-13T19:13:19.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

### List Transactions [GET /transactions{?limit}{?transactionType}{?createdDate}{?currency}{?valueId}]

+ Parameter
    + limit (number, optional) - The max number of items to get.
    + transactionType (string, optional) - Filter by the transactionType.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + valueId (string, optional) - Filter by Value ID used in the Transaction.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Transaction])

    + Body

            [{"id":"aa889369-458e-4aa2-9","transactionType":"debit","currency":"USD","totals":{"remainder":0},"lineItems":null,"paymentSources":null,"steps":[{"rail":"lightrail","valueId":"6991a23c-41da-4276-a","contactId":null,"code":null,"balanceBefore":3000,"balanceAfter":2000,"balanceChange":-1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null}],"metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"},"tax":null,"createdDate":"2018-11-13T19:13:17.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]
### Capture Pending Transaction (Coming soon) [POST /transactions/{id}/capture]

A pending Transaction is created when it is created with `pending = true`.  A pending Transaction will be automatically voided unless it is captured.

+ Parameter
    + id (string) - the ID of the pending Transaction to capture.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "usesRemaining": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "captured",
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }
### Void Pending Transaction (Coming soon) [POST /transactions/{id}/void]

A pending Transaction is created when it is created with `pending = true`.  A pending Transaction will be automatically voided but voiding it manually will release the funds sooner.

+ Parameter
    + id (string) - the ID of the pending Transaction to void.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "usesRemaining": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "void",
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }


# Group Advanced

## Currencies [/currencies]

A Currency is a unit of money in Lightrail.  It can be a standard currency such as `USD`, or a made up currency such as `FUNBUX`.  All currencies must be created before they are used, though they are typically created on initial setup in the web app.

### Create a Currency [POST /currencies]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + code (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + name (string, required) - Long name for the currency, eg: `Dollars`.
        + symbol (number, required) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, required) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

    + Body

            {
                "code": "USD",
                "name":"US Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
    
+ Response 201 (application/json)
    + Attributes (Currency)

    + Body
            
            {
                "code": "USD",
                "name": "US Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
### Get a Currency [GET /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to get.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Currency)

    + Body

            {
                "code": "USD",
                "name": "US Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }

### List Currencies [GET /currencies]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (array[Currency])

    + Body

            [
                {
                    "code": "USD",
                    "name": "US Dollars",
                    "symbol": "$",
                    "decimalPlaces": 2
                }
            ]
### Update a Currency [PATCH /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge. Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. If present must match the code in the path.
        + name (string, optional) - Long name for the currency, eg: `Dollars`.
        + symbol (string, optional) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, optional) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.
        
    + Body
    
            {
                "name": "Zimbabwe Dollars",
                "symbol": "Z$"
            }
    
+ Response 200 (application/json)
    + Attributes (Currency)

    + Body
    
            {
                "code": "ZWD",
                "name": "Zimbabwe Dollars",
                "symbol": "Z$",
                "decimalPlaces": 2
            }
### Delete a Currency [DELETE /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to delete.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Currency that is in use.  If the Currency is referenced by a Value or Program those objects would need to be deleted first.  If the Currency is referenced by a Transaction it cannot be deleted because Transactions cannot be deleted.  Currencies in use can still be updated.
    
    + Attributes (RestError)

    + Body
    
            {
                "statusCode": 409,
                "message": "Currency 'USD' is in use.",
                "messageCode": "CurrencyInUse"
            }

# Data Structures

## CodeGeneration (object)
+ length (number, required) - The number of random characters in the code.  This number must be at least 5 to accommodate a reasonable amount of randomness.
+ characters (string, optional) - The set of characters to use for the random part of the code.  Defaults to all numbers and upper case letters.
+ prefix (string, optional) - Text prepended before the random characters in the code.
+ suffix (string, optional) - Text appended after the random characters in the code.

## Currency (object)
+ code (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ name (number) - Long name for the currency, eg: `Dollars`.
+ symbol (number) - Currency symbol used for formatting, eg: `$`.
+ decimalPlaces (number) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

## Contact (object)
+ id (string) - The ID you choose to represent the Contact.
+ firstName (string) - The Contact's first name.
+ lastName (string) - The Contact's last name.
+ email (string) - The Contact's email.
+ tags (array[string]) - Segmentation tags. (support coming soon)
+ metadata (object) - Arbitrary data associated with the Contact.
+ createdDate (string) - Date when the Contact was created.
+ updatedDate (string) - Date when the Contact was last updated.

## Issuance (object)
+ id (string, required) - The ID you choose to represent the Issuance.  Two Issuances can't have the same ID, guaranteeing repeated calls won't create extra resources.
+ programId (string) - The ID of the program it was created from.
+ count (number) - The numbers of Values to issue. Must be between 1-1000.
+ balance (number) - The balance to set on each Value. This can be constrained by the Program's `minInitialBalance` and `maxInitialBalance` or must be in the `fixedInitialBalances` array.  
+ usesRemaining (number) - The usesRemaining to set on each Value. This can be restricted to values defined by the Program's `fixedInitialUsesRemaining`.  
+ startDate (string) - Override the Program's startDate for the Value.
+ endDate (string) - Override the Program's endDate for the Value.
+ redemptionRule (Rule) - A Redemption Rule controlling when the Values can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ balanceRule (Rule) - A Rule controlling the effective balance of the Values in checkout. To use this `balance` must be set to `null`. The syntax will be defined in a separate document.
+ tags (array[string]) - Segmentation tags. (support coming soon) These are applied to each Value.
+ metadata (object) - Arbitrary data associated with the Issuance.
+ createdDate (string) - Date of creation.
+ updatedDate (string) - Date of last update.

## LineItem (object)
+ type (string) - Must be either `product`, `shipping` or `fee`.
+ productId (string) -  The ID of the product.
+ variantId (string) - The variant ID of a product. (Can be used to store SKU.)
+ unitPrice (number) -  The unit price of the item.
+ quantity (number) -  The number of items. Defaults to 1 if not provided.
+ taxRate (number) - Tax rate for the item. This is needed when a transaction contains items that have different tax rates.
+ marketplaceRate (number) - A number between 0 and 1 for the marketplace's commission rate. If this number is set on any lineItems then the `marketplace` section of totals will be calculated.
+ tags (array[string]) - A list of tags associated with the item. For example, 'seasonal' or 'clothing'.
+ metadata (object) - Any additional data you want to store for the item.

## LineItemResponse (LineItem)
+ valuesApplied (array[LineItemPromotions])
+ lineTotal (LineTotal)

## LineItemPromotions (object)
+ id (string) - The ID you choose to represent the Value.
+ redemptionRule (string) - A Redemption Rule controlling when the Value can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ ruleExplanation (string) - An explanation for the `redemptionRule` does that can be used to display to the contact.
+ amount (number) - The value of the discount.
+ pretax (boolean) - If true the Value's balance is applied on checkout before tax is calculated.

## LineTotal (object)
+ subtotal (number) - The total cost of the items. ie `unitPrice * quantity`.
+ taxable (number) - The taxable amount. ie `price - pretaxDiscount`.
+ tax (number) - The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding'.
+ discount (number) - The discount
+ payable (number) - The cost of the line item after tax and discounts have been applied.

## Program (object)
+ id (string) - The ID you choose to represent the Program.
+ name (string) - A human-readable name for the Program.
+ currency (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ discount (boolean) - If true Values created in the Program will be marked as a discount on checkout.
+ pretax (boolean) - If true the balance on Values created in the Program is applied on checkout before tax is calculated.
+ active (boolean) - Whether Values created in the Program are active and can be used upon creation.
+ redemptionRule (Rule) - A Redemption Rule controlling when Values created in the Program can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ balanceRule (Rule) - A Rule controlling the effective balance of Values created in the Program in a Checkout. To use this `balance` must be set to `null`. The syntax will be defined in a separate document.
+ minInitialBalance (number) - 
+ maxInitialBalance (number) - 
+ fixedInitialBalances (array[number]) - A list of exact balances Values created in the Program can be created with.
+ fixedInitialUsesRemaining (number) - A list of exact usesRemaining the Value can be created with.
+ tags (array[string]) - Segmentation tags. (support coming soon)
+ startDate (string) - Earliest date that Values created in the Program can be active.
+ endDate (string) - Latest date that Values created in the Program can be active.
+ createdDate (string) - Date when the Program was created.
+ updatedDate (string) - Date when the Program was last updated.
+ metadata (object) - Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys.

## RestError (object)
+ statusCode (number) - the HTTP status code.
+ message (string) - an English explanation of the error.  This is for display purposes only as the explanation may be formatted or change between system updates.
+ messageCode (string) - A constant corresponding to the message.  This can be used to take action in response to the error.

## StripeRestError (RestError)
+ stripeError (object) - When using the `stripe` rail: the full error response from Stripe in case of an error charging a credit card.

## Rule (object)
+ rule (string) - the Lightrail Rule text of the rule.
+ explanation (string) - a plain explanation of the rule seen by contacts.

## Tax (object)
+ roundingMode (string) - The rounding mode used for tax calculations. Modes: `"HALF_EVEN"`, `"HALF_UP"`. Defaults to `"HALF_EVEN"`, also known as bankers rounding, which is the standard for most financial calculations.

## Transaction (object)
+ id (string) - The ID you choose to represent the Transaction.
+ transactionType (string) - The type of the transaction, eg: `debit`, `credit`, `checkout`...
+ currency (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ tax (Tax, optional) 
+ steps (array[TransactionStep]) - An array of transaction steps.
+ totals (TransactionTotals) - Totals calculated for checkout transactions.
+ lineItems (array[LineItemResponse]) - Data on each LineItem in a checkout transaction.
+ paymentSources (array[TransactionParty]) - Sources used in a checkout Transaction.
+ simulated (boolean) - True if the transaction was simulated.
+ createdDate (string) - Date when the Transaction was created.
+ metadata (object) - Arbitrary data associated with the Transaction.

## TransactionTotals (object)
+ subtotal (number) - The sum of all products, services and fees before tax or discounts.
+ tax (number) - The amount of tax to be collected.
+ discount (number) - The total amount of discounts applied.
+ discountLightrail (number) - The amount discounted from Lightrail payment sources. 
+ payable (number) - The amount payable by the customer. Calculated as `payable = subtotal + tax - discount`.
+ paidLightrail (number) - The amount paid from Lightrail payment sources.
+ paidStripe (number) - The amount paid from Stripe payment sources.
+ paidInternal (number) - The amount paid from Internal payment sources.
+ remainder (number) - The amount still owing, if a remainder is allowed by setting `allowRemainder: true`.
+ marketplace (TransactionTotalsMarketplace) - Marketplace totals calculated if any marketplace behaviour has been configured (by setting the LineItem `marketplaceRate`).

## TransactionTotalsMarketplace (object)
+ sellerDiscount (number) - The amount of discount the seller is responsible for providing (comes from Values with `discountSellerLiability` > 0).
+ sellerGross (number) - The amount payable to the seller before discounts.
+ sellerNet (number) - The amount payable to the seller after discounts.

## LightrailTransactionParty (object)
+ rail (string) - The payment rail: `lightrail`. Must be used in combination with one of the following identifiers.
+ code (string) - `lightrail`: the code of a Gift Card or Promotion.
+ contactId (string) - `lightrail`: a Contact's ID.  This is shorthand for all Values that a Contact is associated with.
+ valueId (string) - `lightrail`: a Value's ID.

## StripeOrLightrailTransactionParty (LightrailTransactionParty)
+ rail (string) - The payment rail. Must belong to [`lightrail`, `stripe`]. Must be used in combination with one of the following identifiers.
+ source (string) - `stripe`: a tokenized credit card for Stripe.  
+ customer (string) - `stripe`: a Stripe customer ID (uses customer's default source).  
+ maxAmount (number) - `stripe`: the maximum amount that can be charged to the given Stripe source.
+ additionalStripeParams (AdditionalStripeChargeParams) - `stripe`: additional parameters passed to Stripe when creating a charge.  See [Stripe's documentation](https://stripe.com/docs/api) for more information.

## TransactionParty (StripeOrLightrailTransactionParty)
+ rail (string) - The payment rail. Must belong to [`lightrail`, `stripe`, `internal`]. Must be used in combination with one of the following identifiers.
+ id (string) - `internal`: the ID of the internal value.
+ balance (number) - `internal`: the amount of internal value stored.
+ beforeLightrail (boolean) - `internal`: if true this value is applied before Lightrail Values, otherwise it will be applied after.

## AdditionalStripeChargeParams (object)
+ description (string)
+ on_behalf_of (string)
+ receipt_email (string)
+ statement_descriptor (string)
+ transfer_group (string)

## TransactionStep (object)
A step taken as part of the transaction.
+ rail (string) - Indicates the payment rail. Must be either `lightrail`, `stripe` or `internal`.

## LightrailTransactionStep (TransactionStep)
+ rail (string) - `lightrail`
+ id (string) - The id of the Value transacted with.
+ currency (string) - The currency of the Value transacted with.
+ contactId (string) - The ID of the Contact associated with the Value.
+ code (string) - The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`..
+ balanceBefore (number) - The `balance` of the Value before the Transaction.  `null` when the Value does not have a `balance` (and thus has a `balanceRule`).
+ balanceAfter (number) - The `balance` of the Value after the Transaction.  `null` when the Value does not have a `balance` (and thus has a `balanceRule`).
+ balanceChange (number) - The net change of the `balance` of the Value for the Transaction.  When the Value has a `balanceRule` rather than a `balance` this number will still be set to indicate the value of the rule.
+ usesRemainingBefore (number) - The `usesRemaining` of the Value before the Transaction.  `null` when the Value does not have a `usesRemaining`.
+ usesRemainingAfter (number) - The `usesRemaining` of the Value after the Transaction.  `null` when the Value does not have a `usesRemaining`.
+ usesRemainingChange (number) - The net change of the `usesRemaining` of the Value for the Transaction.

## StripeTransactionStep (TransactionStep)
+ rail (string) - `stripe`
+ amount (number) - the amount of the charge.
+ chargeId (string) - the ID of the Stripe charge, if applicable.
+ charge (object) - the Stripe Charge object, if applicable.

## InternalTransactionStep (TransactionStep)
+ rail (string) - `internal`
+ id (string) - the ID of the internal value transacted with.
+ balanceBefore (number) - The balance of the internal value before the Transaction.
+ balanceAfter (number) - The balance of the internal value after the Transaction.
+ balanceChange (number) - The net change of the balance of the internal value for the Transaction.

## Value (object)
+ id (string) - The ID you choose to represent the Value.
+ programId (string) - 
+ currency (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ contactId (string) - The ID of the Contact that has claimed this Value.
+ code (string) - The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`.
+ isGenericCode (boolean) - (Deprecated. Lightrail is currently in the process of updating the functionality of generic codes. Please [contact us](mailto:hello@lightrail.com) for more information.) If true the code is to be shared publicly and not secret. If false the code is treated as a secret. Defaults to false if not provided.
+ balance (number) - The amount of money available in a Value. This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
+ usesRemaining (number) - The number of times the Value can be used in checkout. When this number reaches 0 the Value can no longer be used in checkout.
+ active (boolean) - Whether the Value is active and can be used upon creation.
+ frozen (boolean) - If true the Value is frozen and cannot be transacted with.
+ canceled (boolean) - If true the Value is canceled. Once canceled the Value can never be uncanceled.
+ pretax (boolean) - If true the Value's balance is applied on checkout before tax is calculated.
+ discount (boolean) - If true the Value will be marked as a discount on checkout.
+ discountSellerLiability (number) - In a marketplace: a number between 0 and 1 for the ratio of the discount the seller is liable for. (eg: at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount).
+ redemptionRule (Rule) - A Redemption Rule controlling when the Value can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ balanceRule (Rule) - A Rule controlling the effective balance of the Value in a Checkout. To use this `balance` must be set to `null`. The syntax will be defined in a separate document.
+ startDate (string) - Date when the Value becomes available.
+ endDate (string) - Date when the Value expires.
+ tags (array[string]) - Segmentation tags. (support coming soon)
+ metadata (object) - Arbitrary data associated with the Value.
+ createdDate (string) - Date of creation.
+ updatedDate (string) - Date of last update.
+ updatedContactIdDate (string) - Date of the last contactId update (Contact attached).