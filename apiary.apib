FORMAT: 1A
HOST: https://api.lightrail.com/v2/

# Lightrail Documentation

Welcome to Lightrail V2. Lightrail makes it easy to create gift cards, manage customer account credit, run promotional discount programs, and collect payment all in one unified checkout solution.

## Authentication
Authentication is done via an authorization header. You can retrieve your Lightrail API key [here](https://www.lightrail.com).

In requests to Lightrail you must incldue the following header:
```
Authorization: Bearer <API_KEY>
```

## Dates

All dates are sent and received in 8601 format.

```text
YYYY-MM-DDTHH:MM:SSZ
```

## Errors

Lightrail uses the following HTTP status codes to indicate an error:

| code | meaning |
|------|---------|
| 400  | The request could not be understood.  eg: JSON body could not be parsed. |
| 401  | Authentication missing. |
| 403  | The operation is not allowed for the given authentication. |
| 404  | The resource was not found.  eg: There is no Contact for the given ID. |
| 409  | The operation could not be performed because of the state of the system.  eg: There is not enough balance for a Transaction to complete. |
| 422  | The request was understood but has a logical problem.  eg: Attempting to credit a negative amount. |
| 429  | Too many requests in a given amount of time. |
| 500  | Internal server error.  Please [contact us](mailto:hello@lightrail.com) with details of your request and we'll look into it. |

Lightrail errors contain a JSON body with the following properties:

| property    | always present | purpose |
|-------------|----------------|---------|
| message     | yes            | English explanation of the error.  This is for display purposes only as the explanation may change between system updates for clarity. |
| statusCode  | yes            | The HTTP status code. |
| messageCode | no             | A constant corresponding to the message.  This can be used to take action in response to the error. |

An example:

```json
{
    "message": "Insufficient value for the transaction.",
    "statusCode": 409,
    "messageCode": "InsufficientValue"
}
```

## Support
[Contact us](mailto:hello@lightrail.com) any time if you have any questions.  We're here to help.

## Contacts [/contacts/]

Contacts are the people or businesses who buy products or services from you.  They're identified by a unique `id`.

### Create a Contact [POST /contacts]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - Unique idempotent ID for the Contact.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Contact.

    + Body

            {
                "id": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                }
            }
    
+ Response 201 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",'
                "tags": [],
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Get a Contact [GET /contacts/{id}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Contact to get.

+ Response 200 (application/json)
    + Attributes (Contact)

    + Body

            {
                "id": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "tags": [],
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### List Contacts [GET /contacts{?limit}{?offset}{?id}{?tags}{?firstName}{?lastName}{?email}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + id (number, optional) - Filter by ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (number, optional) - Filter by tag.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + firstName (string, optional) - Filter by the firstName.
    + lastName (string, optional) - Filter by the lastName.
    + email (string, optional) - Filter by email.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1

    + Attributes (array[Contact])

    + Body

            [
                {
                    "id": "unique-id-123",
                    "firstName": "Jeffrey",
                    "lastName": "Lebowski",
                    "email": "thedude@example.com",
                    "tags": [],
                    "metadata": {
                        "alias": "El Duderino"
                    },
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]
### Update a Contact [PATCH /contacts/{id}]

+ Request (application/json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, optional) - Unique idempotent ID for the Contact.  If present must match the ID in the path.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Contact.

    + Body

            {
                "metadata": {
                    "alias": "El Duderino"
                }
            }
            
+ Parameter
    + id (string) - the ID of the Contact to update.
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "tags": [],
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
            }
### Delete a Contact [DELETE /contacts/{id}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Contact to delete.

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Contact that is associated with one or more Values. Values that are associated with the Contact would need to be deleted first. 

    + Body

            {
                "statusCode": 409,
                "message": "Contact 'unique-id-123' is in use",
                "messageCode": "ContactInUse"
            }

### List Contact's Gift Cards [GET /contacts/{id}/values/giftCards]

+ Request (application/json)
  + Headers

            Authorization: Bearer <API_KEY>

+ Parameter
  + id (string) - the ID of the Contact whose gift cards should be retrieved.

+ Response 200 (application/json)
  + Attributes (array[Value])

  + Body

            [
                {
                    "id": "gift-1",
                    "program": "giftCards",
                    "currency": "USD",
                    "contact": "unique-id-123",
                    "balance": 2500,
                    "preTax": false,
                    "active": true,
                    "frozen": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]
### List Contact's Promotions [GET /contacts/{id}/values/promotions]

+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Contact whose promotions should be retrieved.

+ Response 200 (application/json)
    + Attributes (array[Value])

    + Body

            [
                {
                    "id": "promo-1",
                    "program": "signup-bonus",
                    "currency": "USD",
                    "contact": "unique-id-123",
                    "balance": 2500,
                    "preTax": true,
                    "active": true,
                    "frozen": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]
### List Contact's Values [GET /contacts/{id}/values{?limit}{?offset}{?program}{?currency}{?preTax}{?active}{?frozen}{?uses}{?startDate}{?endDate}{?createdDate}{?updatedDate}{?tags}]

+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + program (string, optional) - Filter by the Value's Program ID.
    + currency (string, optional) - Filter by the Value's currency.
    + preTax (boolean, optional) - Filter by whether or not the Value is applied preTax.
    + active (boolean, optional) - Filter by whether or not the Value is active.
    + frozen (boolean, optional) - Filter by whether or not the Value is frozen.
    + uses (number, optional) - Filter by whether or not the Value is uses.
    + startDate (string, optional) - Filter by the Value's startDate.
    + endDate (string, optional) - Filter by the Value's endDate.
    + createdDate (string, optional) - Filter by the Value's createdDate.
    + updatedDate (string, optional) - Filter by the Value's updatedDate.

+ Response 200 (application/json)
    + Headers

            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1

    + Attributes (array[Value])

    + Body

            [
                {
                    "id": "vs-1",
                    "program": "giftCards",
                    "currency": "USD",
                    "contact": "unique-id-123",
                    "balance": 2500,
                    "preTax": false,
                    "active": true,
                    "frozen": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]

# Group Gift Cards

## Gift Cards [/values/giftCards]

A Gift Card is Value that starts as identified by a code.  The code is kept secret and used to access the Value.  A Gift Card can be used anonymously or assigned and attached to a Contact for later use.

### Create a Gift Card [POST /values/giftCards]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - Unique idempotent ID of the Value.
        + program (string, optional) - Create as part of a Program and copy default properties from it.
        + contact (string, optional) - Directly apply to a Contact.  Cannot be set with `code`.
        + code (string, optional) - Assign a code.  Cannot be set with `contact`.
        + currency (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. Required if `program` is not set.
        + balance (number, optional) - The amount of money available in a Value.  This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + uses (number, optional) - The number of times the Value can be used.  When this number reaches 0 the Value is expired.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "id": "vs-1",
                "program": "giftCards",
                "currency": "USD",
                "balance": 2500
            }
    
+ Response 201 (application/json)
    + Attributes (Value)

    + Body
    
            {
                "id": "vs-1",
                "type": "giftCards",
                "program": "giftCards",
                "currency": "USD",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Get a Gift Card [GET /values/giftCards/{id}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Gift Card to get.

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "type": "giftCard",
                "program": "giftCards",
                "currency": "USD",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### List Gift Cards [GET /values/giftCards{?limit}{?offset}{?id}{?tags}{?contact}{?program}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + id (number, optional) - Filter by ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (string, optional) - Filter by tag.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + contact (string, optional) - Filter by Values attached to the given Contact ID.
    + program (string, optional) - Filter by Program ID.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Value])

    + Body

            [
                {
                    "id": "vs-1",
                    "type": "giftCard",
                    "program": "giftCards",
                    "currency": "USD",
                    "balance": 2500,
                    "active": true,
                    "frozen": false,
                    "canceled": false,
                    "preTax": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "tags": [],
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]
### Update a Gift Card [PATCH /values/giftCards/{id}]

+ Parameter
    + id (string) - the ID of the Gift Card to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + canceled (boolean, optional) - If true the Value is canceled.  Once canceled the Value can never be uncanceled.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "frozen": true
            }
    
+ Response 200 (application/json)
    + Attributes (Value)

    + Body
    
            {
                "id": "vs-1",
                "type": "giftCard",
                "program": "giftCards",
                "currency": "USD",
                "balance": 2500, 
                "active": true,
                "frozen": true,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "metadata": null,
                "tags": [],
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
            }
### Assign a Gift Card to a Contact [POST /values/giftCards/{id}/claim]

+ Request (application/json)
    Associates a Gift Card with a contact so that the value is automatically available to them in checkout.

     + Headers
     
             Authorization: Bearer <API_KEY>
 
     + Attributes
         + contact (string, required) - The ID of the Contact to claim the Gift Card.
         
     + Body
     
             {
                 "contact": "unique-id-123"
             }

+ Parameter
    + id (string) - the ID of the Gift Card to claim.

+ Response 200 (application/json)

    The Gift Card was claimed for the Contact.

    + Attributes (Value)

    + Body

            {
                "id": "vs-1-claim-1",
                "type": "giftCard",
                "program": "giftCards",
                "contact": "unique-id-123",
                "currency": "USD",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Change a Gift Card's code [PUT /values/giftCards/{id}/changeCode]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, required) - The code to set.  If there is an existing code it will no longer refer to this Value.
        + secure (boolean, optional) - If true the code is stored securely and only shown in abbreviated form.  If false or omitted the code will be shown in the web app and reports in plain text.
        
    + Body
    
            {
                "code": "c3d177ff950b4e2796e341f65976e1b1",
                "secure": true
            }

+ Parameter
    + id (string) - the ID of the Gift Card to change the code of.

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "type": "giftCard",
                "program": "giftCards",
                "currency": "USD",
                "code": "…e1b1",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Gift Card Programs [/programs/giftCards]

Programs define the behaviour of Value that you wish to issue: in this case, gift cards. Programs are typically created through the web app, but an explanation of Programs can be found [below](#reference/advanced/programs) to provide context and insight into how `Values` function. The following endpoints can be used to manage Gift Card Programs. 

### Create Gift Card Program [POST /programs/giftCards]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - Unique idempotent ID for the Program.
        + name (string, optional) - A human-readable name for the Program.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + access (enum[string], required) - How the values can be accessed
            + `contact` - must be associated with a Contact by ID.
            + `secureCode` - a code is generated or supplied and is stored securely.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + minInitialBalance (number, optional) - The minimum balance the Value can be created with.
        + maxInitialBalance (number, optional) - The maximum balance the Value can be created with.
        + fixedInitialBalances (array[number], optional) -  A list of exact balances the Value can be created with.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Program.

    + Body

            {
                "id": "gift-cards-usd",
                "name": "Gift Cards USD",
                "currency": "USD",
                "access": "secureCode",
                "minInitialBalance": 500,
                "maxInitialBalance": 100000,
                "tags": ["giftCard"]
            }
    
+ Response 201 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "gift-cards-usd",
                "name": "Gift Cards USD",
                "type": "giftCard",
                "currency": "USD",
                "access": "secureCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": 500,
                "maxInitialBalance": 100000,
                "fixedInitialBalances": null,
                "uses": null,
                "tags": ["giftCard"],
                "metadata": null,
                "startDate": null,
                "endDate": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Get a Gift Card Program [GET /programs/giftCards/{id}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Gift Card Program to get.

+ Response 200 (application/json)
    + Attributes (Program)

    + Body

            {
                "id": "unique-id-123",
                "name": "Gift Card program",
                "currency": "CAD",
                "access": "secureCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": null,
                "maxInitialBalance": null,
                "fixedInitialBalances": [
                    500,
                    1500,
                    2500
                ],
                "uses": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### List Gift Card Programs [GET /programs/giftCards{?limit}{?offset}{?id}{?tags}{?currency}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + id (string, optional) - Filter by ID. Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (number, optional) - Filter by tag. Multiple values can be sent as a comma separated list in which case only one value must match.
    + currency (string, optional) - Filter by currency. Multiple values can be sent as a comma separated list in which case only one value must match.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Program])

    + Body

            [
                {
                    "id": "unique-id-123",
                    "name": "Gift Card program",
                    "currency": "CAD",
                    "access": "secureCode",
                    "discount": "false",
                    "preTax": "false",
                    "active": "true",
                    "redemptionRule": null,
                    "valueRule": null,
                    "minInitialBalance": null,
                    "maxInitialBalance": null,
                    "fixedInitialBalances": [
                        500,
                        1500,
                        2500
                    ],
                    "uses": null,
                    "tags": [],
                    "metadata": null,
                    "startDate": null,
                    "endDate": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]
### Update a Gift Card Program [PATCH /programs/giftCards/{id}]

+ Parameter
    + id (string) - the ID of the Gift Card Program to modify.

+ Request (application/json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.
    Note that updating a Program does not automatically update the attributes of Values that have already been generated through it. Only new Values generated afterwards will reflect the changes. If you want existing Values to reflect your changes, you will need to update them in a separate step. 

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + name (string, optional) - A human-readable name for the Program.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + minInitialBalance (number, optional) - The minimum balance the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + maxInitialBalance (number, optional) - The maximum balance the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + fixedInitialBalances (array[number], optional) - A list of exact balances the Value can be created with.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Program.

    + Body

            {
                "tags": ["top-customers"]
            }
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "gift-cards-usd",
                "name": "Gift Cards USD",
                "type": "giftCard",
                "currency": "USD",
                "access": "secureCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": 500,
                "maxInitialBalance": 100000,
                "fixedInitialBalances": null,
                "uses": null,
                "tags": ["giftCard", "top-customers"],
                "metadata": null,
                "startDate": null,
                "endDate": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Delete a Gift Card Program [DELETE /programs/giftCards/{id}]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Promotion Program to delete.

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Gift Card Program that is in use. If the Program is referenced by one or more Values, those objects would need to be deleted first. If a Value created through this Program is referenced by a Transaction, it cannot be deleted because Transactions cannot be deleted. Programs in use can still be updated. 

    + Body
    
            {
                "statusCode": 409,
                "message": "Program 'abc123' is in use.",
                "messageCode": "ProgramInUse"
            }
### Issue Gift Cards from a Program [POST /programs/giftCards/{id}/issue]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - Program issuance request ID.  This ID is used to generate Gift Card IDs and prevent duplicate requests from being processed.
        + count (number, required) - The number of Gift Cards to issue.
        + contacts (array[string], optional) - List of Contact IDs to apply the Gift Card to directly.  The length of the list must match `count`.  One of `contacts`, `codes`, or `codeGeneration` must be specified.
        + codes (array[string], optional) - List of codes to use for each Gift Card created.  The length of the list must match `count`.  One of `contacts`, `codes`, or `codeGeneration` must be specified.
        + codeGeneration (CodeGeneration, optional) - Settings for randomly generated codes. One of `contacts`, `codes`, or `codeGeneration` must be specified.
        + secureCodes (boolean, optional) - Codes are stored securely.  They will only be visible in the CSV file.
        + startDate (string, optional) - Override the Program's configured startDate.
        + endDate (string, optional) - Override the Program's configured endDate.
        
    + Body
    
            {
                "id": "partner-release-11",
                "count": 10,
                "codeGeneration": {
                    "length": 12,
                    "characters": "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                },
                "secureCodes": true
            }
    
+ Response 201 (application/json)
    + Attributes
        + count (number, required) - The number of Gift Cards generated.
        + values (Value, optional) - A list of Gift Cards generated.  This list is only available if `count` < 1000.
        + csv (string, required) - A link to a CSV with details of the generated Gift Cards.  This CSV will always contain the full codes (if the Gift Cards were not attached directly to Contacts).

    + Body
    
            {
                "count" 10,
                "values": [
                    {
                        "id": "partner-release-11-1",
                        "type": "giftCard",
                        "program": "partner-release",
                        "currency": "USD",
                        "code": "…LQWT",
                        "balance": 2400,
                        "active": true,
                        "frozen": false,
                        "canceled": false,
                        "preTax": false,
                        "redemptionRule": null,
                        "valueRule": null,
                        "uses": null,
                        "startDate": null,
                        "endDate": null,
                        "tags": [],
                        "metadata": null,
                        "createdDate": "2018-04-17T23:20:08.404Z",
                        "updatedDate": "2018-04-17T23:20:08.404Z"
                    },
                    // ...
                ],
                "csv": "https://www.lightrail.com/csv/partner-release-11-7116484d77ca.csv"
            }

# Group Promotions

## Promotions [/values/promotions]

A Promotion is [Value](#reference/advanced/values) that is given away to incentivise a purchase. It may be accessed via a code, attached to a [Contact](#reference/0/contacts) or even applied on checkout automatically. It can be `balance`-based such as $5 or `valueRule`-based such as 50% off. A Promotion will typically have a `redemptionRule` that defines when the Promotion applies. 
- **Managing Promotions:** Promotions are typically created and managed based on [Promotion Programs](#reference/promotions/promotion-programs) that define the default parameters for the promotion and how it behaves. 
- **Redeeming Promotions:** Promotions are redeemed by your customers in [checkout](#reference/transactions/transactions/checkout). 

### Create a Promotion [POST /values/promotions]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - Unique idempotent ID of the Value.
        + program (string, optional) - Create as part of a Program and copy default properties from it.
        + contact (string, optional) - Directly apply to a Contact.  Cannot be set with `code`.
        + code (string, optional) - Assign a code.  Cannot be set with `contact`.
        + currency (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. Required if `program` is not set.
        + balance (number, optional) - The amount of money available in a Value.  This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + uses (number, optional) - The number of times the Value can be used.  When this number reaches 0 the Value is expired.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "id": "vs-1",
                "program": "springpromo",
                "currency": "USD",
                "balance": 2500
            }
    
+ Response 201 (application/json)
    + Attributes (Value)

    + Body
    
            {
                "id": "vs-1",
                "type": "promotion"
                "program": "springpromo",
                "currency": "USD",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Get a Promotion [GET /values/promotions/{id}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Promotion to get.

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "type": "promotion"
                "program": "springpromo",
                "currency": "USD",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### List Promotions [GET /values/promotions{?limit}{?offset}{?id}{?tags}{?contact}{?program}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + id (number, optional) - Filter by ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (string, optional) - Filter by tag.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + contact (string, optional) - Filter by Values attached to the given Contact ID.
    + program (string, optional) - Filter by Program ID.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Value])

    + Body

            [
                {
                    "id": "vs-1",
                    "type": "promotion"
                    "program": "springpromo",
                    "currency": "USD",
                    "balance": 2500,
                    "active": true,
                    "frozen": false, 
                    "canceled": false,
                    "preTax": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "tags": [],
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]
### Update a Promotion [PATCH /values/promotions/{id}]

+ Parameter
    + id (string) - the ID of the Promotion to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + canceled (boolean, optional) - If true the Value is canceled.  Once canceled the Value can never be uncanceled.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "frozen": true
            }
    
+ Response 200 (application/json)
    + Attributes (Value)

    + Body
    
            {
                "id": "vs-1",
                "type": "promotion"
                "program": "springpromo",
                "currency": "USD",
                "balance": 2500, 
                "active": true,
                "frozen": true,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
            }
### Delete a Promotion [DELETE /values/promotions/{id}]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Promotion to delete.

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Promotion that has been used in a Transaction.

    + Body
    
            {
                "statusCode": 409,
                "message": "Value 'abc123' is in use.",
                "messageCode": "ValueInUse"
            }
### Assign a Promotion to a Contact [POST /values/promotions/{id}/claim]

+ Request (application/json)

    Associates a Promotion with a contact so that the value is automatically available to them in checkout. 

     + Headers
     
             Authorization: Bearer <API_KEY>
 
     + Attributes
         + contact (string, required) - The ID of the Contact to claim the Promotion.
         
     + Body
     
             {
                 "contact": "unique-id-123"
             }

+ Parameter
    + id (string) - the ID of the Promotion to claim.

+ Response 200 (application/json)
    
    The Promotion was claimed for the Contact.

    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "type": "promotion",
                "program": "springpromo",
                "currency": "USD",
                "contact": "unique-id-123",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

+ Response 201 (application/json)
    
    A portion of the original Promotion was claimed and a new Promotion was created private to the Contact.

    + Attributes (Value)

    + Body

            {
                "id": "vs-1-claim-1",
                "type": "promotion",
                "program": "springpromo",
                "currency": "USD",
                "contact": "unique-id-123",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": 1,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Change a Promotion's code [PUT /values/promotions/{id}/changeCode]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, required) - The code to set.  If there is an existing code it will no longer refer to this Value.
        + secure (boolean, optional) - If true the code is stored securely and only shown in abbreviated form.  If false or omitted the code will be shown in the web app and reports in plain text.
        
    + Body
    
            {
                "code": "SPRINGPROMO2077"
            }

+ Parameter
    + id (string) - the ID of the Promotion to change the code of.

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "type": "promotion"
                "program": "springpromo",
                "currency": "USD",
                "code": "SPRINGPROMO2077",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

## Promotion Programs [/programs/promotions]

Programs define the behaviour of promotional value that you issue. Programs are typically created through the [web app](https://www.lightrail.com/app/#), but an explanation of Programs can be found [below](#reference/advanced/programs) to provide context and insight into how [Values](#reference/advanced/values) function. The following endpoints can be used to manage Promotion Programs. 

### Create Promotion Program [POST /programs/promotions]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - Unique idempotent ID for the Program.
        + name (string, optional) - A human-readable name for the Program.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + access (enum[string], required) - How the values can be accessed
            + `contact` - must be associated with a Contact by ID.
            + `secureCode` - a code is generated or supplied and is stored securely.
            + `publicCode` - a code is generated or supplied and can be displayed.
        + discount (boolean, optional) - If true the Value will be noted as a discount for the Contact on checkout. Default is `true`. 
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated. Default is `true`.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + minInitialBalance (number, optional) - The minimum balance the Value can be created with.
        + maxInitialBalance (number, optional) - The maximum balance the Value can be created with.
        + fixedInitialBalances (array[number], optional) -  A list of exact balances the Value can be created with.
        + tags (array[string], optional) - Segmentation tags.
        + startDate (string, optional) - Earliest date that Values belonging to this Program can be active.
        + endDate (string, optional) - Latest date that Values belonging to this Program can be active.
        + metadata (object, optional) - Arbitrary data associated with the Program.
        
    + Body

            {
                "id": "spring-promotion-usd",
                "name": "Spring Promotion USD",
                "currency": "USD",
                "access": "secureCode",
                "preTax": true,
                "discount": true,
                "fixedInitialBalances": [
                    500
                ],
                "tags": ["promotion", "spring-promotion-usd"]
            }
    
+ Response 201 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "spring-promotion-usd",
                "name": "Spring Promotion USD",
                "type": "promotion",
                "currency": "USD",
                "access": "secureCode",
                "discount": "true",
                "preTax": "true",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": null,
                "maxInitialBalance": null,
                "fixedInitialBalances": [
                    500
                ],
                "uses": null,
                "tags": ["gift-card"],
                "metadata": null,
                "startDate": null,
                "endDate": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Get a Promotion Program [GET /programs/promotions/{id}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Promotion Program to get.

+ Response 200 (application/json)
    + Attributes (Program)

    + Body

                {
                    "id": "unique-id-123",
                    "name": "5% off promo program",
                    "currency": "CAD",
                    "access": "secureCode",
                    "discount": "true",
                    "preTax": "true",
                    "active": "true",
                    "redemptionRule": null,
                    "valueRule": "order*0.05",
                    "uses": null,
                    "tags": [],
                    "metadata": null,
                    "startDate": null,
                    "endDate": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }

### List Promotion Programs [GET /programs/promotions{?limit}{?offset}{?id}{?tags}{?currency}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + id (string, optional) - Filter by ID. Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (number, optional) - Filter by tag. Multiple values can be sent as a comma separated list in which case only one value must match.
    + currency (string, optional) - Filter by currency. Multiple values can be sent as a comma separated list in which case only one value must match.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Program])

    + Body

            [
                {
                    "id": "unique-id-123",
                    "name": "5% off promo program",
                    "currency": "CAD",
                    "access": "secureCode",
                    "discount": "true",
                    "preTax": "true",
                    "active": "true",
                    "redemptionRule": null,
                    "valueRule": "order*0.05",
                    "uses": null,
                    "tags": [],
                    "metadata": null,
                    "startDate": null,
                    "endDate": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]
### Update a Promotion Program [PATCH /programs/promotions/{id}]

+ Parameter
    + id (string) - the ID of the Promotion Program to modify.

+ Request (application/json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched. 
    Note that updating a Program does not automatically update the attributes of Values that have already been generated through it. Only new Values generated afterwards will reflect the changes. If you want existing Values to reflect your changes, you will need to update them in a separate step. 

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + name (string, optional) - A human-readable name for the Program.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + discount (boolean, optional) - If true the Value will be noted as a discount for the Contact on checkout. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        + minInitialBalance (number, optional) - The minimum balance the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + maxInitialBalance (number, optional) - The maximum balance the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + fixedInitialBalances (array[number], optional) -  A list of exact balances the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + tags (array[string], optional) - Segmentation tags.
        + startDate (string, optional) - Earliest date that Values belonging to this Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        + endDate (string, optional) - Latest date that Values belonging to this Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        + metadata (object, optional) - Arbitrary data associated with the Program.

    + Body

            {
                "tags": ["spring-marketing-push"]
            }
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "spring-promotion-usd",
                "name": "Spring Promotion USD",
                "type": "promotion",
                "currency": "USD",
                "access": "secureCode",
                "discount": "true",
                "preTax": "true",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": null,
                "maxInitialBalance": null,
                "fixedInitialBalances": [
                    500
                ],
                "uses": null,
                "tags": ["spring-marketing-push"]
                "metadata": null,
                "startDate": null,
                "endDate": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Delete a Promotion Program [DELETE /programs/promotions/{id}]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Promotion Program to delete.

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Promotion Program that is in use. If the Program is referenced by one or more Values, those objects would need to be deleted first. If a Value created through this Program is referenced by a Transaction, it cannot be deleted because Transactions cannot be deleted. Programs in use can still be updated. 

    + Body
    
            {
                "statusCode": 409,
                "message": "Program 'abc123' is in use.",
                "messageCode": "ProgramInUse"
            }
### Issue Promotions from a Program [POST /programs/promotions/{id}/issue]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - Program issuance request ID.  This ID is used to generate Promotion IDs and prevent duplicate requests from being processed.
        + count (number, required) - The number of Promotions to issue.
        + contacts (array[string], optional) - List of Contact IDs to apply the Promotion to directly.  The length of the list must match `count`.  One of `contacts`, `codes`, or `codeGeneration` must be specified.
        + codes (array[string], optional) - List of codes to use for each Promotion created.  The length of the list must match `count`.  One of `contacts`, `codes`, or `codeGeneration` must be specified.
        + codeGeneration (CodeGeneration, optional) - Settings for randomly generated codes. One of `contacts`, `codes`, or `codeGeneration` must be specified.
        + secureCodes (boolean, optional) - Codes are stored securely.  They will only be visible in the CSV file.
        + startDate (string, optional) - Override the Program's configured startDate.
        + endDate (string, optional) - Override the Program's configured endDate.
        
    + Body
    
            {
                "id": "summer-promo-2077",
                "count": 100,
                "codeGeneration": {
                    "length": 8,
                    "characters": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                    "prefix": "SUMMMER-"
                    "suffix": "-2077"
                },
                "secureCodes": true
            }
    
+ Response 201 (application/json)
    + Attributes
        + count (number, required) - The number of Promotions generated.
        + values (Value, optional) - A list of Promotions generated.  This list is only available if `count` < 1000.
        + csv (string, required) - A link to a CSV with details of the generated Promotions.  This CSV will always contain the full codes (if the Promotions were not attached directly to Contacts).

    + Body
    
            {
                "count" 100,
                "values": [
                    {
                        "id": "summer-promo-2077-1",
                        "type": "promotion"
                        "program": "summerpromo",
                        "currency": "USD",
                        "code": "…2077",
                        "balance": 500,
                        "active": true,
                        "frozen": false,
                        "canceled": false,
                        "preTax": false,
                        "redemptionRule": null,
                        "valueRule": null,
                        "uses": 1,
                        "startDate": "2077-07-01T00:00:00.000Z",
                        "endDate": "2077-10-01T00:00:00.000Z",
                        "tags": [],
                        "metadata": null,
                        "createdDate": "2018-04-17T23:20:08.404Z",
                        "updatedDate": "2018-04-17T23:20:08.404Z"
                    },
                    // ...
                ],
                "csv": "https://www.lightrail.com/csv/summer-promo-2077-b03b610c61aa4146.csv"
            }

# Group Codes

## Codes [/values/byCode]

A Code is not a type of Value but a means of accessing a Value.  Gift Cards and Promotions (which are types of Value) can both be referenced by a code.  

### Get a Value by code [GET /values/byCode/{code}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + code (string) - the code of the Value to get.

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "type": "giftCard",
                "program": "giftCards",
                "currency": "USD",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Update a Value by code [PATCH /values/byCode/{code}]

+ Parameter
    + code (string) - the code of the Value to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + canceled (boolean, optional) - If true the Value is canceled.  Once canceled the Value can never be uncanceled.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "frozen": true
            }
    
+ Response 200 (application/json)
    + Attributes (Value)

    + Body
    
            {
                "id": "vs-1",
                "type": "giftCard",
                "program": "giftCards",
                "currency": "USD",
                "balance": 2500, 
                "active": true,
                "frozen": true,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
            }
### Assign a Value to a Contact by code [POST /values/byCode/{code}/claim]

+ Request (application/json)
    Associates a Value with a contact so that it is automatically available to them in checkout.
    
     + Headers
     
             Authorization: Bearer <API_KEY>
 
     + Attributes
         + contact (string, required) - The ID of the Contact to claim the Value.
         
     + Body
     
             {
                 "contact": "unique-id-123"
             }

+ Parameter
    + code (string) - the code of the Value to claim.

+ Response 200 (application/json)
    
    The Value was claimed for the Contact.

    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "type": "giftCard",
                "program": "giftCards",
                "currency": "USD",
                "contact": "unique-id-123",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

+ Response 201 (application/json)
    
    A portion of the original Value was claimed and a new Value was created private to the Contact.

    + Attributes (Value)

    + Body

            {
                "id": "vs-1-claim-1",
                "type": "giftCard",
                "program": "giftCards",
                "currency": "USD",
                "contact": "unique-id-123",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": 1,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Change a Value's code by code [PUT /values/byCode/{code}/changeCode]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, required) - The code to set.  If there is an existing code it will no longer refer to this Value.
        + secure (boolean, optional) - If true the code is stored securely and only shown in abbreviated form.  If false or omitted the code will be shown in the web app and reports in plain text.
        
    + Body
    
            {
                "code": "c3d177ff950b4e2796e341f65976e1b1",
                "secure": true
            }

+ Parameter
    + code (string) - the code of the Value to change the code of.

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {
                "id": "unique-id-123",
                "name": "Gift Card program",
                "currency": "CAD",
                "code": "…e1b1"
                "access": "secureCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": null,
                "maxInitialBalance": null,
                "fixedInitialBalances": [
                    500,
                    1500,
                    2500
                ],
                "uses": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

# Group Transactions

## Transactions [/transactions]

### Checkout [POST /transactions/checkout]

The checkout endpoint is used to collect all payment for a purchase. It will debit funds from Lightrail and also charge credit cards through Stripe. Your Stripe account must be connected to Lightrail in order for Lightrail to make charges on your behalf. 

Lightrail and Stripe payment sources are referred to as the payment rails `lightrail` and `stripe` respectively. There is also an `internal` payment rail which can be used to represent any other payment source. This is intended a stop-gap solution to support transitioning from legacy systems.    

+ Request (application/json)
    
    Data used in example:
    - Purchasing: 
        - 2x $5 socks (8% tax rate)
        - 1x $1.99 chocolate bar  (5% tax rate)
        - 1x $3.49 shipping (0% tax rate)
    - Payment Sources:
        - Contact with prepaid account, and a sock and chocolate bar promotion.
            - Account has $20.
            - Sock promo is for 20% off retail price of socks.
            - Chocolate bar promo is a $0.50 credit towards the purchase of a chocolate bar.
        - Generic code for 10% off orders over $5 (does not apply to shipping). 
    
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + lineItems (array[LineItem])
        + sources (array[TransactionParty])
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all balance being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.
        
    + Body 
    
            {
                "id": "unique-id-123",
                "currency": "USD",
                "lineItems": [
                    {
                        "type": "product",
                        "productId": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2
                    },
                    {
                        "type": "product",
                        "productId": "pid_41234", 
                        "unitPrice": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar."
                    },
                    {
                        "type": "shipping",
                        "productId": "standard-shipping",
                        "unitPrice": 349,
                        "taxRate": 0
                    }
                ],
                "sources": [
                    {
                        "rail": "lightrail",
                        "contact": "alice-1234"
                    },
                    {
                        "rail": "lightrail",
                        "code": "SAVE10PERCENT"
                    }
                ]
            }
    
+ Response 201 (application/json)
    + Attributes (Transaction)

    + Body
    
            {
                "id": "unique-id-123",
                "transactionType": "order",
                "currency": "USD",
                "totals": {
                    "subtotal": 1548, 
                    "tax": 67,
                    "discount": 350,
                    "payable": 1265 
                },
                "lineItems": [
                    {
                        "type": "product",
                        "id": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2,
                        "valuesApplied": [
                            {
                                "id": "2018-alice-socks-promo",
                                "rule": "item.productId == "pid_12345'",
                                "ruleExplanation": "Socks 20% discount",
                                "amount": -200,
                                "preTax": true,
                                "discount": true
                            }, 
                            {
                                "id": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": -80,
                                "preTax": true,
                                "discount": true
                            }
                        ],
                        "lineTotal": {
                            "price": 1000,
                            "taxable": 720,
                            "tax": 58,
                            "discount": 280,
                            "payable": 778
                        }  
                    },
                    {
                        "type": "product",
                        "id": "pid_41234", 
                        "unitCost": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar.",
                        "valuesApplied": [
                            {
                                "rail": "lightrail",
                                "id": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": -20,
                                "preTax": true,
                                "discount": true
                            },
                            {
                                "rail": "lightrail",
                                "id": "2018-50cent-chocobar-credit",
                                "rule": "item.productId == "pid_41234",
                                "ruleExplanation": "50 cents towards chocolate bars.",
                                "amount": -50,
                                "preTax": false,
                                "discount": true
                            }
                        ],
                        "lineTotal": {
                            "price": 199,
                            "taxable": 179,
                            "tax": 9,
                            "discount": 70,
                            "payable": 138
                        }
                    },
                    {
                        "type": "shipping",
                        "id": "standard-shipping", 
                        "unitCost": 349,
                        "taxRate": 0, 
                        "valuesApplied": [
                            {
                                "id": "alice-account-USD",
                                "amount": -349,
                                "preTax": false,
                                "discount": false
                            }
                        ],
                        "lineTotal": {
                            "price": 349,
                            "taxable": 349,
                            "tax": 0,
                            "discount": 0,
                            "payable": 349
                        }
                    }
                ],
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "2018-alice-socks-promo",
                        "currency": "USD",
                        "contact": "alice-1234",
                        "amount": -200,
                        "balance": null,
                        "uses": {
                            "before": 1,
                            "after": 0,
                            "change": -1
                        }
                    },
                    {
                        "rail": "lightrail",
                        "id": "2018-10percent-off-over-5-orders",
                        "currency": "USD",
                        "code": "SAVE10PERCENT",
                        "amount": -100,
                        "balance": null,
                        "uses": null
                    },
                    {
                        "rail": "lightrail",
                        "id": "2018-50cent-chocobar-credit",
                        "currency": "USD",
                        "contact": "alice-1234",
                        "amount": -50,
                        "balance": {
                            "before": 50,
                            "after": 0,
                            "change": -50
                        },
                        "uses": null
                    },
                    {
                        "rail": "lightrail",
                        "id": "alice-account-USD",
                        "currency": "USD",
                        "contact": "alice-1234",
                        "amount": -1265,
                        "balance": {
                            "before": 2000,
                            "after": 735,
                            "change": -1265
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {}
            }

### Debit [POST /transactions/debit]

Debit (remove from) a payment source.  Currently only the `lightrail` rail is supported.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + source (TransactionParty, required) - The rail to debit.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to debit, > 0.
        + uses (number, optional) - The number of uses to remove.  Defaults to 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all balance being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "account": "points-account-14314"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }
    
+ Response 201 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "points-account-14314",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

### Credit [POST /transactions/credit]

Credit (add to) a payment destination.  Currently only the `lightrail` rail is supported.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + destination (TransactionParty, required) - The rail to credit.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to credit, > 0.
        + uses (number, optional) - The number of uses to add.  Defaults to 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "destination": {
                    "rail": "lightrail",
                    "account": "points-account-14314"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }
    
+ Response 201 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "credit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "points-account-14314",
                        "currency": "XXX",
                        "amount": 2500,
                        "balance": {
                            "before": 1500,
                            "after": 4000,
                            "change": 2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }

### Transfer [POST /transactions/transfer]

Transfer value between a payment source and a payment destination.  Currently only the `lightrail` rail is supported.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + source (TransactionParty, required) - The rail to take value from.  Only `lightrail` rails that refer to a specific Value are supported.
        + destination (TransactionParty, required) - The rail to send value to.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to transfer, > 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all balance being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "code": "62026c68ec5048dbb881"
                },
                "destination": {
                    "rail": "lightrail",
                    "id": "alice-account-USD"
                },
                "amount": 2500,
                "currency": "USD",
                "metadata": {
                    "reference": "frequent-shopper-bonus-072301"
                }
            }

+ Response 201 (application/json)
    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + transactionType (string, required) - `transfer`
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The remainder of balance that could not be debited.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - Date when the Transaction was created.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "transfer",
                "currency": "USD",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "giftCard-96f27ad62a1c",
                        "currency": "USD",
                        "amount": -2500,
                        "balance": {
                            "before": 2500,
                            "after": 0,
                            "change": -2500
                        },
                        "uses": null
                    },
                    {
                        "rail": "lightrail",
                        "id": "alice-account-USD",
                        "currency": "USD",
                        "amount": 2500,
                        "balance": {
                            "before": 5000,
                            "after": 7500,
                            "change": 2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "reference": "loyalty-bonus-072301"
                }
            }

### Get a Transaction [GET /transactions/{id}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the Transaction to get.

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

### List Transactions [GET /transactions{?limit}{?offset}{?transactionType}{?minCreatedDate}{?maxCreatedDate}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + transactionType (string, optional) - Filter by the transactionType.
    + minCreatedDate (string, optional) - Filter by the minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Transaction])

    + Body

            [
                {
                    "id": "unique-id-123",
                    "transactionType": "debit",
                    "currency": "XXX",
                    "steps": [
                        {
                            "rail": "lightrail",
                            "id": "vs_1",
                            "currency": "XXX",
                            "balanceBefore": 5500,
                            "balanceAfter": 3000,
                            "balanceChange": -2500
                        }
                    ],
                    "remainder": 0,
                    "simulated": false,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z",
                    "metadata": {
                        "note": "Reduce loyalty points after 3mo contact inactivity"
                    }
                }
            ]

### Capture Pending Transaction [POST /transactions/{id}/capture]

A pending Transaction is created when it is created with `pending = true`.  A pending Transaction will be automatically voided unless it is captured.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the pending Transaction to capture.

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "captured",
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

### Void Pending Transaction [POST /transactions/{id}/void]

A pending Transaction is created when it is created with `pending = true`.  A pending Transaction will be automatically voided but voiding it manually will release the funds sooner.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the ID of the pending Transaction to void.

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "void",
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

# Group Advanced

## Values [/values]

A Value (naturally) represents value in the Lightrail system.  It can be a Gift Card or a Promotion.  The type of Value is distinguished by the `type` member.

### List Values [GET /values{?limit}{?offset}{?id}{?tags}{?type}{?contact}{?program}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + id (number, optional) - Filter by ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (number, optional) - Filter by tag.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + type (string, optional) - Filter by Value type.
    + contact (string, optional) - Filter by Values attached to the given Contact ID.
    + program (string, optional) - Filter by Program ID.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Value])

    + Body

            [
                {
                    "id": "vs-1",
                    "type": "giftCard",
                    "program": "giftCards",
                    "currency": "USD",
                    "balance": 2500,
                    "active": true,
                    "frozen": false,
                    "canceled": false,
                    "preTax": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "tags": [],
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]

### Update Values [PATCH /values{?limit}{?id}{?tags}{?type}{?contact}{?program}]

Update all Values that match the given query parameters.
        
+ Parameter
    + limit (number, optional) - The max number of items to get.  This limits the number of items returned but not the number of items modified.
    + id (number, optional) - Filter by ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (number, optional) - Filter by tag.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + type (string, optional) - Filter by Value type.
    + contact (string, optional) - Filter by Values attached to the given Contact ID.
    + program (string, optional) - Filter by Program ID.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + canceled (boolean, optional) - If true the Value is canceled.  Once canceled the Value can never be uncanceled.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "frozen": true
            }
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 2
        
    + Attributes (array[Value])

    + Body

            [
                {
                    "id": "vs-1",
                    "type": "giftCard",
                    "program": "giftCards",
                    "currency": "USD",
                    "balance": 2500,
                    "active": true,
                    "frozen": true,
                    "canceled": false,
                    "preTax": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "tags": [],
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:58:19.036Z"
                },
                {
                    "id": "account-1",
                    "type": "account",
                    "program": null,
                    "currency": "USD",
                    "balance": 2500,
                    "active": true,
                    "frozen": true,
                    "canceled": false,
                    "preTax": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "tags": [],
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:58:19.036Z"
                }
            ]

## Programs [/programs]

Programs define the behaviour of Value that you wish to issue. Programs are typically created through the web app, but an explanation is included here for context and insight into how `Values` function.

Programs are most commonly used to define and organize Promotion campaigns. For example, the `Value` issued for a new user promotion that gives them a 5% discount on their first purchase should behave differently from the `Value` for a "TEN-DOLLAR-TUESDAYS" promotion. These different promotions will also need to be tracked and analyzed separately, all of which can happen in the web app.

Programs can also be used to control and organize gift card campaigns. Lightrail supplies you with a default gift card Program, but you can also choose to create more gift card Programs for custom use cases -- for example, so that B2B gift cards can be handled differently from gift cards that your customers purchase directly from your site.

### List Programs [GET /programs{?limit}{?offset}{?id}{?tags}{?currency}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + id (string, optional) - Filter by ID. Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (number, optional) - Filter by tag. Multiple values can be sent as a comma separated list in which case only one value must match.
    + currency (string, optional) - Filter by currency. Multiple values can be sent as a comma separated list in which case only one value must match.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Program])

    + Body

            [
                {
                    "id": "unique-id-123",
                    "name": "Gift Card program",
                    "currency": "CAD",
                    "access": "secureCode",
                    "discount": "false",
                    "preTax": "false",
                    "active": "true",
                    "redemptionRule": null,
                    "valueRule": null,
                    "minInitialBalance": null,
                    "maxInitialBalance": null,
                    "fixedInitialBalances": [
                        500,
                        1500,
                        2500
                    ],
                    "uses": null,
                    "tags": [],
                    "metadata": null,
                    "startDate": null,
                    "endDate": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]

## Currencies [/currencies]

A Currency is a unit of money in Lightrail.  It can be a standard currency such as `USD`, or a made up currency such as `FUNBUX`.  All currencies must be created before they are used, though they are typically created on initial setup in the web app.

### Create a Currency [POST /currencies]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + code (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + name (string, required) - Long name for the currency, eg: `Dollars`.
        + symbol (number, required) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, required) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

    + Body

            {
                "code": "USD",
                "name": "Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
    
+ Response 201 (application/json)
    + Attributes (Currency)

    + Body
            
            {
                "code": "USD",
                "name": "Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
### Get a Currency [GET /currencies/{code}]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + code (string) - the code of the Currency to get.

+ Response 200 (application/json)
    + Attributes (Currency)

    + Body

            {
                "code": "USD",
                "name": "Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }

### List Currencies [GET /currencies]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (array[Currency])

    + Body

            [
                {
                    "code": "USD",
                    "name": "Dollars",
                    "symbol": "$",
                    "decimalPlaces": 2
                }
            ]
### Update a Currency [PATCH /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. If present must match the code in the path.
        + name (string, optional) - Long name for the currency, eg: `Dollars`.
        + symbol (string, optional) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, optional) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.
        
    + Body
    
            {
                "name": "Zimbabwe Dollars",
                "symbol": "Z$"
            }
    
+ Response 200 (application/json)
    + Attributes (Currency)

    + Body
    
            {
                "code": "ZWD",
                "name": "Zimbabwe Dollars",
                "symbol": "Z$",
                "decimalPlaces": 2
            }
### Delete a Currency [DELETE /currencies/{code}]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + code (string) - the code of the Currency to delete.

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Currency that is in use.  If the Currency is referenced a Value or Program those objects would need to be deleted first.  If the Currency is referenced by a Transaction it cannot be deleted because Transactions cannot be deleted.  Currencies in use can still be updated.

    + Body
    
            {
                "statusCode": 409,
                "message": "Currency 'USD' is in use.",
                "messageCode": "CurrencyInUse"
            }

# Data Structures

## CodeGeneration (object)
+ length (number, required) - The number of random characters in the code.  This number must be at least 5 to accommodate a reasonable amount of randomness.
+ characters (string, optional) - The set of characters to use for the random part of the code.  Defaults to all numbers and upper case letters.
+ prefix (string, optional) - Text prepended in front the random characters in the code.
+ suffix (string, optional) - Text appended after the random characters in the code.

## Currency (object)
+ code (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ name (number, required) - Long name for the currency, eg: `Dollars`.
+ symbol (number, required) - Currency symbol used for formatting, eg: `$`.
+ decimalPlaces (number, required) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

## Contact (object)
+ id (string, required) - Unique idempotent ID for the Contact.
+ firstName (string, optional) - The Contact's first name.
+ lastName (string, optional) - The Contact's last name.
+ email (string, optional) - The Contact's email.
+ tags (array[string], optional) - Segmentation tags.
+ metadata (object, optional) - Arbitrary data associated with the Contact.
+ createdDate (string, required) - Date when the Contact was created.
+ updatedDate (string, required) - Date when the Contact was last updated.

## LineItem (object)
+ type (string, required) - Must be either `product`, `shipping` or `fee`.
+ productId (string, optional) -  The ID of the product.
+ variantId (string, optional) - The variant ID of a product. (Can be used to store SKU.)
+ unitPrice (number, required) -  The unit price of the item.
+ quantity (number, optional) -  The number of items. Defaults to 1 if not provided.
+ taxRate (number, optional) - Tax rate for the item. This is needed when a transaction contains items that have different tax rates.
+ tags (array[string], optional) - A list of tags associated with the item. For example, 'seasonal' or 'clothing'.
+ metadata (object, optional) - Any additional data you want to store for the item.

## LineItemResponse (LineItem)
+ valuesApplied (array[LineItemPromotions])
+ lineTotal (LineTotal)

## LineItemPromotions (object)
+ id (string) - Unique idempotent ID of the Value.
+ redemptionRule (string) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ ruleExplanation (string) - An explanation for the `redemptionRule` does that can be used to display to the contact.
+ amount (number) - The value of the discount.
+ preTax (boolean) - If true the Value's balance is applied on checkout before tax is calculated.

## LineTotal (object)
+ price (number) - The total cost of the items. ie `unitPrice * quantity`.
+ taxable (number) - The taxable amount. ie `price - preTaxDiscount`.
+ tax (number) - The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding'.
+ discount (number) - The discount
+ payable (number) - The cost of the line item after tax and discounts have been applied.

## Program (object)
+ id (string, required) - Unique idempotent ID for the Program.
+ name (string, optional) - A human-readable name for the Program.
+ type (enum[string], required) - Must be either `promotion`, `giftCard`, or `account`.
+ currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ access (enum[string], required) - How the values can be accessed.
    + `contact` - must be associated with a contact.
    + `secureCode` - a code is generated or supplied and is stored securely.
    + `publicCode` - a code is generated or supplied and can be displayed.
+ discount (boolean, required) - If true the Value will be noted as a discount for the Contact on checkout.
+ preTax (boolean, required) - If true the Value's balance is applied on checkout before tax is calculated.
+ active (boolean, optional) - Whether the Value is active and can be used upon creation.
+ redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
+ minInitialBalance (number, optional) - 
+ maxInitialBalance (number, optional) - 
+ fixedInitialBalances (array[number], optional) - A list of exact balances the Value can be created with.
+ uses (number, optional) - If set the number of uses the Value will be created with.  Set `null` or omit for infinite uses.
+ tags (array[string], optional) - Segmentation tags.
+ startDate (string, optional) - Earliest date that Values belonging to this Program can be active.
+ endDate (string, optional) - Latest date that Values belonging to this Program can be active.
+ createdDate (string, required) - Date when the Program was created.
+ updatedDate (string, required) - Date when the Program was last updated.
+ metadata (object, optional) - Arbitrary data associated with the Program.

## Rule (object)
+ rule (string, required) - the Lightrail Rule text of the rule.
+ explanation (string, required) - a plain explanation of the rule seen by contacts.

## Transaction (object)
+ id (string, required) - Unique idempotent ID for the Transaction.
+ transactionType (string, required) - The type of the transaction, eg: `debit`, `credit`, `checkout`...
+ currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ steps (array[TransactionStep], required) - An array of transaction steps.
+ remainder (number, required) - The remainder of balance that could not be debited.
+ simulated (boolean, optional) - True if the transaction was simulated.
+ pending (enum[string], optional) - The pending status.  Only set if the Transaction was created with `pending` set to `true`.
    + `pending` - created pending and unresolved.
    + `captured` - created pending and captured.  The Transaction is final.
    + `void` - created pending and voided.  The Transaction was unrolled and all funds released back to their sources.
+ createdDate (string, required) - Date when the Transaction was created.
+ updatedDate (string, required) - Date when the Contact was last updated.
+ metadata (object, optional) - Arbitrary data associated with the Transaction.

## TransactionParty (object)
+ rail (string, required) - The payment rail. Must belong to [`lightrail`, `stripe`, `internal`]. Must be used in combination with one of the following identifiers.
+ code (string, optional) - `lightrail`: the code of a Gift Card or Promotion.
+ contact (string, optional) - `lightrail`: a Contact's ID.  This is shorthand for all Values that a Contact is associated with.
+ promotion (string, optional) - `lightrail`: a Promotion's ID.
+ giftCard (string, optional) - `lightrail`: a Gift Card's ID.
+ value (string, optional) - `lightrail`: a Value's ID.
+ token (string, optional) - `stripe`: a tokenized credit card for Stripe.  
+ id (string, optional) - `internal`: the ID of the internal value.
+ balance (number, optional) - `internal`: the amount of internal value stored.
+ beforeLightrail (boolean, optional) - `internal`: if true this value is applied before Lightrail Values, otherwise it will be applied after.

## TransactionStep (object)
A step taken as part of the transaction.
+ rail (string, required) - Indicates the payment rail. Must be either `lightrail`, `stripe` or `internal`.

## LightrailTransactionStep (TransactionStep)
+ rail (string, required) - `lightrail`
+ id (string, required) - The id of the Value transacted with.
+ currency (string, required) - The currency of the Value transacted with.
+ contact (string, optional) - The ID of the Contact associated with the Value.
+ code (string, optional) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`..
+ amount (number, required) - The amount contributed to the Transaction.  This number will be the same as `balance.change` in Values with a balance.
+ balance (Delta, optional) - The balance before, after and net change of Value that carries a balance.  `null` when the Value does not have a balance (and thus has a valueRule).
+ uses (Delta, optional) - The number of uses remaining before, after and net change of a Value that limits the nummber of uses.  `null` when the Value does not limit number of uses. 

## StripeTransactionStep (TransactionStep)
+ rail (string, required) - `stripe`
+ amount (number, required) - the amount of the charge.
+ chargeId (string, optional) - the ID of the Stripe charge, if applicable.
+ charge (object, optional) - the Stripe Charge object, if applicable.

## InternalTransactionStep (TransactionStep)
+ rail (string, required) - `internal`
+ id (string, required) - the ID of the internal value transacted with.
+ balance (Delta, optional) - The balance before, after and net change of the internal value.

## Delta (object)
+ before (number, required) - the balance/uses before the transaction.
+ after (number, required) - the balance/uses after the transaction.
+ change (number, required) - the balance/uses change in the transaction.

## Value (object)
+ id (string, required) - Unique idempotent ID of the Value.
+ type (string, required) - `account`, `giftCard` or `promotion`
+ program (string, optional) - The ID of the Program this Value is in.
+ currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ contact (string, optional) - The ID of the Contact that has claimed this Value.
+ code (string, optional) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`.
+ balance (number, optional) - The amount of money available in a Value.  This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
+ discount (boolean, optional) - If true the Value will be noted as a discount for the Contact on checkout.
+ active (boolean, required) - Whether the Value is active and can be used upon creation.
+ frozen (boolean, required) - If true the Value is frozen and cannot be transacted with.
+ canceled (boolean, required) - If true the Value is canceled.  Once canceled the Value can never be uncanceled.
+ preTax (boolean, required) - If true the Value's balance is applied on checkout before tax is calculated.
+ redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
+ uses (number, optional) - The number of times the Value can be used.  When this number reaches 0 the Value is expired.
+ startDate (string, optional) - Date when the Value becomes available.
+ endDate (string, optional) - Date when the Value expires.
+ tags (array[string], required) - Segmentation tags.
+ metadata (object, optional) - Arbitrary data associated with the Value.
+ createdDate (string, required) - Date when the Contact was created.
+ updatedDate (string, required) - Date when the Contact was last updated.