FORMAT: 1A
HOST: https://api.lightrail.com/v2/

# Lightrail Documentation

Welcome to Lightrail V2. Lightrail makes it easy to create gift cards, manage customer account credit, run promotional discount programs, and collect payment all in one unified checkout solution.

## Authentication
Authentication is done via an authorization header. You can retrieve your Lightrail API key [here](https://www.lightrail.com).

In requests to Lightrail you must include the following header:
```
Authorization: Bearer <API_KEY>
```

## Dates

All dates are sent and received in 8601 format.

```text
YYYY-MM-DDTHH:MM:SSZ
```

## Filtering

Resources that may contain lots of entries ([Contacts](#reference/0/contacts/list-contacts), [Values](#reference/0/values/list-values), [Programs](#reference/0/programs/list-programs)) have powerful filters for retrieving a subset of the entries.

Some properties such as `id` and `tag` can be filtered with a comma separated list in which case one of the values in the list must match.  For example `https://api.lightrail.com/v2/contacts?tags=gold,silver` searches for [Contacts](#reference/0/contacts/list-contacts) tagged `gold` **or** `silver`. 

Some properties support operators for more powerful filtering than matching an exact value.  The operator is specified after the property and a dot.  For example `https://api.lightrail.com/v2/values?currency=USD&balance.gte=1000` searches for [Values](#reference/0/values/list-values) in the `USD` `currency` with a `balance` greater than or equal to $10.  In another example `https://api.lightrail.com/v2/contacts?email.like=%@gmail.com` searches for [Contacts](#reference/0/contacts/list-contacts) whose email address is "like" `%@gmail.com` where `%` acts as a wild card (ie: ends with @gmail.com).

| operator | description |
|----------|-------------|
| lt       | Less than (&lt;). |
| lte      | Less than or equal to (&lt;=). |
| gt       | Greater than (&gt;). |
| gte      | Greater than or equal to (&gt;=). |
| eq       | Equal to (=).  This is the default where no operator is specified. |
| ne       | Not equal to (!=). |
| like     | Equal to with wildcard support.  Percent signs (%) in the value are wild.  This operator is only supported on string properties. |

## Paging

Resources that may contain lots of entries ([Contacts](#reference/0/contacts/list-contacts), [Values](#reference/0/values/list-values), [Programs](#reference/0/programs/list-programs)) may not return all results in a single response.  Instead they return a number of results limited by the `limit` query parameter.

Retrieving results after the first page means following links in the [Link header](https://tools.ietf.org/html/rfc5988).  Here's an example Link header...

```text
(all line-breaks are inserted here for clarity and don't exist in production)

Link:
  <https://api/lightrail.com/v2/contacts?limit=100>;
    rel="first",
  <https://api/lightrail.com/v2/contacts?limit=100&before=eyJpZCI6ImplZmYgaXMgYXdlc29tZSJ9>;
    rel="prev",
  <https://api/lightrail.com/v2/contacts?limit=100&next=eyJpZCI6ImplbiBpcyBhd2Vzb21lIHRvbyJ9>;
    rel="next",
  <https://api/lightrail.com/v2/contacts?limit=100&last=true>;
    rel="last"
```

This example has links to the first page, the previous page, the next page, and the last page.  When already at the first page there will only be links to the next and last.  When already at the first page there will only be links to the first and prev.  If there are no results to page though or only 1 page there will not be any links.

It's important to follow the links in the Link header and not construct the URLs on your own.

## Errors

Lightrail uses the following HTTP status codes to indicate an error:

| code | meaning |
|------|---------|
| 400  | The request could not be understood.  eg: JSON body could not be parsed. |
| 401  | Authentication missing. |
| 403  | The operation is not allowed for the given authentication. |
| 404  | The resource was not found.  eg: There is no Contact for the given ID. |
| 409  | The operation could not be performed because of the state of the system.  eg: There is not enough balance for a Transaction to complete. |
| 422  | The request was understood but has a logical problem.  eg: Attempting to credit a negative amount. |
| 429  | Too many requests in a given amount of time. |
| 500  | Internal server error.  Please [contact us](mailto:hello@lightrail.com) with details of your request and we'll look into it. |

Lightrail errors contain a JSON body with the following properties:

| property    | always present | purpose |
|-------------|----------------|---------|
| message     | yes            | English explanation of the error.  This is for display purposes only as the explanation may change between system updates for clarity. |
| statusCode  | yes            | The HTTP status code. |
| messageCode | no             | A constant corresponding to the message.  This can be used to take action in response to the error. |

An example:

```json
{
    "message": "Insufficient value for the transaction.",
    "statusCode": 409,
    "messageCode": "InsufficientValue"
}
```

## Support
[Contact us](mailto:hello@lightrail.com) any time if you have any questions.  We're here to help.

## Contacts [/contacts/]

Contacts are the people or businesses who buy products or services from you.  They're identified by a unique `id`, which typically corresponds to an existing identifier in your system.

Values can be [attached](#reference/0/contacts/attach-a-contact-to-a-value) to Contacts.  All (applicable) Value attached to a Contact will be used in a [checkout Transaction](#reference/0/transactions/checkout) simply by specifying the Contact checking out.

### Create a Contact [POST /contacts]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - ID for the Contact.  This ID is a value you choose to represent the resource.  Two resources can't have the same ID, guaranteeing repeated calls won't create extra resources.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Contact.

    + Body

            {
                "id": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                }
            }
    
+ Response 201 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",'
                "tags": [],
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z"
            }
### Get a Contact [GET /contacts/{id}]

+ Parameter
    + id (string) - the ID of the Contact to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Contact)

    + Body

            {
                "id": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "tags": [],
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z"
            }

### List Contacts [GET /contacts{?limit}{?id}{?tags}{?firstName}{?lastName}{?email}]
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + id (string, optional) - Filter by ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (string, optional) - Filter by tag.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + firstName (string, optional) - Filter by the firstName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.
    + lastName (string, optional) - Filter by the lastName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.
    + email (string, optional) - Filter by email.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"

    + Attributes (array[Contact])

    + Body

            [
                {
                    "id": "unique-id-123",
                    "firstName": "Jeffrey",
                    "lastName": "Lebowski",
                    "email": "thedude@example.com",
                    "tags": [],
                    "metadata": {
                        "alias": "El Duderino"
                    },
                    "createdDate": "2018-04-17T23:20:08.000Z",
                    "updatedDate": "2018-04-17T23:20:08.000Z"
                }
            ]
### Update a Contact [PATCH /contacts/{id}]
            
+ Parameter
    + id (string) - the ID of the Contact to update.

+ Request (application/json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, optional) - ID for the Contact.  If present must match the ID in the path.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Contact.

    + Body

            {
                "metadata": {
                    "alias": "El Duderino"
                }
            }
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "tags": [],
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
            }
### Delete a Contact [DELETE /contacts/{id}]

+ Parameter
    + id (string) - the ID of the Contact to delete.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Contact that is associated with one or more Values. Values that are associated with the Contact would need to be deleted first. 

    + Body

            {
                "statusCode": 409,
                "message": "Contact 'unique-id-123' is in use",
                "messageCode": "ContactInUse"
            }

### List a Contact's Values [GET /contacts/{id}/values{?limit}{?programId}{?currency}{?balance}{?uses}{?discount}{?active}{?frozen}{?canceled}{?preTax}{?startDate}{?endDate}{?createdDate}{?updatedDate}{?tags}]

+ Parameter
    + limit (number, optional) - The max number of items to get.
    + programId (string, optional) - Filter by Program ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + currency (string, optional) - Filter by currency.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + balance (number, optional) - Filter by balance.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + uses (number, optional) - Filter by number of uses remaining.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + discount (boolean, optional) - Filter by discount.
    + active (boolean, optional) - Filter active/inactive.
    + frozen (boolean, optional) - Filter frozen/unfrozen.
    + canceled (boolean, optional) - Filter canceled.
    + preTax (boolean, optional) - 
    + startDate (string, optional) - Filter by startDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + tags (string, optional) - Filter by tag.  Multiple values can be sent as a comma separated list in which case only one value must match.

+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers

            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"

    + Attributes (array[Value])

    + Body

            [
                {
                    "id": "vs-1",
                    "programId": "giftCards",
                    "currency": "USD",
                    "contactId": "unique-id-123",
                    "balance": 2500,
                    "preTax": false,
                    "active": true,
                    "frozen": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.000Z",
                    "updatedDate": "2018-04-17T23:20:08.000Z"
                }
            ]
### Attach a Contact to a Value [POST /contacts/{id}/values/attach]

+ Parameter
    + id (string) - the ID of the Contact to attach Value to.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + valueId (string, optional) - The `id` of the Value to attach to the Contact.  One of `valueId` or `code` must be specified.
        + code (string, optional) - The `code` of the Value to attach to the Contact.  One of `valueId` or `code` must be specified.

    + Body

            {
                "code": "920cb077a0f1a7db"
            }
    
+ Response 200 (application/json)
    + Attributes (Value)

    + Body
            
            {
                "id": "giftcard-456",
                "programId": "giftcards",
                "currency": "USD",
                "contactId": "unique-id-123",
                "balance": 2500,
                "uses": null,
                "discount": false,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-05-06T13:02:12.000Z"
            }

## Values [/values]

A Value (naturally) represents value in the Lightrail system.  This includes a gift card, a promotion, a coupon, store credit, etc.  Values can be created one at a time but are most often [issued](#reference/0/issuing-value/issue-values) from a Program.  Issuing Value from a Program makes it part of that Program which keeps different ways of using Value organized.
 
Most Values will be accessed by a code, or attached to a [Contact](#reference/0/contacts).

### Create a Promotion [POST /values/promotions]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - ID of the Value.  This ID is a value you choose to represent the resource.  Two resources can't have the same ID, guaranteeing repeated calls won't create extra resources.
        + programId (string, optional) - Create as part of a Program and copy default properties from it.
        + contactId (string, optional) - 
        + code (string, optional) - Assign a code.  Cannot be set with `contact`.
        + currency (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. Required if `program` is not set.
        + balance (number, optional) - The amount of money available in a Value.  This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + uses (number, optional) - The number of times the Value can be used.  When this number reaches 0 the Value is expired.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "id": "vs-1",
                "programId": "springpromo",
                "currency": "USD",
                "balance": 2500
            }
    
+ Response 201 (application/json)
    + Attributes (Value)

    + Body
    
            {
                "id": "vs-1",
                "type": "promotion"
                "programId": "springpromo",
                "currency": "USD",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z"
            }
### Get a Value [GET /values/{id}]

+ Parameter
    + id (string) - the ID of the Value to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "programId": "springpromo",
                "currency": "USD",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z"
            }

### List Values [GET /values{?limit}{?programId}{?currency}{?contactId}{?balance}{?uses}{?discount}{?active}{?frozen}{?canceled}{?preTax}{?startDate}{?endDate}{?createdDate}{?updatedDate}{?tags}]
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + programId (string, optional) - Filter by Program ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + currency (string, optional) - Filter by currency.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + contactId (string, optional) - Filter by Values attached to the given Contact ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + balance (number, optional) - Filter by balance.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + uses (number, optional) - Filter by number of uses remaining.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + discount (boolean, optional) - Filter by discount.
    + active (boolean, optional) - Filter active/inactive.
    + frozen (boolean, optional) - Filter frozen/unfrozen.
    + canceled (boolean, optional) - Filter canceled.
    + preTax (boolean, optional) - 
    + startDate (string, optional) - Filter by startDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + tags (string, optional) - Filter by tag.  Multiple values can be sent as a comma separated list in which case only one value must match.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Value])

    + Body

            [
                {
                    "id": "vs-1",
                    "type": "giftCard",
                    "programId": "giftCards",
                    "currency": "USD",
                    "balance": 2500,
                    "active": true,
                    "frozen": false,
                    "canceled": false,
                    "preTax": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "tags": [],
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.000Z",
                    "updatedDate": "2018-04-17T23:20:08.000Z"
                }
            ]
### Update a Value [PATCH /values/{id}]

+ Parameter
    + id (string) - the ID of the Value to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + canceled (boolean, optional) - If true the Value is canceled.  Once canceled the Value can never be uncanceled.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "frozen": true
            }
    
+ Response 200 (application/json)
    + Attributes (Value)

    + Body
    
            {
                "id": "vs-1",
                "programId": "springpromo",
                "currency": "USD",
                "balance": 2500, 
                "active": true,
                "frozen": true,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
            }

### Update Values [PATCH /values{?id}{?programId}{?currency}{?contactId}{?balance}{?uses}{?discount}{?active}{?frozen}{?canceled}{?preTax}{?startDate}{?endDate}{?createdDate}{?updatedDate}{?tags}]]

Bulk update all Values that match the given query parameters.
        
+ Parameter
    + id (string, optional) - Filter by ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + programId (string, optional) - Filter by Program ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + currency (string, optional) - Filter by currency.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + contactId (string, optional) - Filter by Values attached to the given Contact ID.  Multiple values can be sent as a comma separated list in which case only one value must match.
    + balance (number, optional) - Filter by balance.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + uses (number, optional) - Filter by number of uses remaining.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + discount (boolean, optional) - Filter by discount.
    + active (boolean, optional) - Filter active/inactive.
    + frozen (boolean, optional) - Filter frozen/unfrozen.
    + canceled (boolean, optional) - Filter canceled.
    + preTax (boolean, optional) - 
    + startDate (string, optional) - Filter by startDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + tags (string, optional) - Filter by tag.  Multiple values can be sent as a comma separated list in which case only one value must match.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + canceled (boolean, optional) - If true the Value is canceled.  Once canceled the Value can never be uncanceled.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "frozen": true
            }
    
+ Response 200 (application/json)
    + Headers
        
    + Attributes
        + count (number) - The number of Values updated.

    + Body

            {
                "count": 23
            }
### Delete a Value [DELETE /values/{id}]

+ Parameter
    + id (string) - the ID of the Value to delete.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Value that has been used in a Transaction.

    + Body
    
            {
                "statusCode": 409,
                "message": "Value 'abc123' is in use.",
                "messageCode": "ValueInUse"
            }
### Change a Value's code [POST /values/{id}/changeCode]

+ Parameter
    + id (string) - the ID of the Value to change the code of.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, required) - The code to set.  If there is an existing code it will no longer refer to this Value.
        + secure (boolean, optional) - If true the code is stored securely and only shown in abbreviated form.  If false or omitted the code will be shown in the web app and reports in plain text.
        
    + Body
    
            {
                "code": "SPRINGPROMO2077"
            }

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "type": "promotion"
                "programId": "springpromo",
                "currency": "USD",
                "code": "SPRINGPROMO2077",
                "balance": 2500,
                "active": true,
                "frozen": false,
                "canceled": false,
                "preTax": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z"
            }

## Programs [/programs]

Programs organize [Values](#reference/0/values) and Values can be [issued](#reference/0/issuing-value) from Programs. They are typically created through the web app.

Programs are most commonly used to define and organize promotion campaigns. For example, the Value issued for a new user promotion that gives them a 5% discount on their first purchase should behave differently from the Value for a "TEN-DOLLAR-TUESDAYS" promotion. These different promotions will also need to be tracked and analyzed separately, all of which can happen in the web app.

### Create Program [POST /programs]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - ID for the Program.  This ID is a value you choose to represent the resource.  Two resources can't have the same ID, guaranteeing repeated calls won't create extra resources.
        + name (string, optional) - A human-readable name for the Program.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + discount (boolean, optional) - If true the Value will be noted as a discount for the Contact on checkout. Default is `true`. 
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated. Default is `true`.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
        + valueRule (Rule, optional) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
        + minInitialBalance (number, optional) - The minimum balance the Value can be created with.
        + maxInitialBalance (number, optional) - The maximum balance the Value can be created with.
        + fixedInitialBalances (array[number], optional) -  A list of exact balances the Value can be created with.
        + fixedInitialUses (array[number], optional) -  A list of exact uses the Value can be created with.
        + tags (array[string], optional) - Segmentation tags.
        + startDate (string, optional) - Earliest date that Values belonging to this Program can be active.
        + endDate (string, optional) - Latest date that Values belonging to this Program can be active.
        + metadata (object, optional) - Arbitrary data associated with the Program.
        
    + Body

            {
                "id": "spring-promotion-usd",
                "name": "Spring Promotion USD",
                "currency": "USD",
                "preTax": true,
                "discount": true,
                "fixedInitialBalances": [
                    500
                ],
                "tags": ["promotion", "spring-promotion-usd"]
            }
    
+ Response 201 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "spring-promotion-usd",
                "name": "Spring Promotion USD",
                "type": "promotion",
                "currency": "USD",
                "access": "secureCode",
                "discount": "true",
                "preTax": "true",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": null,
                "maxInitialBalance": null,
                "fixedInitialBalances": [
                    500
                ],
                "fixedInitialUses": null,
                "tags": ["gift-card"],
                "metadata": null,
                "startDate": null,
                "endDate": null,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z"
            }
### Get a Program [GET /programs/promotions/{id}]

+ Parameter
    + id (string) - the ID of the Program to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Program)

    + Body

                {
                    "id": "unique-id-123",
                    "name": "5% off promo program",
                    "currency": "CAD",
                    "discount": "true",
                    "preTax": "true",
                    "active": "true",
                    "redemptionRule": null,
                    "valueRule": "order*0.05",
                    "minInitialBalance": null,
                    "maxInitialBalance": null,
                    "fixedInitialBalances": null,
                    "fixedInitialUses": null,
                    "tags": [],
                    "metadata": null,
                    "startDate": null,
                    "endDate": null,
                    "createdDate": "2018-04-17T23:20:08.000Z",
                    "updatedDate": "2018-04-17T23:20:08.000Z"
                }

### List Programs [GET /programs{?limit}{?id}{?name}{?preTax}{?currency}{?tags}{?startDate}{?endDate}{?createdDate}{?updatedDate}]
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + id (string, optional) - Filter by ID. Multiple values can be sent as a comma separated list in which case only one value must match.
    + currency (string, optional) - Filter by currency. Multiple values can be sent as a comma separated list in which case only one value must match.
    + tags (string, optional) - Filter by tag. Multiple values can be sent as a comma separated list in which case only one value must match.
    + startDate (string, optional) - Filter by startDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Program])

    + Body

            [
                {
                    "id": "unique-id-123",
                    "name": "Gift Card program",
                    "currency": "CAD",
                    "discount": "false",
                    "preTax": "false",
                    "active": "true",
                    "redemptionRule": null,
                    "valueRule": null,
                    "minInitialBalance": null,
                    "maxInitialBalance": null,
                    "fixedInitialBalances": [
                        500,
                        1500,
                        2500
                    ],
                    "fixedInitialUses": null,
                    "tags": [],
                    "metadata": null,
                    "startDate": null,
                    "endDate": null,
                    "createdDate": "2018-04-17T23:20:08.000Z",
                    "updatedDate": "2018-04-17T23:20:08.000Z"
                }
            ]
### Update a Program [PATCH /programs/{id}]

+ Parameter
    + id (string) - the ID of the Program to modify.

+ Request (application/json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched. 
    Note that updating a Program does not automatically update the attributes of Values that have already been generated through it. Only new Values generated afterwards will reflect the changes. If you want existing Values to reflect your changes, you will need to update them in a separate step. 

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + name (string, optional) - A human-readable name for the Program.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + discount (boolean, optional) - If true the Value will be noted as a discount for the Contact on checkout. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        + preTax (boolean, optional) - If true the Value's balance is applied on checkout before tax is calculated. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        + minInitialBalance (number, optional) - The minimum balance the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + maxInitialBalance (number, optional) - The maximum balance the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + fixedInitialBalances (array[number], optional) -  A list of exact balances the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + fixedInitialUses (array[number], optional) -  A list of exact uses the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + tags (array[string], optional) - Segmentation tags.
        + startDate (string, optional) - Earliest date that Values belonging to this Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        + endDate (string, optional) - Latest date that Values belonging to this Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        + metadata (object, optional) - Arbitrary data associated with the Program.

    + Body

            {
                "tags": ["spring-marketing-push"]
            }
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "id": "spring-promotion-usd",
                "name": "Spring Promotion USD",
                "type": "promotion",
                "currency": "USD",
                "access": "secureCode",
                "discount": "true",
                "preTax": "true",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": null,
                "maxInitialBalance": null,
                "fixedInitialBalances": [
                    500
                ],
                "fixedInitialUses": null,
                "tags": ["spring-marketing-push"]
                "metadata": null,
                "startDate": null,
                "endDate": null,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z"
            }
### Delete a Program [DELETE /programs/{id}]

+ Parameter
    + id (string) - the ID of the Promotion Program to delete.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Promotion Program that is in use. If the Program is referenced by one or more Values, those objects would need to be deleted first. If a Value created through this Program is referenced by a Transaction, it cannot be deleted because Transactions cannot be deleted. Programs in use can still be updated. 

    + Body
    
            {
                "statusCode": 409,
                "message": "Program 'abc123' is in use.",
                "messageCode": "ProgramInUse"
            }

## Issuing Value [/programs/{id}/issuances]

[Value](#reference/0/values) is usually created by issuing it from a Program in the web app.  Each block of Values issued at once is tracked as an Issuance.  Issuances are tracked for downloading secured codes after creation.

### Issue Values [POST /programs/{id}/issuances]

+ Parameter
    + id (string) - the ID of the Program to issue Value from.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - ID for the Issuance.  This ID is a value you choose to represent the resource.  Two resources can't have the same ID, guaranteeing repeated calls won't create extra resources.
        + count (number, required) - The numbers of Values to issue.
        + code (string, optional) - The code to set on the Value.  The code will not be secured.  This is only available when `count` is 1.
        + codeGeneration (CodeGeneration, optional) - Defines how codes are generated.  Each code generated will be stored securely.  Required if `code` is not set.
        + balance (number, optional) - The balance to set on each Value.  This can be constrained by the Program's `minInitialBalance` and `maxInitialBalance` or must be in the `fixedInitialBalances` array.
        + uses (number, optional) - The uses to set on each Value.  
        + startDate (string, optional) - Override the Program's startDate for the Value.
        + endDate (string, optional) - Override the Program's endDate for the Value.
        + tags (array[string], optional) - Segmentation tags.  These are applied to each Value.
        
    + Body
    
            {
                "id": "printer-block-21",
                "count": 200,
                "codeGeneration": {
                    "length": 12
                },
                "balance": 5000
            }
    
+ Response 201 (application/json)
    + Attributes (Issuance)

    + Body
    
            {
                "id": "printer-block-21",
                "count": 200,
                "csv": "<URL to download CSV from>",
                "createdDate": "2018-04-17T23:20:08.000Z"
            }
### Get an Issuance [GET /programs/{programId}/issuances/{id}]

+ Parameter
    + id (string) - the ID of the Issuance to get.
    + programId (string) - the ID of the Program of the Issuance.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Issuance)

    + Body

            {
                "id": "printer-block-21",
                "count": 200,
                "csv": "<URL to download CSV from>",
                "createdDate": "2018-04-17T23:20:08.000Z"
            }

### List Issuances [GET /programs/{id}/issuances]

+ Parameter
    + id (string) - the ID of the Program to get Issuances from.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
            
    + Attributes (array[Issuance])

    + Body
    
            [
                {
                    "id": "printer-block-21",
                    "count": 200,
                    "csv": "<URL to download CSV from>",
                    "createdDate": "2018-04-17T23:20:08.000Z"
                }
            ]

## Transactions [/transactions]

### Checkout [POST /transactions/checkout]

The checkout endpoint is used to collect all payment for a purchase. It will debit funds from Lightrail and also charge credit cards through Stripe. Your Stripe account must be connected to Lightrail in order for Lightrail to make charges on your behalf. 

Lightrail and Stripe payment sources are referred to as the payment rails `lightrail` and `stripe` respectively. There is also an `internal` payment rail which can be used to represent any other payment source. This is intended a stop-gap solution to support transitioning from legacy systems.    

+ Request (application/json)
    
    Data used in example:
    - Purchasing: 
        - 2x $5 socks (8% tax rate)
        - 1x $1.99 chocolate bar  (5% tax rate)
        - 1x $3.49 shipping (0% tax rate)
    - Payment Sources:
        - Contact with prepaid account, and a sock and chocolate bar promotion.
            - Account has $20.
            - Sock promo is for 20% off retail price of socks.
            - Chocolate bar promo is a $0.50 credit towards the purchase of a chocolate bar.
        - Generic code for 10% off orders over $5 (does not apply to shipping). 
    
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - ID for the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + lineItems (array[LineItem])
        + sources (array[TransactionParty])
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all balance being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.
        
    + Body 
    
            {
                "id": "unique-id-123",
                "currency": "USD",
                "lineItems": [
                    {
                        "type": "product",
                        "productId": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2
                    },
                    {
                        "type": "product",
                        "productId": "pid_41234", 
                        "unitPrice": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar."
                    },
                    {
                        "type": "shipping",
                        "productId": "standard-shipping",
                        "unitPrice": 349,
                        "taxRate": 0
                    }
                ],
                "sources": [
                    {
                        "rail": "lightrail",
                        "contactId": "alice-1234"
                    },
                    {
                        "rail": "lightrail",
                        "code": "SAVE10PERCENT"
                    }
                ]
            }
    
+ Response 201 (application/json)
    + Attributes (Transaction)

    + Body
    
            {
                "id": "unique-id-123",
                "transactionType": "order",
                "currency": "USD",
                "totals": {
                    "subtotal": 1548, 
                    "tax": 67,
                    "discount": 350,
                    "payable": 1265 
                },
                "lineItems": [
                    {
                        "type": "product",
                        "id": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2,
                        "valuesApplied": [
                            {
                                "id": "2018-alice-socks-promo",
                                "rule": "item.productId == "pid_12345'",
                                "ruleExplanation": "Socks 20% discount",
                                "amount": -200,
                                "preTax": true,
                                "discount": true
                            }, 
                            {
                                "id": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": -80,
                                "preTax": true,
                                "discount": true
                            }
                        ],
                        "lineTotal": {
                            "price": 1000,
                            "taxable": 720,
                            "tax": 58,
                            "discount": 280,
                            "payable": 778
                        }  
                    },
                    {
                        "type": "product",
                        "id": "pid_41234", 
                        "unitCost": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar.",
                        "valuesApplied": [
                            {
                                "rail": "lightrail",
                                "id": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": -20,
                                "preTax": true,
                                "discount": true
                            },
                            {
                                "rail": "lightrail",
                                "id": "2018-50cent-chocobar-credit",
                                "rule": "item.productId == "pid_41234",
                                "ruleExplanation": "50 cents towards chocolate bars.",
                                "amount": -50,
                                "preTax": false,
                                "discount": true
                            }
                        ],
                        "lineTotal": {
                            "price": 199,
                            "taxable": 179,
                            "tax": 9,
                            "discount": 70,
                            "payable": 138
                        }
                    },
                    {
                        "type": "shipping",
                        "id": "standard-shipping", 
                        "unitCost": 349,
                        "taxRate": 0, 
                        "valuesApplied": [
                            {
                                "id": "alice-account-USD",
                                "amount": -349,
                                "preTax": false,
                                "discount": false
                            }
                        ],
                        "lineTotal": {
                            "price": 349,
                            "taxable": 349,
                            "tax": 0,
                            "discount": 0,
                            "payable": 349
                        }
                    }
                ],
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "2018-alice-socks-promo",
                        "currency": "USD",
                        "contactId": "alice-1234",
                        "amount": -200,
                        "balance": null,
                        "uses": {
                            "before": 1,
                            "after": 0,
                            "change": -1
                        }
                    },
                    {
                        "rail": "lightrail",
                        "id": "2018-10percent-off-over-5-orders",
                        "currency": "USD",
                        "code": "SAVE10PERCENT",
                        "amount": -100,
                        "balance": null,
                        "uses": null
                    },
                    {
                        "rail": "lightrail",
                        "id": "2018-50cent-chocobar-credit",
                        "currency": "USD",
                        "contactId": "alice-1234",
                        "amount": -50,
                        "balance": {
                            "before": 50,
                            "after": 0,
                            "change": -50
                        },
                        "uses": null
                    },
                    {
                        "rail": "lightrail",
                        "id": "alice-account-USD",
                        "currency": "USD",
                        "contactId": "alice-1234",
                        "amount": -1265,
                        "balance": {
                            "before": 2000,
                            "after": 735,
                            "change": -1265
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z",
                "metadata": {}
            }

### Debit [POST /transactions/debit]

Debit (remove from) a payment source.  Currently only the `lightrail` rail is supported.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - ID for the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        + source (TransactionParty, required) - The rail to debit.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to debit, > 0.
        + uses (number, optional) - The number of uses to remove.  Defaults to 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all balance being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "account": "points-account-14314"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }
    
+ Response 201 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "points-account-14314",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

### Credit [POST /transactions/credit]

Credit (add to) a payment destination.  Currently only the `lightrail` rail is supported.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - ID for the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        + destination (TransactionParty, required) - The rail to credit.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to credit, > 0.
        + uses (number, optional) - The number of uses to add.  Defaults to 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "destination": {
                    "rail": "lightrail",
                    "account": "points-account-14314"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }
    
+ Response 201 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "credit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "points-account-14314",
                        "currency": "XXX",
                        "amount": 2500,
                        "balance": {
                            "before": 1500,
                            "after": 4000,
                            "change": 2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }

### Transfer [POST /transactions/transfer]

Transfer value between a payment source and a payment destination.  Currently only the `lightrail` rail is supported.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - ID for the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        + source (TransactionParty, required) - The rail to take value from.  Only `lightrail` rails that refer to a specific Value are supported.
        + destination (TransactionParty, required) - The rail to send value to.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to transfer, > 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all balance being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "code": "62026c68ec5048dbb881"
                },
                "destination": {
                    "rail": "lightrail",
                    "id": "alice-account-USD"
                },
                "amount": 2500,
                "currency": "USD",
                "metadata": {
                    "reference": "frequent-shopper-bonus-072301"
                }
            }

+ Response 201 (application/json)
    + Attributes
        + id (string, required) - ID for the Transaction.
        + transactionType (string, required) - `transfer`
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The remainder of balance that could not be debited.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - Date when the Transaction was created.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "transfer",
                "currency": "USD",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "giftCard-96f27ad62a1c",
                        "currency": "USD",
                        "amount": -2500,
                        "balance": {
                            "before": 2500,
                            "after": 0,
                            "change": -2500
                        },
                        "uses": null
                    },
                    {
                        "rail": "lightrail",
                        "id": "alice-account-USD",
                        "currency": "USD",
                        "amount": 2500,
                        "balance": {
                            "before": 5000,
                            "after": 7500,
                            "change": 2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "metadata": {
                    "reference": "loyalty-bonus-072301"
                }
            }

### Get a Transaction [GET /transactions/{id}]

+ Parameter
    + id (string) - the ID of the Transaction to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:20:08.000Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

### List Transactions [GET /transactions{?limit}{?transactionType}{?createdDate}{?maxCreatedDate}]

+ Parameter
    + limit (number, optional) - The max number of items to get.
    + transactionType (string, optional) - Filter by the transactionType.
    + createdDate (string, optional) - Filter by createdDate.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Transaction])

    + Body

            [
                {
                    "id": "unique-id-123",
                    "transactionType": "debit",
                    "currency": "XXX",
                    "steps": [
                        {
                            "rail": "lightrail",
                            "id": "vs_1",
                            "currency": "XXX",
                            "balanceBefore": 5500,
                            "balanceAfter": 3000,
                            "balanceChange": -2500
                        }
                    ],
                    "remainder": 0,
                    "simulated": false,
                    "createdDate": "2018-04-17T23:20:08.000Z",
                    "updatedDate": "2018-04-17T23:20:08.000Z",
                    "metadata": {
                        "note": "Reduce loyalty points after 3mo contact inactivity"
                    }
                }
            ]

### Capture Pending Transaction [POST /transactions/{id}/capture]

A pending Transaction is created when it is created with `pending = true`.  A pending Transaction will be automatically voided unless it is captured.

+ Parameter
    + id (string) - the ID of the pending Transaction to capture.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "captured",
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

### Void Pending Transaction [POST /transactions/{id}/void]

A pending Transaction is created when it is created with `pending = true`.  A pending Transaction will be automatically voided but voiding it manually will release the funds sooner.

+ Parameter
    + id (string) - the ID of the pending Transaction to void.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "amount": -2500,
                        "balance": {
                            "before": 5500,
                            "after": 3000,
                            "change": -2500
                        },
                        "uses": null
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "void",
                "createdDate": "2018-04-17T23:20:08.000Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

# Group Advanced

## Currencies [/currencies]

A Currency is a unit of money in Lightrail.  It can be a standard currency such as `USD`, or a made up currency such as `FUNBUX`.  All currencies must be created before they are used, though they are typically created on initial setup in the web app.

### Create a Currency [POST /currencies]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + code (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + name (string, required) - Long name for the currency, eg: `Dollars`.
        + symbol (number, required) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, required) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

    + Body

            {
                "code": "USD",
                "name": "Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
    
+ Response 201 (application/json)
    + Attributes (Currency)

    + Body
            
            {
                "code": "USD",
                "name": "Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
### Get a Currency [GET /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to get.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Currency)

    + Body

            {
                "code": "USD",
                "name": "Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }

### List Currencies [GET /currencies]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (array[Currency])

    + Body

            [
                {
                    "code": "USD",
                    "name": "Dollars",
                    "symbol": "$",
                    "decimalPlaces": 2
                }
            ]
### Update a Currency [PATCH /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. If present must match the code in the path.
        + name (string, optional) - Long name for the currency, eg: `Dollars`.
        + symbol (string, optional) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, optional) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.
        
    + Body
    
            {
                "name": "Zimbabwe Dollars",
                "symbol": "Z$"
            }
    
+ Response 200 (application/json)
    + Attributes (Currency)

    + Body
    
            {
                "code": "ZWD",
                "name": "Zimbabwe Dollars",
                "symbol": "Z$",
                "decimalPlaces": 2
            }
### Delete a Currency [DELETE /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to delete.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Currency that is in use.  If the Currency is referenced a Value or Program those objects would need to be deleted first.  If the Currency is referenced by a Transaction it cannot be deleted because Transactions cannot be deleted.  Currencies in use can still be updated.

    + Body
    
            {
                "statusCode": 409,
                "message": "Currency 'USD' is in use.",
                "messageCode": "CurrencyInUse"
            }

# Data Structures

## CodeGeneration (object)
+ length (number, required) - The number of random characters in the code.  This number must be at least 5 to accommodate a reasonable amount of randomness.
+ characters (string, optional) - The set of characters to use for the random part of the code.  Defaults to all numbers and upper case letters.
+ prefix (string, optional) - Text prepended in front the random characters in the code.
+ suffix (string, optional) - Text appended after the random characters in the code.

## Currency (object)
+ code (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ name (number) - Long name for the currency, eg: `Dollars`.
+ symbol (number) - Currency symbol used for formatting, eg: `$`.
+ decimalPlaces (number) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

## Contact (object)
+ id (string) - ID for the Contact.
+ firstName (string) - The Contact's first name.
+ lastName (string) - The Contact's last name.
+ email (string) - The Contact's email.
+ tags (array[string]) - Segmentation tags.
+ metadata (object) - Arbitrary data associated with the Contact.
+ createdDate (string) - Date when the Contact was created.
+ updatedDate (string) - Date when the Contact was last updated.

## Issuance (object)
+ id (string) - ID for the Issuance.
+ count (number) - The numbers of Values issued.
+ csv (string) - A URL to download a CSV describing each Value issued with its code.
+ createdDate (string) - Date when the Value was issued.

## LineItem (object)
+ type (string) - Must be either `product`, `shipping` or `fee`.
+ productId (string) -  The ID of the product.
+ variantId (string) - The variant ID of a product. (Can be used to store SKU.)
+ unitPrice (number) -  The unit price of the item.
+ quantity (number) -  The number of items. Defaults to 1 if not provided.
+ taxRate (number) - Tax rate for the item. This is needed when a transaction contains items that have different tax rates.
+ tags (array[string]) - A list of tags associated with the item. For example, 'seasonal' or 'clothing'.
+ metadata (object) - Any additional data you want to store for the item.

## LineItemResponse (LineItem)
+ valuesApplied (array[LineItemPromotions])
+ lineTotal (LineTotal)

## LineItemPromotions (object)
+ id (string) - ID of the Value.
+ redemptionRule (string) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ ruleExplanation (string) - An explanation for the `redemptionRule` does that can be used to display to the contact.
+ amount (number) - The value of the discount.
+ preTax (boolean) - If true the Value's balance is applied on checkout before tax is calculated.

## LineTotal (object)
+ price (number) - The total cost of the items. ie `unitPrice * quantity`.
+ taxable (number) - The taxable amount. ie `price - preTaxDiscount`.
+ tax (number) - The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding'.
+ discount (number) - The discount
+ payable (number) - The cost of the line item after tax and discounts have been applied.

## Program (object)
+ id (string) - ID for the Program.
+ name (string) - A human-readable name for the Program.
+ currency (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ discount (boolean) - If true the Value will be noted as a discount for the Contact on checkout.
+ preTax (boolean) - If true the Value's balance is applied on checkout before tax is calculated.
+ active (boolean) - Whether the Value is active and can be used upon creation.
+ redemptionRule (Rule) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ valueRule (Rule) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
+ minInitialBalance (number) - 
+ maxInitialBalance (number) - 
+ fixedInitialBalances (array[number]) - A list of exact balances the Value can be created with.
+ fixedInitialUses (number) - If set the number of uses the Value will be created with.  Set `null` or omit for infinite uses.
+ tags (array[string]) - Segmentation tags.
+ startDate (string) - Earliest date that Values belonging to this Program can be active.
+ endDate (string) - Latest date that Values belonging to this Program can be active.
+ createdDate (string) - Date when the Program was created.
+ updatedDate (string) - Date when the Program was last updated.
+ metadata (object) - Arbitrary data associated with the Program.

## Rule (object)
+ rule (string) - the Lightrail Rule text of the rule.
+ explanation (string) - a plain explanation of the rule seen by contacts.

## Transaction (object)
+ id (string) - ID for the Transaction.
+ transactionType (string) - The type of the transaction, eg: `debit`, `credit`, `checkout`...
+ currency (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ steps (array[TransactionStep]) - An array of transaction steps.
+ remainder (number) - The remainder of balance that could not be debited.
+ simulated (boolean) - True if the transaction was simulated.
+ pending (enum[string]) - The pending status.  Only set if the Transaction was created with `pending` set to `true`.
    + `pending` - created pending and unresolved.
    + `captured` - created pending and captured.  The Transaction is final.
    + `void` - created pending and voided.  The Transaction was unrolled and all funds released back to their sources.
+ createdDate (string) - Date when the Transaction was created.
+ updatedDate (string) - Date when the Contact was last updated.
+ metadata (object) - Arbitrary data associated with the Transaction.

## TransactionParty (object)
+ rail (string) - The payment rail. Must belong to [`lightrail`, `stripe`, `internal`]. Must be used in combination with one of the following identifiers.
+ code (string) - `lightrail`: the code of a Gift Card or Promotion.
+ contactId (string) - `lightrail`: a Contact's ID.  This is shorthand for all Values that a Contact is associated with.
+ valueId (string) - `lightrail`: a Value's ID.
+ token (string) - `stripe`: a tokenized credit card for Stripe.  
+ id (string) - `internal`: the ID of the internal value.
+ balance (number) - `internal`: the amount of internal value stored.
+ beforeLightrail (boolean) - `internal`: if true this value is applied before Lightrail Values, otherwise it will be applied after.

## TransactionStep (object)
A step taken as part of the transaction.
+ rail (string) - Indicates the payment rail. Must be either `lightrail`, `stripe` or `internal`.

## LightrailTransactionStep (TransactionStep)
+ rail (string) - `lightrail`
+ id (string) - The id of the Value transacted with.
+ currency (string) - The currency of the Value transacted with.
+ contactId (string) - The ID of the Contact associated with the Value.
+ code (string) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`..
+ amount (number) - The amount contributed to the Transaction.  This number will be the same as `balance.change` in Values with a balance.
+ balance (Delta) - The balance before, after and net change of Value that carries a balance.  `null` when the Value does not have a balance (and thus has a valueRule).
+ uses (Delta) - The number of uses remaining before, after and net change of a Value that limits the nummber of uses.  `null` when the Value does not limit number of uses. 

## StripeTransactionStep (TransactionStep)
+ rail (string) - `stripe`
+ amount (number) - the amount of the charge.
+ chargeId (string) - the ID of the Stripe charge, if applicable.
+ charge (object) - the Stripe Charge object, if applicable.

## InternalTransactionStep (TransactionStep)
+ rail (string) - `internal`
+ id (string) - the ID of the internal value transacted with.
+ balance (Delta) - The balance before, after and net change of the internal value.

## Delta (object)
+ before (number) - the balance/uses before the transaction.
+ after (number) - the balance/uses after the transaction.
+ change (number) - the balance/uses change in the transaction.

## Value (object)
+ id (string) - ID of the Value.
+ programId (string) - 
+ currency (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ contactId (string) - The ID of the Contact that has claimed this Value.
+ code (string) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`.
+ balance (number) - The amount of money available in a Value.  This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
+ uses (number) - The number of times the Value can be used.  When this number reaches 0 the Value is expired.
+ discount (boolean) - If true the Value will be noted as a discount for the Contact on checkout.
+ active (boolean) - Whether the Value is active and can be used upon creation.
+ frozen (boolean) - If true the Value is frozen and cannot be transacted with.
+ canceled (boolean) - If true the Value is canceled.  Once canceled the Value can never be uncanceled.
+ preTax (boolean) - If true the Value's balance is applied on checkout before tax is calculated.
+ redemptionRule (Rule) - A Redemption Rule controlling when the Value can be used in checkout.  The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md).
+ valueRule (Rule) - A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`.  The syntax will be defined in a separate document.
+ startDate (string) - Date when the Value becomes available.
+ endDate (string) - Date when the Value expires.
+ tags (array[string]) - Segmentation tags.
+ metadata (object) - Arbitrary data associated with the Value.
+ createdDate (string) - Date when the Contact was created.
+ updatedDate (string) - Date when the Contact was last updated.