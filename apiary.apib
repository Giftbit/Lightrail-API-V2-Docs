FORMAT: 1A
HOST: https://api.lightrail.com/v2/

# Lightrail Documentation

Welcome to Lightrail. Lightrail makes it easy to create gift cards, manage customer account credit, run promotional discount programs, and collect multi-tender payment in a unified checkout solution. Create an account to generate API keys and begin testing.

[Create an account](https://www.lightrail.com/app/#/auth/register)

## Authentication
Authentication is done via an authorization header. You can retrieve your Lightrail API key [here](https://www.lightrail.com).

In requests to Lightrail you must include the following header:
```
Authorization: Bearer <API_KEY>
```

## Dates & Durations

All dates and durations are sent and received in ISO 8601 format.

Date format: `YYYY-MM-DDTHH:MM:SS.SSSZ`

Example date: `2007-04-05T14:30:00.000Z`

Duration format: `PnYnMnDTnHnMnS`

Example duration: `P7DT12H`

## Filtering

Resources that may contain lots of entries ([Contacts](#reference/0/contacts/list-contacts), [Values](#reference/0/values/list-values), [Programs](#reference/0/programs/list-programs), [Transactions](#reference/0/transactions)) have filters for retrieving a subset of the entries.

Some query filter properties support operators for more powerful filtering.  The operator is specified after the property and a dot (eg: `balance.ne` for balance not equal to).

| operator | description |
|----------|-------------|
| lt       | Less than (&lt;). |
| lte      | Less than or equal to (&lt;=). |
| gt       | Greater than (&gt;). |
| gte      | Greater than or equal to (&gt;=). |
| eq       | Equal to (==).  This is the default where no operator is specified. |
| ne       | Not equal to (!=). |
| in       | Equals one of the members of a comma-separated list.  Literal commas must be escaped (\\,). |
| like     | Equal to with wildcard support.  Percent signs (%) in the value are wild.  This operator is only supported on string properties. |
| isNull   | Equal to null (true) or not equal to null (false). |
| orNull   | Allows other filters acting on the same property to also include results if the property is equal to null (true), or, not equal to null (false). |

**Examples**

1. List [Contacts](#reference/0/contacts/list-contacts) where `email` equals "mia.wallace@example.com" or "mia_wallace@example.com":
`https://api.lightrail.com/v2/contacts?email.in=mia.wallace@example.com,mia_wallace@example.com`

2. List [Values](#reference/0/values/list-values) where `currency` equals "USD" and `balance` greater than or equal to $10:
`https://api.lightrail.com/v2/values?currency=USD&balance.gte=1000`  

3. List [Contacts](#reference/0/contacts/list-contacts) where `email` address is "like" `%@gmail.com` where `%` acts as a wild card (ie: ends with @gmail.com).
`https://api.lightrail.com/v2/contacts?email.like=%@gmail.com` 

4. List [Programs](#reference/0/programs/list-programs) where `endDate` is greater than date or `null` (ie: filtering for non-expired).
`https://api.lightrail.com/v2/programs?endDate.gt=2019-11-08T12:00:00.000Z&endDate.orNull=true` 

## Paging

Resources that may contain lots of entries ([Contacts](#reference/0/contacts/list-contacts), [Values](#reference/0/values/list-values), [Programs](#reference/0/programs/list-programs)) may not return all results in a single response.  Instead they return a number of results limited by the `limit` query parameter.

Retrieving results after the first page means following links in the [Link header](https://tools.ietf.org/html/rfc5988).  Here's an example Link header...

```text
(all line-breaks are inserted here for clarity and don't exist in production)

Link:
  <https://api/lightrail.com/v2/contacts?limit=100>;
    rel="first",
  <https://api/lightrail.com/v2/contacts?limit=100&before=eyJpZCI6ImplZmYgaXMgYXdlc29tZSJ9>;
    rel="prev",
  <https://api/lightrail.com/v2/contacts?limit=100&next=eyJpZCI6ImplbiBpcyBhd2Vzb21lIHRvbyJ9>;
    rel="next",
  <https://api/lightrail.com/v2/contacts?limit=100&last=true>;
    rel="last"
```

This example has links to the first page, the previous page, the next page, and the last page.  When already at the first page there will only be links to the next and last.  When already at the last page there will only be links to the first and prev.  If there are no results to page though or only one page there will not be any links.

It's important to follow the links in the Link header and not construct the URLs on your own.

## Errors

Lightrail uses the following HTTP status codes to indicate an error:

| code | meaning |
|------|---------|
| 400  | The request could not be understood.  eg: JSON body could not be parsed. |
| 401  | Authentication missing. |
| 403  | The operation is not allowed for the given authentication. |
| 404  | The resource was not found.  eg: There is no Contact for the given ID. |
| 409  | The operation could not be performed because of the state of the system.  eg: There is not enough balance for a Transaction to complete. |
| 422  | The request was understood but has a logical problem.  eg: Attempting to credit a negative amount. If using the `stripe` payment rail, most Stripe errors will result in a `422`. |
| 424  | The request failed due to a failed third party dependency (such as an error calling Stripe). This can indicate that Lightrail and a third party are an inconsistent state. eg: While attempting to reverse a checkout Transaction with two Stripe charges, the first charge is refunded but the second refund fails. Refunds in Stripe cannot be undone which leaves the system in a state that it cannot automatically recover from. Note, this status code is extremely rare and represents a worst-case scenario for which some intervening action will be necessary. |
| 429  | Too many requests in a given amount of time. |
| 500  | Internal server error.  Please [contact us](mailto:hello@lightrail.com) with details of your request and we'll look into it. |

Lightrail errors contain a JSON body with the following properties:

| property    | always present | purpose |
|-------------|----------------|---------|
| message     | yes            | English explanation of the error.  This is for display purposes only as the explanation may be formatted or change between system updates. |
| statusCode  | yes            | The HTTP status code. |
| messageCode | no             | A constant corresponding to the message.  This can be used to take action in response to the error. |
| stripeError | no             | When using the `stripe` rail: the full error response from Stripe in case of an error charging a credit card. |

An example:

```json
{
    "message": "Insufficient balance for the transaction.",
    "statusCode": 409,
    "messageCode": "InsufficientBalance"
}
```

## Support
[Contact us](mailto:hello@lightrail.com) any time if you have any questions.  We're here to help.

## Contacts [/contacts/]

Contacts are the people or businesses who buy products or services from you.  They're identified by a unique `id`, which typically corresponds to an existing identifier in your system.

Values can be [attached](#reference/0/contacts/attach-a-contact-to-a-value) to Contacts.  All (applicable) Value attached to a Contact will be used in a [checkout Transaction](#reference/0/transactions/checkout) simply by specifying the Contact checking out.

### Create a Contact [POST /contacts]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - The ID you choose to represent the Contact.  Two Contacts can't have the same ID, guaranteeing repeated calls won't create extra resources.  We recommend not using email addresses as IDs because users can change email addresses but the ID can't be changed. IDs may not contain leading or trailing whitespace.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + metadata (object, optional) - Arbitrary data associated with the Contact.

    + Body

            {"id":"97df5ac2-5ac6-4ada-a","firstName":"Jeffrey","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino"}}
    
+ Response 201 (application/json)
    + Attributes (Contact)

    + Body
            
            {"id":"97df5ac2-5ac6-4ada-a","firstName":"Jeffrey","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino"},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Get a Contact [GET /contacts/{id}]

+ Parameter
    + id (string) - the ID of the Contact to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Contact)

    + Body

            {"id":"97df5ac2-5ac6-4ada-a","firstName":"Jeffrey","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino"},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

### List Contacts [GET /contacts{?limit}{?id}{?firstName}{?lastName}{?email}{?valueId}]
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + id (string, optional) - Filter by ID.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + firstName (string, optional) - Filter by the firstName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.
    + lastName (string, optional) - Filter by the lastName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.
    + email (string, optional) - Filter by email.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.
    + valueId (string, optional) - Filter by Value ID. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"

    + Attributes (array[Contact])

    + Body

            [{"id":"97df5ac2-5ac6-4ada-a","firstName":"Jeffrey","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino"},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]
### Update a Contact [PATCH /contacts/{id}]
            
+ Parameter
    + id (string) - the ID of the Contact to update.

+ Request (application/json)

    Applies a JSON merge. Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, optional) - The ID you choose to represent the Contact.  If present must match the ID in the path.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + metadata (object, optional) - Arbitrary data associated with the Contact.

    + Body

            {"firstName":"The Dude","metadata":{"alias":"El Duderino","note":"Into the whole 'brevity thing'"}}
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {"id":"97df5ac2-5ac6-4ada-a","firstName":"The Dude","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino","note":"Into the whole 'brevity thing'"},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Delete a Contact [DELETE /contacts/{id}]

+ Parameter
    + id (string) - the ID of the Contact to delete.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Contact that is associated with one or more Values. Values that are associated with the Contact would need to be deleted first. 
    
    + Attributes (RestError)

    + Body

            {
                "statusCode": 409,
                "message": "Contact 'unique-id-123' is in use",
                "messageCode": "ContactInUse"
            }

### Attach a Contact to a Value [POST /contacts/{id}/values/attach]
Attaching a Value to a Contact will associate the Value with the Contact. The Contact then "has" that Value. In a checkout Transaction, specifying the  `contactId` as a payment source will resolve to all associated Values for the Contact to be considered for the Transaction.

If attaching a Unique Value (`isGenericCode=false`) the Value's `contactId` will be set to the ID of the Contact attached to it. If attaching a Generic Code (`isGenericCode=true`) it depends on whether the Generic Code has `genericCodeOptions.perContact` properties set. If set, attaching will result in a new Value being created using the perContact properties for the new Value's `balance` and `usesRemaining`. If not set, the Generic Code will be shared and the Contact will receive a reference to the Generic Code. You can [list the Value's Contacts](#reference/0/values/list-a-value's-attached-contacts) to see all Contacts attached to the Value.        

+ Parameter
    + id (string) - the ID of the Contact to attach Value to.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + valueId (string, optional) - The `id` of the Value to attach to the Contact.  One of `valueId` or `code` must be specified.
        + code (string, optional) - The `code` of the Value to attach to the Contact.  One of `valueId` or `code` must be specified.

    + Body

            {"valueId":"aaf86ef5-2a72-4ec0-8"}
    
+ Response 200 (application/json)
    
    + Attributes (Value)

    + Body
            
            {"id":"aaf86ef5-2a72-4ec0-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"2fe1e4e1-1936-4b3e-b","issuanceId":null,"contactId":"97df5ac2-5ac6-4ada-a","code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","updatedContactIdDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)
    
    A Value with `isGenericCode=true` true and `usesRemaining=0` cannot be attached to any more Contacts.
    
    + Attributes (RestError)
    
    + Body
    
            {
                "statusCode": 409,
                "message": "The Value with id '123abc' cannot be attached because it has a generic code and has 0 usesRemaining."
                "messageCode": "InsufficientUses"
            }

+ Response 409 (application/json)
    
    A Value that is frozen cannot be attached.
    
    + Attributes (RestError)
    
    + Body
    
            {
                "statusCode": 409,
                "message": "The Value cannot be attached because it is frozen."
                "messageCode": "ValueFrozen"
            }

+ Response 409 (application/json)
    
    A Value that is canceled cannot be attached.
    
    + Attributes (RestError)
    
    + Body
    
            {
                "statusCode": 409,
                "message": "The Value cannot be attached because it is canceled."
                "messageCode": "ValueCanceled"
            }
### Detach a Contact from a Value [POST /contacts/{id}/values/detach]
      
+ Parameter
    + id (string) - the ID of the Contact to detach the Value from.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + valueId (string, required) - The `id` of the Value to detach from the Contact. 

    + Body

            {"valueId":"aaf86ef5-2a72-4ec0-8"}
    
+ Response 200 (application/json)
    
    + Attributes (Value)

    + Body
            
            {"id":"aaf86ef5-2a72-4ec0-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"2fe1e4e1-1936-4b3e-b","issuanceId":null,"contactId":null,"code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:46.000Z","updatedContactIdDate":"2020-07-14T18:43:46.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)
    
    A Value that is not attached cannot be detached.
    
    + Attributes (RestError)
    
    + Body
    
            {
                "statusCode": 409,
                "message": "The Value X is not Attached to the Contact Y."
                "messageCode": "AttachedValueNotFound"
            }

+ Response 409 (application/json)
    
    A Value that is frozen cannot be detached.
    
    + Attributes (RestError)
    
    + Body
    
            {
                "statusCode": 409,
                "message": "The Value cannot be detached because it is frozen."
                "messageCode": "ValueFrozen"
            }
### List a Contact's Values [GET /contacts/{id}/values{?limit}{?programId}{?currency}{?balance}{?usesRemaining}{?discount}{?active}{?frozen}{?canceled}{?pretax}{?startDate}{?endDate}{?createdDate}{?updatedDate}]

+ Parameter
    + id (string) - The ID of the Contact to get the Values of.
    + limit (number, optional) - The max number of items to get.
    + programId (string, optional) - Filter by Program ID.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + balance (number, optional) - Filter by balance.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + usesRemaining (number, optional) - Filter by number of uses remaining.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + discount (boolean, optional) - Filter by discount.
    + active (boolean, optional) - Filter active/inactive.
    + frozen (boolean, optional) - Filter frozen/unfrozen.
    + canceled (boolean, optional) - Filter canceled.
    + pretax (boolean, optional) - Filter by whether or not the Value is applied pretax.
    + startDate (string, optional) - Filter by startDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers

            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"

    + Attributes (array[Value])

    + Body

            [{"id":"aaf86ef5-2a72-4ec0-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"2fe1e4e1-1936-4b3e-b","issuanceId":null,"contactId":"97df5ac2-5ac6-4ada-a","code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","updatedContactIdDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

## Values [/values]

A Value (naturally) represents value in the Lightrail system.  This includes a gift card, a promotion, a coupon, store credit, etc.  Values can be created one at a time or [issued](#reference/0/programs/create-issuance) from a [Program](#reference/0/programs).  Issuing Value from a Program makes it part of that Program which keeps different ways of using Value organized.
 
Most Values will be accessed by a code, or attached to a [Contact](#reference/0/contacts).  All Values attached to a Contact can be used in a [checkout Transaction](#reference/0/transactions/checkout) by only specifying the Contact.

### Create a Value [POST /values{?showCode}]

+ Parameter
    + showCode (boolean, optional) - Show the full code for the Value.  This is useful when using the `generateCode` param and you want to see the generated code.

+ Request (application/json)
    This is an example of creating a unique Value using a Program to set most of its properties.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Value.  Two Values can't have the same ID, guaranteeing repeated calls won't create extra resources. IDs may not contain leading or trailing whitespace.
        + programId (string, optional) - Create as part of a Program and copy default properties from it.
        + contactId (string, optional) - Directly attach to a Contact.
        + code (string, optional) - Assign a code. Codes may not contain leading or trailing whitespace. As a convenience, leading/trailing whitespace will be trimmed from codes supplied for lookup or for charging in a Transaction.
        + isGenericCode (boolean) - If `true` the code is to be shared publicly and not secret. If `false` the code is treated as a secret. Defaults to false if not provided.
        + genericCodeOptions (GenericCodeOptions, optional)
        + generateCode (CodeGeneration, optional) - Parameters to generate a unique code. The code generated will be stored securely. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`.
        + currency (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. Required if `programId` is not set.
        + balance (number, optional) - The amount of money available in a Value. This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500. For generic codes that have a `perContact.balance` the `balance` can control maximum liability and will be drawn down by the `perContact.balance` when attached to a Contact. 
        + pretax (boolean, optional) - If `true` the Value's balance is applied on checkout before tax is calculated.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If `true` the Value is frozen.  When frozen new Transactions cannot be created; pending Transactions can be voided.
        + discount (boolean, optional) - If `true` the Value will be marked as a discount on checkout.
        + discountSellerLiability (number, optional) - (Note: deprecated, please use discountSellerLiabilityRule.) In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Value must be a discount, ie `discount: true`.
        + discountSellerLiabilityRule (Rule, optional) - In a marketplace, can be set as a rule that'll evaluate to a number between 0 and 1 for the ratio of the discount the seller is liable for. Examples: `{"rule": "0", "explanation": "marketplace 100% liable"}`, `{"rule": "1", "explanation": "seller 100% liable"}`, `{"rule": "1 - currentLineItem.marketplaceRate", "explanation": "liability proportionally shared based on lineItem's marketplaceRate"}`. Note, the Value must be a discount (`discount: true`).
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + balanceRule (Rule, optional) - A Rule controlling the effective balance of the Value in a Checkout. To use this `balance` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + usesRemaining (number, optional) - The number of times the Value can be used in checkout. When this number reaches 0 the Value can no longer be used in checkout. For generic codes that have a `perContact.usesRemaining` the `usesRemaining` can control maximum uses and will be drawn down by the `perContact.usesRemaining` when attached to a Contact.
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.  When expired new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
        + metadata (object, optional) - Arbitrary data associated with the Value. If `programId` is set `metadata` from the Program is inherited but any keys specified will override those of the Program.
        
    + Body
    
            {"id":"aaf86ef5-2a72-4ec0-8","programId":"2fe1e4e1-1936-4b3e-b","balance":500}
    
+ Response 201 (application/json)
    + Attributes (Value)

    + Body
    
            {"id":"aaf86ef5-2a72-4ec0-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"2fe1e4e1-1936-4b3e-b","issuanceId":null,"code":null,"isGenericCode":false,"contactId":null,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Request (application/json) 
    This is an example of creating a generic code.

   + Headers
    
            Authorization: Bearer <API_KEY>
    
    + Body
    
            {"id":"dd614dc1-059d-4925-8","currency":"USD","isGenericCode":true,"genericCodeOptions":{"perContact":{"usesRemaining":1}},"balanceRule":{"rule":"500 + value.balanceChange","explanation":"$5 off purchase"}}
        
+ Response 201 (application/json)

    + Body
    
            {"id":"dd614dc1-059d-4925-8","currency":"USD","balance":null,"usesRemaining":null,"programId":null,"issuanceId":null,"code":null,"isGenericCode":true,"genericCodeOptions":{"perContact":{"usesRemaining":1}},"contactId":null,"pretax":false,"active":true,"canceled":false,"frozen":false,"discount":false,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":{"rule":"500 + value.balanceChange","explanation":"$5 off purchase"},"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:53.000Z","updatedDate":"2020-07-14T18:43:53.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Get a Value [GET /values/{id}{?showCode}]

+ Parameter
    + id (string) - the ID of the Value to get.
    + showCode (boolean, optional) - Show the full code for the Value.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {"id":"aaf86ef5-2a72-4ec0-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"2fe1e4e1-1936-4b3e-b","issuanceId":null,"code":null,"isGenericCode":false,"contactId":null,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

### Get a Value by Code [GET /values{?code}{?showCode}]

+ Parameter
    + code (string) - the code (secret or generic) of the Value to get. As a convenience, leading/trailing whitespace will be trimmed from codes supplied for lookup or for charging in a Transaction.
    + showCode (boolean, optional) - Show the full code for the Value.

+ Request (application/json)
    + Headers

            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            [{"id":"aaf86ef5-2a72-4ec0-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"2fe1e4e1-1936-4b3e-b","issuanceId":null,"code":null,"isGenericCode":false,"contactId":null,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

### List Values [GET /values{?limit}{?showCode}{?programId}{?currency}{?contactId}{?isGenericCode}{?balance}{?usesRemaining}{?discount}{?active}{?frozen}{?canceled}{?pretax}{?startDate}{?endDate}{?createdDate}{?updatedDate}]
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + showCode (boolean, optional) - Show the full code for the Value.
    + programId (string, optional) - Filter by Program ID.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + contactId (string, optional) - Filter by Values attached to the given Contact ID.
    + isGenericCode (boolean, optional) - Filter by isGenericCode.
    + balance (number, optional) - Filter by balance.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + usesRemaining (number, optional) - Filter by number of uses remaining.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + discount (boolean, optional) - Filter by discount.
    + active (boolean, optional) - Filter active/inactive.
    + frozen (boolean, optional) - Filter frozen/unfrozen.
    + canceled (boolean, optional) - Filter canceled.
    + pretax (boolean, optional) - Filter by whether or not the Value is applied pretax.
    + startDate (string, optional) - Filter by startDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Value])

    + Body

            [{"id":"aaf86ef5-2a72-4ec0-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"2fe1e4e1-1936-4b3e-b","issuanceId":null,"contactId":null,"code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

+ Response 200 (text/csv)

    You can request a CSV file of the output by setting `Accept: text/csv` in the request header.

    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Body

            id,currency,balance,usesRemaining,programId,contactId,code,isGenericCode,pretax,active,canceled,frozen,discount,discountSellerLiability,redemptionRule,balanceRule,startDate,endDate,metadata,createdDate,updatedDate
            vs-1,USD,2500,,giftCards,,…GYOA,false,false,true,false,false,false,,,,,,,2018-04-17T23:20:08.000Z,2018-04-17T23:20:08.000Z
### Update a Value [PATCH /values/{id}]

+ Parameter
    + id (string) - the ID of the Value to modify.

+ Request (application/json)

    Applies a JSON merge. Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If `true` the Value is frozen.  When frozen new Transactions cannot be created; pending Transactions can be voided.
        + canceled (boolean, optional) - If `true` the Value is canceled.  When canceled new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
        + pretax (boolean, optional) - If `true` the Value's balance is applied on checkout before tax is calculated.
        + discount (boolean, optional) - If `true` the Value will be marked as a discount on checkout.
        + discountSellerLiability (number, optional) - (Note: deprecated, please use discountSellerLiabilityRule.) In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Value must be a discount, ie `discount: true`.
        + genericCodeOptions (GenericCodeOptions, optional) - To update requires `isGenericCode: true`. Note, property `isGenericCode` cannot be updated.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + balanceRule (Rule, optional) - A Rule controlling the effective balance of the Value in a Checkout. To use this `balance` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + startDate (string, optional) - Date when the Value becomes available.
        + endDate (string, optional) - Date when the Value expires.  When expired new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
        + metadata (object, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {"frozen":true}
    
+ Response 200 (application/json)
    + Attributes (Value)

    + Body
    
            {"id":"aaf86ef5-2a72-4ec0-8","currency":"USD","balance":500,"usesRemaining":null,"programId":"2fe1e4e1-1936-4b3e-b","issuanceId":null,"contactId":null,"code":null,"isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":true,"discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:46.000Z","updatedContactIdDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Change a Value's code [POST /values/{id}/changeCode]

+ Parameter
    + id (string) - the ID of the Value to change the code of.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, optional) - The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`. Codes may not contain leading or trailing whitespace.
        + generateCode (CodeGeneration, optional) - Parameters to generate a unique code. The code generated will be stored securely. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`.
        
        
    + Body
    
            {"generateCode":{}}

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {"id":"b555fc9d-2902-4815-9","currency":"USD","balance":500,"usesRemaining":null,"programId":"2fe1e4e1-1936-4b3e-b","issuanceId":null,"contactId":null,"code":"\u2026E7UD","isGenericCode":false,"pretax":true,"active":true,"canceled":false,"frozen":false,"discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:50.000Z","updatedDate":"2020-07-14T18:43:50.000Z","updatedContactIdDate":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### List a Value's Transactions [GET /values/{id}/transactions{?limit}{?transactionType}{?createdDate}{?currency}]

+ Parameter
    + id (string) - the ID of the Value to get the Transactions of.
    + transactionType (string, optional) - Filter by the transactionType.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Transaction])

    + Body

            [{"id":"a4c44450-2d0f-4afa-8","transactionType":"debit","currency":"USD","totals":{"remainder":0},"lineItems":null,"paymentSources":null,"steps":[{"rail":"lightrail","valueId":"4daf0a32-485a-4e24-b","contactId":null,"code":null,"balanceBefore":3000,"balanceAfter":2000,"balanceChange":-1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null}],"metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"},"tax":null,"pending":false,"createdDate":"2020-07-14T18:43:46.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]
### List a Value's Attached Contacts [GET /values/{id}/contacts{?limit}{?firstName}{?lastName}{?email}{?valueId}]

+ Parameter
    + id (string) - The ID of the Value to get the Contacts of.
    + limit (number, optional) - The max number of items to get.
    + firstName (string, optional) - Filter by the firstName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.
    + lastName (string, optional) - Filter by the lastName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.
    + email (string, optional) - Filter by email.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Contact])

    + Body

            [{"id":"97df5ac2-5ac6-4ada-a","firstName":"The Dude","lastName":"Lebowski","email":"thedude@example.com","metadata":{"alias":"El Duderino","note":"Into the whole 'brevity thing'"},"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

## Programs [/programs]

Programs organize [Values](#reference/0/values) and Values can be [issued](#reference/0/programs/create-issuance) from Programs.  Programs are typically created through the web app.

Programs are most commonly used to define and organize promotion campaigns. For example, the Value issued for a new user promotion that gives them a 5% discount on their first purchase should behave differently from the Value for a "TEN-DOLLAR-TUESDAYS" promotion. These different promotions will also need to be tracked and analyzed separately, all of which can happen in the web app.

### Create Program [POST /programs]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - The ID you choose to represent the Program.   IDs may not contain leading or trailing whitespace.
        + name (string, required) - A human-readable name for the Program.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + discount (boolean, optional) - If true Values created in the Program will be marked as a discount on checkout.
        + pretax (boolean, optional) - If true the balance on Values created in the Program is applied on checkout before tax is calculated.
        + active (boolean, optional) - Whether Values created in the Program are active and can be used upon creation.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when Values created in the Program can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + balanceRule (Rule, optional) - A Rule controlling the effective balance in checkout of Values created in the Program. To use this `minInitialBalance`, `maxInitialBalance` and `fixedInitialBalances` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + minInitialBalance (number, optional) - The minimum balance Values created in the Program can be created with.
        + maxInitialBalance (number, optional) - The maximum balance Values created in the Program can be created with.
        + fixedInitialBalances (array[number], optional) -  A list of exact balances Values created in the Program can be created with.
        + fixedInitialUsesRemaining (array[number], optional) -  A list of exact usesRemaining the Value can be created with.
        + discountSellerLiability (number, optional) - (Note: deprecated, please use discountSellerLiabilityRule.) Applies to Values created in the Program. In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Program must be a discount, ie `discount: true`.
        + discountSellerLiabilityRule (Rule, optional) - Applies to Values created in the Program. In a marketplace, can be set as a rule that'll evaluate to a number between 0 and 1 for the ratio of the discount the seller is liable for. Examples: `{"rule": "0", "explanation": "marketplace 100% liable"}`, `{"rule": "1", "explanation": "seller 100% liable"}`, `{"rule": "1 - currentLineItem.marketplaceRate", "explanation": "liability proportionally shared based on lineItem's marketplaceRate"}`. Note, the Value must be a discount (`discount: true`).
        + startDate (string, optional) - Earliest date that Values created in the Program can be active.
        + endDate (string, optional) - Latest date that Values created in the Program can be active.
        + metadata (object, optional) - Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys.
        
    + Body

            {"id":"2fe1e4e1-1936-4b3e-b","name":"Spring Promotion USD","currency":"USD","pretax":true,"discount":true,"fixedInitialBalances":[500]}
    
+ Response 201 (application/json)
    + Attributes (Program)

    + Body
            
            {"id":"2fe1e4e1-1936-4b3e-b","name":"Spring Promotion USD","currency":"USD","discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"pretax":true,"active":true,"minInitialBalance":null,"maxInitialBalance":null,"fixedInitialBalances":[500],"fixedInitialUsesRemaining":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":null,"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Get a Program [GET /programs/{id}]

+ Parameter
    + id (string) - the ID of the Program to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Program)

    + Body

                {"id":"2fe1e4e1-1936-4b3e-b","name":"Spring Promotion USD","currency":"USD","discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"pretax":true,"active":true,"minInitialBalance":null,"maxInitialBalance":null,"fixedInitialBalances":[500],"fixedInitialUsesRemaining":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":null,"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

### List Programs [GET /programs{?limit}{?id}{?currency}{?startDate}{?endDate}{?createdDate}{?updatedDate}]
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + id (string, optional) - Filter by ID. This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency. This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + startDate (string, optional) - Filter by startDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + endDate (string, optional) - Filter by endDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + updatedDate (string, optional) - Filter by updatedDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Program])

    + Body

            [{"id":"2fe1e4e1-1936-4b3e-b","name":"Spring Promotion USD","currency":"USD","discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"pretax":true,"active":true,"minInitialBalance":null,"maxInitialBalance":null,"fixedInitialBalances":[500],"fixedInitialUsesRemaining":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":null,"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]
### Update a Program [PATCH /programs/{id}]

+ Parameter
    + id (string) - the ID of the Program to modify.

+ Request (application/json)

    Applies a JSON merge. Only members that are present are changed and all others are left untouched. 
    Note that updating a Program does not automatically update the attributes of Values that have already been generated through it. Only new Values generated afterwards will reflect the changes. If you want existing Values to reflect your changes, you will need to update them in a separate step. 

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + name (string, optional) - A human-readable name for the Program.
        + active (boolean, optional) - Whether Values created in the Program are active and can be used upon creation.
        + discount (boolean, optional) - If true Values created in the Program will be marked as a discount on checkout. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        + pretax (boolean, optional) - If true the balance on Values created in the Program is applied on checkout before tax is calculated. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when Values created in the Program can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + balanceRule (Rule, optional) - A Rule controlling the effective balance in checkout of Values created in the Program. To use this `minInitialBalance`, `maxInitialBalance` and `fixedInitialBalances` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + minInitialBalance (number, optional) - The minimum balance Values created in the Program can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + maxInitialBalance (number, optional) - The maximum balance Values created in the Program can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + fixedInitialBalances (array[number], optional) -  A list of exact balances Values created in the Program can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + fixedInitialUsesRemaining (array[number], optional) -  A list of exact usesRemaining the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        + discountSellerLiability (number, optional) - (Note: deprecated, please use discountSellerLiabilityRule.) Applies to Values created in the Program. In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Program must be a discount, ie `discount: true`.
        + startDate (string, optional) - Earliest date that Values created in the Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        + endDate (string, optional) - Latest date that Values created in the Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        + metadata (object, optional) - Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys.

    + Body

            {"name":"Spring Promo US Dollars"}
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {"id":"2fe1e4e1-1936-4b3e-b","name":"Spring Promo US Dollars","currency":"USD","discount":true,"discountSellerLiability":null,"discountSellerLiabilityRule":null,"pretax":true,"active":true,"minInitialBalance":null,"maxInitialBalance":null,"fixedInitialBalances":[500],"fixedInitialUsesRemaining":null,"redemptionRule":null,"balanceRule":null,"startDate":null,"endDate":null,"metadata":null,"createdDate":"2020-07-14T18:43:45.000Z","updatedDate":"2020-07-14T18:43:45.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Delete a Program [DELETE /programs/{id}]

+ Parameter
    + id (string) - the ID of the Promotion Program to delete.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Promotion Program that is in use. If the Program is referenced by one or more Values, those objects would need to be deleted first. If a Value created through this Program is referenced by a Transaction, it cannot be deleted because Transactions cannot be deleted. Programs in use can still be updated.
    
    + Attributes (RestError)

    + Body
    
            {
                "statusCode": 409,
                "message": "Program 'abc123' is in use.",
                "messageCode": "ProgramInUse"
            }
### Create Issuance [POST /programs/{id}/issuances]
An Issuance creates many [Values](#reference/0/values) in bulk and is tracked for downloading secure codes after creation.  This is primarily used by the web app.  When creating only a few Values use [Create Value](#reference/0/values/create-a-value) instead.

+ Parameter
    + id (string) - the ID of the Program to issue Value from.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Issuance.  Two Issuances can't have the same ID, guaranteeing repeated calls won't create extra resources. IDs may not contain leading or trailing whitespace.
        + name (string, required) - A human-readable name for the Issuance.
        + count (number, required) - The numbers of Values to issue. Must be between 1-1000.
        + generateCode (CodeGeneration, optional) - This will cause each Value created in the Issuance to have its own unique generated code. The code generated will be stored securely. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`.
        + code (string, optional) - The code to set on the Value. This is only available when `count` is 1.
        + isGenericCode (boolean, optional) - If true the code is to be shared publicly and not secret. If `false` the code is treated as a secret. Defaults to `false` if not provided. This is only available when `count` is 1.
        + balance (number, optional) - The balance to set on each Value. This can be constrained by the Program's `minInitialBalance` and `maxInitialBalance` or must be in the `fixedInitialBalances` array.
        + usesRemaining (number, optional) - The usesRemaining to set on each Value. This can be restricted to Values defined by the Program's `fixedInitialUsesRemaining`.  
        + startDate (string, optional) - Override the Program's startDate for the Value.
        + endDate (string, optional) - Override the Program's endDate for the Value.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Values can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + balanceRule (Rule, optional) - A Rule controlling the effective balance of the Values in checkout. To use this `balance` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
        + metadata (object, optional) - Arbitrary data associated with the Issuance. `metadata` from the Program is inherited but any keys specified will override those of the Program.
        
    + Body
    
            {"id":"6186e66b-5c00-4daf-b","name":"My First Issuance","count":10,"generateCode":{},"balance":500}
    
+ Response 201 (application/json)
    + Attributes (Issuance)

    + Body
    
            {"id":"6186e66b-5c00-4daf-b","name":"My First Issuance","programId":"2fe1e4e1-1936-4b3e-b","count":10,"balance":500,"redemptionRule":null,"balanceRule":null,"usesRemaining":null,"active":true,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:51.000Z","updatedDate":"2020-07-14T18:43:51.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Get an Issuance [GET /programs/{programId}/issuances/{issuanceId}]

+ Parameter
    + issuanceId (string) - the ID of the Issuance to get.
    + programId (string) - the ID of the Program of the Issuance.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Issuance)

    + Body

            {"id":"6186e66b-5c00-4daf-b","name":"My First Issuance","programId":"2fe1e4e1-1936-4b3e-b","count":10,"balance":500,"redemptionRule":null,"balanceRule":null,"usesRemaining":null,"active":true,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:51.000Z","updatedDate":"2020-07-14T18:43:51.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

### List Issuances [GET /programs/{id}/issuances]

+ Parameter
    + id (string) - the ID of the Program to get Issuances from.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
            
    + Attributes (array[Issuance])

    + Body
    
            [{"id":"6186e66b-5c00-4daf-b","name":"My First Issuance","programId":"2fe1e4e1-1936-4b3e-b","count":10,"balance":500,"redemptionRule":null,"balanceRule":null,"usesRemaining":null,"active":true,"startDate":null,"endDate":null,"metadata":{},"createdDate":"2020-07-14T18:43:51.000Z","updatedDate":"2020-07-14T18:43:51.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

## Transactions [/transactions]

Transactions can add and remove balance on Lightrail Values or create Stripe charges.

Lightrail Values cannot be transacted against if they are inactive, canceled, frozen, have not yet started or have ended. 

### Checkout [POST /transactions/checkout]

The checkout endpoint collects all payment for a purchase.  It can apply all Lightrail promotions, calculate tax, debit funds from Lightrail and charge credit cards through Stripe. Your Stripe account must be [connected to Lightrail](https://www.lightrail.com/app/#/account/api) in order for Lightrail to make charges on your behalf.

Lightrail and Stripe payment sources are referred to as the payment rails `lightrail` and `stripe` respectively. There is also an `internal` payment rail which can be used to represent any other payment source. This is intended as a stop-gap solution to support transitioning from legacy systems.

Error responses: If using the `stripe` rail, it is possible for checkout transactions to fail for reasons outside of Lightrail's control, such as an invalid card token or a card being declined. Stripe errors will be passed on in full under the `stripeError` key in the response. 

+ Request (application/json)
    
    Data used in example:
    - Purchasing: 
        - 2x $5 socks (8% tax rate)
        - 1x $1.99 chocolate bar  (5% tax rate)
        - 1x $3.49 shipping (0% tax rate)
    - Payment Sources:
        - Contact with prepaid account and a chocolate bar promotion.
            - Account has $10.
            - Sock promo is for 20% off retail price of socks.
        - Credit card
    
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice. IDs may not contain leading or trailing whitespace.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + lineItems (array[LineItem], required)
        + sources (array[LightrailTransactionParty, StripeTransactionParty, InternalTransactionParty], required) - An array of payment sources to use for the checkout transaction. Supported payment rails: `lightrail`, `stripe`, `internal`.
        + simulate (boolean, optional) - If `true` the Transaction is simulated and no changes take place. If the Transaction is repeated with `simulate=false` it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If `true` the Transaction will go through using whatever amount is available: this might not cover the full amount of the Transaction. The remainder (i.e. amount still owing) will be indicated.
        + pending (boolean, optional) - If `true` the Transaction is created as pending for the default duration. The pending duration can be customized by passing in an ISO duration string instead of a boolean. A pending Transaction will be automatically [voided](#reference/0/transactions/void-pending) after the pending duration if not [captured](#reference/0/transactions/capture-pending).
        + tax (Tax, optional) 
        + metadata (object, optional) - Any additional data you want to store for the item. All metadata will also be saved on any Stripe charge(s).
        
    + Body 
    
            {"id":"25052bff-490c-4a1d-9","sources":[{"rail":"lightrail","contactId":"97df5ac2-5ac6-4ada-a"},{"rail":"stripe","source":"tok_visa"}],"lineItems":[{"productId":"socks","unitPrice":500,"quantity":2,"taxRate":0.08},{"productId":"chocolate_bar","unitPrice":199,"taxRate":0.05},{"productId":"shipping","unitPrice":349,"taxRate":0.0}],"currency":"USD"}
    
+ Response 201 (application/json)

    + Attributes (Transaction)

    + Body
    
            {"id":"25052bff-490c-4a1d-9","transactionType":"checkout","currency":"USD","createdDate":"2020-07-14T18:43:47.000Z","tax":{"roundingMode":"HALF_EVEN"},"totals":{"subtotal":1548,"tax":74,"discount":200,"payable":1422,"remainder":0,"forgiven":0,"discountLightrail":200,"paidLightrail":1000,"paidStripe":422,"paidInternal":0},"lineItems":[{"productId":"socks","unitPrice":500,"quantity":2,"taxRate":0.08,"lineTotal":{"subtotal":1000,"taxable":800,"tax":64,"discount":200,"remainder":0,"payable":864}},{"productId":"shipping","unitPrice":349,"taxRate":0,"quantity":1,"lineTotal":{"subtotal":349,"taxable":349,"tax":0,"discount":0,"remainder":0,"payable":349}},{"productId":"chocolate_bar","unitPrice":199,"taxRate":0.05,"quantity":1,"lineTotal":{"subtotal":199,"taxable":199,"tax":10,"discount":0,"remainder":0,"payable":209}}],"steps":[{"rail":"lightrail","valueId":"3016e3a6-b5d1-4fb9-a","contactId":"97df5ac2-5ac6-4ada-a","code":null,"balanceBefore":null,"balanceChange":-200,"balanceAfter":null,"usesRemainingBefore":null,"usesRemainingChange":null,"usesRemainingAfter":null},{"rail":"lightrail","valueId":"ba84cc86-a3d3-4c8e-b","contactId":"97df5ac2-5ac6-4ada-a","code":null,"balanceBefore":1000,"balanceChange":-1000,"balanceAfter":0,"usesRemainingBefore":null,"usesRemainingChange":null,"usesRemainingAfter":null},{"rail":"stripe","chargeId":"ch_1H4t6WCM9MOvFvZKMtHiIGtC","charge":{"id":"ch_1H4t6WCM9MOvFvZKMtHiIGtC","object":"charge","amount":422,"amount_refunded":0,"application":"ca_Bg76g9LV6IsnS40GKfnFrdlAOFohjAtz","application_fee":null,"application_fee_amount":null,"balance_transaction":"txn_1H4t6WCM9MOvFvZKGS41PXxr","billing_details":{"address":{"city":null,"country":null,"line1":null,"line2":null,"postal_code":null,"state":null},"email":null,"name":null,"phone":null},"calculated_statement_descriptor":"Stripe","captured":true,"created":1594752228,"currency":"usd","customer":null,"description":null,"destination":null,"dispute":null,"disputed":false,"failure_code":null,"failure_message":null,"fraud_details":{},"invoice":null,"livemode":false,"metadata":{"lightrailTransactionId":"25052bff-490c-4a1d-9","lightrailTransactionSources":"[{\"rail\":\"lightrail\",\"valueId\":\"3016e3a6-b5d1-4fb9-a\"},{\"rail\":\"lightrail\",\"valueId\":\"ba84cc86-a3d3-4c8e-b\"}]","lightrailUserId":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"},"on_behalf_of":null,"order":null,"outcome":{"network_status":"approved_by_network","reason":null,"risk_level":"normal","risk_score":11,"seller_message":"Payment complete.","type":"authorized"},"paid":true,"payment_intent":null,"payment_method":"card_1H4t6WCM9MOvFvZKZv1eZb1d","payment_method_details":{"card":{"brand":"visa","checks":{"address_line1_check":null,"address_postal_code_check":null,"cvc_check":null},"country":"US","exp_month":7,"exp_year":2021,"fingerprint":"vnMoEG5eZVxSMPc7","funding":"credit","installments":null,"last4":"4242","network":"visa","three_d_secure":null,"wallet":null},"type":"card"},"receipt_email":null,"receipt_number":null,"receipt_url":"https://pay.stripe.com/receipts/acct_1BOVE6CM9MOvFvZK/ch_1H4t6WCM9MOvFvZKMtHiIGtC/rcpt_HeBTnctl0eZccqaLIEPxDtUHJCekJxq","refunded":false,"refunds":{"object":"list","data":[],"has_more":false,"total_count":0,"url":"/v1/charges/ch_1H4t6WCM9MOvFvZKMtHiIGtC/refunds"},"review":null,"shipping":null,"source":{"id":"card_1H4t6WCM9MOvFvZKZv1eZb1d","object":"card","address_city":null,"address_country":null,"address_line1":null,"address_line1_check":null,"address_line2":null,"address_state":null,"address_zip":null,"address_zip_check":null,"brand":"Visa","country":"US","customer":null,"cvc_check":null,"dynamic_last4":null,"exp_month":7,"exp_year":2021,"fingerprint":"vnMoEG5eZVxSMPc7","funding":"credit","last4":"4242","metadata":{},"name":null,"tokenization_method":null},"source_transfer":null,"statement_descriptor":null,"statement_descriptor_suffix":null,"status":"succeeded","transfer_data":null,"transfer_group":null},"amount":-422}],"paymentSources":[{"rail":"lightrail","contactId":"97df5ac2-5ac6-4ada-a"},{"rail":"stripe","source":"tok_visa"}],"pending":false,"metadata":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)

    You cannot checkout if the balance of all Values does not cover the `lineItems` and there is no credit card to charge (if `allowRemainder` is not `true`).

    + Attributes (StripeRestError)

    + Body

            {
                "statusCode": 409,
                "message": "Insufficient balance for the transaction.",
                "messageCode": "InsufficientBalance"
            }

+ Response 409 (application/json)

    Idempotency error: you cannot create use a Transaction `id` more than once, for the same or a different Transaction request.
    
    + Attributes (RestError)

    + Body

            {
                "statusCode": 409,
                "message": "A Lightrail transaction with transactionId 'transac-12345' already exists.",
                "messageCode": "TransactionExists"
            }

+ Response 409 (application/json)

    Stripe minimum charge error: Stripe will not process charges for less than $0.50 USD ([or equivalent](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts)). This error can be triggered in a split tender transaction if the customer does not have quite enough balance in their account or on their gift card. You can handle this error by forgiving the small charge and setting `forgiveSubMinAmount=true` on the Stripe source, asking your customer to top up their account balance, or by adding a "minimum credit card amount fee" line item to the order that covers the difference. 
    
    + Body

            {
                "statusCode": 409,
                "message": "The transaction cannot be processed because it contains a Stripe charge (45) below the minimum (50).  Please see the documentation on `allowRemainder` and `source.forgiveSubMinCharges` or create a fee to raise the total charge.",
                "messageCode": "StripeAmountTooSmall",
                "amount": 45,
                "minAmount": 50
            }
### Debit [POST /transactions/debit]

Debit (remove an amount from) a Lightrail payment source.  Debiting is simpler and less powerful than checkout.  It does not apply the promotion logic of `balanceRules`, or calculate discounts or taxes.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice. IDs may not contain leading or trailing whitespace.
        + source (LightrailTransactionParty, required) - The payment rail to debit.  Only `lightrail` rails that refer to a specific Value are supported.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + amount (number) - The amount to debit.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        + uses (number) - The number of `usesRemaining` to debit.  Defaults to 0.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        + simulate (boolean, optional) - If `true` the Transaction is simulated and no changes take place. If the Transaction is repeated with `simulate=false` it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If `true` the Transaction will go through using whatever amount is available: this might not cover the full amount of the Transaction. The remainder (i.e. amount still owing) will be indicated.
        + pending (boolean, optional) - If `true` the Transaction is created as pending for the default duration. The pending duration can be customized by passing in an ISO duration string instead of a boolean. A pending Transaction will be automatically [voided](#reference/0/transactions/void-pending) after the pending duration if not [captured](#reference/0/transactions/capture-pending).
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {"id":"a4c44450-2d0f-4afa-8","source":{"rail":"lightrail","valueId":"4daf0a32-485a-4e24-b"},"amount":1000,"currency":"USD","metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"}}
    
+ Response 201 (application/json)

    + Attributes (Transaction)

    + Body

            {"id":"a4c44450-2d0f-4afa-8","transactionType":"debit","currency":"USD","createdDate":"2020-07-14T18:43:46.000Z","tax":null,"totals":{"remainder":0},"lineItems":null,"steps":[{"rail":"lightrail","valueId":"4daf0a32-485a-4e24-b","contactId":null,"code":null,"balanceBefore":3000,"balanceChange":-1000,"balanceAfter":2000,"usesRemainingBefore":null,"usesRemainingChange":null,"usesRemainingAfter":null}],"paymentSources":null,"pending":false,"metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"},"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)

    You cannot debit a Value by more balance than is available (if `allowRemainder` is not `true`).

    + Attributes (RestError)

    + Body

            {
                "statusCode": 409,
                "message": "Insufficient balance for the transaction.",
                "messageCode": "InsufficientBalance"
            }
### Credit [POST /transactions/credit]

Credit (add an amount to) a Lightrail payment destination.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice. IDs may not contain leading or trailing whitespace.
        + destination (LightrailTransactionParty, required) - The rail to credit.  Only `lightrail` rails that refer to a specific Value are supported.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + amount (number, optional) - The amount to credit.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        + uses (number, optional) - The number of `usesRemaining` to add.  Defaults to 0.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        + simulate (boolean, optional) - If `true` the Transaction is simulated and no changes take place. If the Transaction is repeated with `simulate=false` it is not guaranteed to behave the same way as the underlying Values can change.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {"id":"040bad23-94d6-45d1-9","destination":{"rail":"lightrail","valueId":"4daf0a32-485a-4e24-b"},"amount":2500,"currency":"USD","metadata":{"note":"Frequent buyer bonus"}}
    
+ Response 201 (application/json)

    + Attributes (Transaction)

    + Body

            {"id":"040bad23-94d6-45d1-9","transactionType":"credit","currency":"USD","createdDate":"2020-07-14T18:43:46.000Z","tax":null,"totals":null,"lineItems":null,"steps":[{"rail":"lightrail","valueId":"4daf0a32-485a-4e24-b","contactId":null,"code":null,"balanceBefore":500,"balanceChange":2500,"balanceAfter":3000,"usesRemainingBefore":null,"usesRemainingChange":null,"usesRemainingAfter":null}],"paymentSources":null,"pending":false,"metadata":{"note":"Frequent buyer bonus"},"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Transfer [POST /transactions/transfer]

Transfer value from a Lightrail or Stripe payment source to a Lightrail payment destination.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice. IDs may not contain leading or trailing whitespace.
        + source (LightrailTransactionParty, StripeTransactionParty, required) - The payment rail to debit.  Must be a `stripe` or `lightrail` rail that refers to a specific Value.
        + destination (LightrailTransactionParty, required) - The payment rail to credit. Must refer to a single `lightrail` Value.
        + amount (number, required) - The amount to transfer, > 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If `true` the Transaction is simulated and no changes take place. If the Transaction is repeated with `simulate=false` it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If `true` the Transaction will go through using whatever amount is available: this might not cover the full amount of the Transaction. The remainder (i.e. amount still owing) will be indicated.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {"id":"ab8de97a-fcca-4b87-a","source":{"rail":"lightrail","valueId":"ba383328-84ae-46d2-9"},"destination":{"rail":"lightrail","valueId":"d1d90578-c088-47ee-a"},"amount":100,"currency":"USD","metadata":{"reference":"customer request to move funds. ref: #4948173593"}}

+ Response 201 (application/json)

    + Attributes (Transaction)

    + Body

            {"id":"ab8de97a-fcca-4b87-a","transactionType":"transfer","currency":"USD","createdDate":"2020-07-14T18:43:51.000Z","tax":null,"totals":{"remainder":0},"lineItems":null,"steps":[{"rail":"lightrail","valueId":"ba383328-84ae-46d2-9","contactId":null,"code":null,"balanceBefore":500,"balanceChange":-100,"balanceAfter":400,"usesRemainingBefore":null,"usesRemainingChange":null,"usesRemainingAfter":null},{"rail":"lightrail","valueId":"d1d90578-c088-47ee-a","contactId":null,"code":null,"balanceBefore":500,"balanceChange":100,"balanceAfter":600,"usesRemainingBefore":null,"usesRemainingChange":null,"usesRemainingAfter":null}],"paymentSources":null,"pending":false,"metadata":{"reference":"customer request to move funds. ref: #4948173593"},"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)

    You cannot transfer from a Value more balance than is available (if `allowRemainder` is not `true`).

    + Attributes (StripeRestError)

    + Body

            {
                "statusCode": 409,
                "message": "Insufficient balance for the transaction.",
                "messageCode": "InsufficientBalance"
            }
### Reverse [POST /transactions/{id}/reverse]

Reverses any balance changes, usesRemaining changes and Stripe charges of a Transaction. Reverse adds a Transaction to the [Transaction Chain](#reference/0/transactions/get-transaction-chain).

Reversing a Transaction is not possible when: the Transaction is pending (must be voided or captured), one of the Values is frozen, the Transaction is a transfer from one Value to another and there is insufficient balance to reverse it.

+ Parameter
    + id (string, required) - The ID of any Transaction to reverse. 

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice. IDs may not contain leading or trailing whitespace.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.
     
    + Body

            {"id":"cf46b73f-70d9-45bb-a"}

+ Response 201 (application/json)
    + Attributes (Transaction)

    + Body

            {"id":"cf46b73f-70d9-45bb-a","transactionType":"reverse","currency":"USD","createdDate":"2020-07-14T18:43:49.000Z","tax":{"roundingMode":"HALF_EVEN"},"totals":{"subtotal":-1548,"tax":-74,"discount":-200,"discountLightrail":-200,"payable":-1422,"paidLightrail":-1000,"paidStripe":-422,"paidInternal":0,"remainder":0,"forgiven":0},"lineItems":null,"steps":[{"rail":"lightrail","valueId":"3016e3a6-b5d1-4fb9-a","contactId":"97df5ac2-5ac6-4ada-a","code":null,"balanceBefore":null,"balanceChange":200,"balanceAfter":null,"usesRemainingBefore":null,"usesRemainingChange":null,"usesRemainingAfter":null},{"rail":"lightrail","valueId":"ba84cc86-a3d3-4c8e-b","contactId":"97df5ac2-5ac6-4ada-a","code":null,"balanceBefore":0,"balanceChange":1000,"balanceAfter":1000,"usesRemainingBefore":null,"usesRemainingChange":null,"usesRemainingAfter":null},{"rail":"stripe","chargeId":"ch_1H4t6WCM9MOvFvZKMtHiIGtC","charge":{"id":"re_1H4t6XCM9MOvFvZKO7dPgH3K","object":"refund","amount":422,"balance_transaction":"txn_1H4t6XCM9MOvFvZKo9gmAIvB","charge":"ch_1H4t6WCM9MOvFvZKMtHiIGtC","created":1594752229,"currency":"usd","metadata":{"reason":"Being refunded as part of reverse transaction cf46b73f-70d9-45bb-a."},"payment_intent":null,"reason":null,"receipt_number":null,"source_transfer_reversal":null,"status":"succeeded","transfer_reversal":null},"amount":422}],"paymentSources":null,"pending":false,"metadata":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)

    A Transaction cannot be reversed if it requires moving more balance from a Value than is available.
    
    + Attributes (RestError)

    + Body

            {
                "statusCode": 409,
                "message": "Insufficient balance for the transaction.",
                "messageCode": "InsufficientBalance"
            }

+ Response 422 (application/json)

    A Transaction cannot be reversed if it is not the last Transaction in the Transaction Chain.
    
    + Attributes (RestError)

    + Body

            {
                "statusCode": 422,
                "message": "Cannot reverse Transaction that is not last in the Transaction Chain. See documentation for more information on the Transaction Chain.",
                "messageCode": "TransactionNotReversible"
            }
### Capture Pending [POST /transactions/{id}/capture]

Secures a pending Transaction and adds the capture to the [Transaction Chain](#reference/0/transactions/get-transaction-chain).  A pending Transaction is created when it is created with `pending=true`.  A pending Transaction will be automatically voided unless it is captured before the `pendingVoidDate`.

Capturing a pending Transaction is not possible when one of the Values is frozen.

+ Parameter
    + id (string) - the ID of the pending Transaction to capture.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
            
    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice. IDs may not contain leading or trailing whitespace.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.
        
    + Body
        
            {"id":"8593bea7-2c8c-4443-b"}
        
+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {"id":"8593bea7-2c8c-4443-b","transactionType":"capture","currency":"USD","createdDate":"2020-07-14T18:43:53.000Z","tax":null,"totals":null,"lineItems":null,"steps":[],"paymentSources":null,"pending":false,"metadata":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}

+ Response 409 (application/json)

    A Transaction cannot be captured if a Value in the Transaction is frozen.
    
    + Attributes (RestError)

    + Body

            {
                "statusCode": 409,
                "message": "Cannot capture Transaction because value 'transactionId' is frozen.",
                "messageCode": "ValueFrozen"
            }
### Void Pending [POST /transactions/{id}/void]

Releases a pending Transaction and adds the void to the [Transaction Chain](#reference/0/transactions/get-transaction-chain).  A pending Transaction is created when it is created with `pending=true`.  A pending Transaction will be automatically voided but voiding it manually releases the funds sooner.

+ Parameter
    + id (string) - the ID of the pending Transaction to void.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice. IDs may not contain leading or trailing whitespace.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.
        
    + Body
    
                {"id":"a3878861-0d78-46bf-b"}

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {"id":"a3878861-0d78-46bf-b","transactionType":"void","currency":"USD","createdDate":"2020-07-14T18:43:52.000Z","tax":{"roundingMode":"HALF_EVEN"},"totals":{"subtotal":-2576,"tax":-206,"discount":0,"discountLightrail":0,"payable":-2782,"paidLightrail":0,"paidStripe":-2782,"paidInternal":0,"remainder":0,"forgiven":0},"lineItems":null,"steps":[{"rail":"stripe","chargeId":"ch_1H4t6aCM9MOvFvZKe9NwXHjH","charge":{"id":"re_1H4t6bCM9MOvFvZKIFRXDHDp","object":"refund","amount":2782,"balance_transaction":null,"charge":"ch_1H4t6aCM9MOvFvZKe9NwXHjH","created":1594752233,"currency":"usd","metadata":{"reason":"not specified"},"payment_intent":null,"reason":null,"receipt_number":null,"source_transfer_reversal":null,"status":"succeeded","transfer_reversal":null},"amount":2782}],"paymentSources":null,"pending":false,"metadata":null,"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Get a Transaction [GET /transactions/{id}]

+ Parameter
    + id (string) - the ID of the Transaction to get.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {"id":"a4c44450-2d0f-4afa-8","transactionType":"debit","currency":"USD","createdDate":"2020-07-14T18:43:46.000Z","tax":null,"totals":{"remainder":0},"lineItems":null,"steps":[{"rail":"lightrail","valueId":"4daf0a32-485a-4e24-b","contactId":null,"code":null,"balanceBefore":3000,"balanceChange":-1000,"balanceAfter":2000,"usesRemainingBefore":null,"usesRemainingChange":null,"usesRemainingAfter":null}],"paymentSources":null,"pending":false,"metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"},"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
            
### Get Transaction Chain [GET /transactions/{id}/chain]

Get all Transactions in a Transaction Chain. 

A Transaction Chain is an ordered list of Transactions and results from creating Transactions that depend on another; such Transactions are [reverse](#reference/0/transactions/reverse), [capture pending](#reference/0/transactions/capture-pending) and [void pending](#reference/0/transactions/void-pending). The Transaction Chain can be retrieved using any Transaction ID in the chain and can be used to understand the current state of a Transaction.  

+ Parameter
    + id (string, required) - The ID of any Transaction in the chain to look up. 

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Transaction])

    + Body

            [{"id":"25052bff-490c-4a1d-9","transactionType":"checkout","currency":"USD","totals":{"subtotal":1548,"tax":74,"discount":200,"discountLightrail":200,"payable":1422,"paidLightrail":1000,"paidStripe":422,"paidInternal":0,"remainder":0,"forgiven":0},"lineItems":[{"productId":"socks","unitPrice":500,"quantity":2,"taxRate":0.08,"lineTotal":{"subtotal":1000,"taxable":800,"tax":64,"discount":200,"remainder":0,"payable":864}},{"productId":"shipping","unitPrice":349,"taxRate":0,"quantity":1,"lineTotal":{"subtotal":349,"taxable":349,"tax":0,"discount":0,"remainder":0,"payable":349}},{"productId":"chocolate_bar","unitPrice":199,"taxRate":0.05,"quantity":1,"lineTotal":{"subtotal":199,"taxable":199,"tax":10,"discount":0,"remainder":0,"payable":209}}],"paymentSources":[{"rail":"lightrail","contactId":"97df5ac2-5ac6-4ada-a"},{"rail":"stripe","source":"tok_visa"}],"steps":[{"rail":"lightrail","valueId":"3016e3a6-b5d1-4fb9-a","contactId":"97df5ac2-5ac6-4ada-a","code":null,"balanceBefore":null,"balanceAfter":null,"balanceChange":-200,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null},{"rail":"lightrail","valueId":"ba84cc86-a3d3-4c8e-b","contactId":"97df5ac2-5ac6-4ada-a","code":null,"balanceBefore":1000,"balanceAfter":0,"balanceChange":-1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null},{"rail":"stripe","amount":-422,"chargeId":"ch_1H4t6WCM9MOvFvZKMtHiIGtC","charge":{"id":"ch_1H4t6WCM9MOvFvZKMtHiIGtC","object":"charge","amount":422,"amount_refunded":0,"application":"ca_Bg76g9LV6IsnS40GKfnFrdlAOFohjAtz","application_fee":null,"application_fee_amount":null,"balance_transaction":"txn_1H4t6WCM9MOvFvZKGS41PXxr","billing_details":{"address":{"city":null,"country":null,"line1":null,"line2":null,"postal_code":null,"state":null},"email":null,"name":null,"phone":null},"calculated_statement_descriptor":"Stripe","captured":true,"created":1594752228,"currency":"usd","customer":null,"description":null,"destination":null,"dispute":null,"disputed":false,"failure_code":null,"failure_message":null,"fraud_details":{},"invoice":null,"livemode":false,"metadata":{"lightrailTransactionId":"25052bff-490c-4a1d-9","lightrailTransactionSources":"[{\"rail\":\"lightrail\",\"valueId\":\"3016e3a6-b5d1-4fb9-a\"},{\"rail\":\"lightrail\",\"valueId\":\"ba84cc86-a3d3-4c8e-b\"}]","lightrailUserId":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"},"on_behalf_of":null,"order":null,"outcome":{"network_status":"approved_by_network","reason":null,"risk_level":"normal","risk_score":11,"seller_message":"Payment complete.","type":"authorized"},"paid":true,"payment_intent":null,"payment_method":"card_1H4t6WCM9MOvFvZKZv1eZb1d","payment_method_details":{"card":{"brand":"visa","checks":{"address_line1_check":null,"address_postal_code_check":null,"cvc_check":null},"country":"US","exp_month":7,"exp_year":2021,"fingerprint":"vnMoEG5eZVxSMPc7","funding":"credit","installments":null,"last4":"4242","network":"visa","three_d_secure":null,"wallet":null},"type":"card"},"receipt_email":null,"receipt_number":null,"receipt_url":"https://pay.stripe.com/receipts/acct_1BOVE6CM9MOvFvZK/ch_1H4t6WCM9MOvFvZKMtHiIGtC/rcpt_HeBTnctl0eZccqaLIEPxDtUHJCekJxq","refunded":false,"refunds":{"object":"list","data":[],"has_more":false,"total_count":0,"url":"/v1/charges/ch_1H4t6WCM9MOvFvZKMtHiIGtC/refunds"},"review":null,"shipping":null,"source":{"id":"card_1H4t6WCM9MOvFvZKZv1eZb1d","object":"card","address_city":null,"address_country":null,"address_line1":null,"address_line1_check":null,"address_line2":null,"address_state":null,"address_zip":null,"address_zip_check":null,"brand":"Visa","country":"US","customer":null,"cvc_check":null,"dynamic_last4":null,"exp_month":7,"exp_year":2021,"fingerprint":"vnMoEG5eZVxSMPc7","funding":"credit","last4":"4242","metadata":{},"name":null,"tokenization_method":null},"source_transfer":null,"statement_descriptor":null,"statement_descriptor_suffix":null,"status":"succeeded","transfer_data":null,"transfer_group":null}}],"metadata":null,"tax":{"roundingMode":"HALF_EVEN"},"pending":false,"createdDate":"2020-07-14T18:43:47.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"},{"id":"cf46b73f-70d9-45bb-a","transactionType":"reverse","currency":"USD","totals":{"subtotal":-1548,"tax":-74,"discount":-200,"discountLightrail":-200,"payable":-1422,"paidLightrail":-1000,"paidStripe":-422,"paidInternal":0,"remainder":0,"forgiven":0},"lineItems":null,"paymentSources":null,"steps":[{"rail":"lightrail","valueId":"3016e3a6-b5d1-4fb9-a","contactId":"97df5ac2-5ac6-4ada-a","code":null,"balanceBefore":null,"balanceAfter":null,"balanceChange":200,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null},{"rail":"lightrail","valueId":"ba84cc86-a3d3-4c8e-b","contactId":"97df5ac2-5ac6-4ada-a","code":null,"balanceBefore":0,"balanceAfter":1000,"balanceChange":1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null},{"rail":"stripe","amount":422,"chargeId":"ch_1H4t6WCM9MOvFvZKMtHiIGtC","charge":{"id":"re_1H4t6XCM9MOvFvZKO7dPgH3K","object":"refund","amount":422,"balance_transaction":"txn_1H4t6XCM9MOvFvZKo9gmAIvB","charge":"ch_1H4t6WCM9MOvFvZKMtHiIGtC","created":1594752229,"currency":"usd","metadata":{"reason":"Being refunded as part of reverse transaction cf46b73f-70d9-45bb-a."},"payment_intent":null,"reason":null,"receipt_number":null,"source_transfer_reversal":null,"status":"succeeded","transfer_reversal":null}}],"metadata":null,"tax":{"roundingMode":"HALF_EVEN"},"pending":false,"createdDate":"2020-07-14T18:43:49.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

### List Transactions [GET /transactions{?limit}{?transactionType}{?createdDate}{?currency}{?valueId}]

+ Parameter
    + limit (number, optional) - The max number of items to get.
    + transactionType (string, optional) - Filter by the transactionType.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + createdDate (string, optional) - Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information.
    + currency (string, optional) - Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information.
    + valueId (string, optional) - Filter by Value ID used in the Transaction.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Link: <URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"
        
    + Attributes (array[Transaction])

    + Body

            [{"id":"a4c44450-2d0f-4afa-8","transactionType":"debit","currency":"USD","totals":{"remainder":0},"lineItems":null,"paymentSources":null,"steps":[{"rail":"lightrail","valueId":"4daf0a32-485a-4e24-b","contactId":null,"code":null,"balanceBefore":3000,"balanceAfter":2000,"balanceChange":-1000,"usesRemainingBefore":null,"usesRemainingAfter":null,"usesRemainingChange":null}],"metadata":{"note":"Reduce loyalty points after 3mo contact inactivity"},"tax":null,"pending":false,"createdDate":"2020-07-14T18:43:46.000Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]

# Group Advanced

## Currencies [/currencies]

A Currency is a unit of money in Lightrail.  It can be a standard currency such as `USD`, or a made up currency such as `FUNBUX`.  All currencies must be created before they are used, though they are typically created on initial setup in the web app.

### Create a Currency [POST /currencies]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + code (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`. Codes may not contain leading or trailing whitespace.
        + name (string, required) - Long name for the currency, eg: `Dollars`.
        + symbol (number, required) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, required) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

    + Body

            {
                "code": "USD",
                "name":"US Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
    
+ Response 201 (application/json)
    + Attributes (Currency)

    + Body
            
            {
                "code": "USD",
                "name": "US Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
### Get a Currency [GET /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to get.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (Currency)

    + Body

            {
                "code": "USD",
                "name": "US Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }

### List Currencies [GET /currencies]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (array[Currency])

    + Body

            [
                {
                    "code": "USD",
                    "name": "US Dollars",
                    "symbol": "$",
                    "decimalPlaces": 2
                }
            ]
### Update a Currency [PATCH /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to modify.

+ Request (application/json)

    Applies a JSON merge. Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. If present must match the code in the path.
        + name (string, optional) - Long name for the currency, eg: `Dollars`.
        + symbol (string, optional) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, optional) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.
        
    + Body
    
            {
                "name": "Zimbabwe Dollars",
                "symbol": "Z$"
            }
    
+ Response 200 (application/json)
    + Attributes (Currency)

    + Body
    
            {
                "code": "ZWD",
                "name": "Zimbabwe Dollars",
                "symbol": "Z$",
                "decimalPlaces": 2
            }
### Delete a Currency [DELETE /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to delete.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Currency that is in use.  If the Currency is referenced by a Value or Program those objects would need to be deleted first.  If the Currency is referenced by a Transaction it cannot be deleted because Transactions cannot be deleted.  Currencies in use can still be updated.
    
    + Attributes (RestError)

    + Body
    
            {
                "statusCode": 409,
                "message": "Currency 'USD' is in use.",
                "messageCode": "CurrencyInUse"
            }

## Webhooks [/webhooks]

Webhooks can notify your application when Lightrail events occur. They enable you to react to events and trigger additional workflows.

### Create Webhook [POST /webhooks]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - The ID of the webhook.
        + url (string, required) - The URL to send the event to.
        + events (array[string], required) - List of comma-separated events. The `'*'` wild card is supported: for example, use `'*'` to match all events or use `'lightrail.value.*'` to match all Value related events. You can view the full list of supported event types [here](https://www.lightrail.com/docs/#webhooks/supported-event-types).
        + active (boolean, optional) - If false, the Webhook will not send events.
        
    + Body

            {"id":"webhook1","url":"https://example.com/callbackUrl","events":["*"]}
    
+ Response 201 (application/json)
    + Attributes (Webhook)

    + Body
            
            {"id":"webhook1","url":"https://example.com/callbackUrl","events":["*"],"createdDate":"2020-07-14T18:43:54.646Z","updatedDate":"2020-07-14T18:43:54.646Z","secrets":[{"id":"70035525-e1bd-4864-8cbe-61552cf900e8","secret":"5C5SBBCCGPEC0QFO","createdDate":"2020-07-14T18:43:54.647Z"}],"createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST","active":true}
### Get Webhook [GET /webhooks/{id}]
+ Parameter
    + id (string) - The ID of the webhook.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Attributes (Webhook)
    
    + Body
            
            {"id":"webhook1","url":"https://example.com/callbackUrl","secrets":[{"id":"70035525-e1bd-4864-8cbe-61552cf900e8","secret":"\u20260QFO","createdDate":"2020-07-14T18:43:54.647Z"}],"events":["*"],"active":true,"createdDate":"2020-07-14T18:43:54.646Z","updatedDate":"2020-07-14T18:43:54.646Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
            

### List Webhooks [GET /webhooks]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Attributes (array[Webhook])
   
    + Body
            
            [{"id":"webhook1","url":"https://example.com/callbackUrl","secrets":[{"id":"70035525-e1bd-4864-8cbe-61552cf900e8","secret":"\u20260QFO","createdDate":"2020-07-14T18:43:54.647Z"}],"events":["*"],"active":true,"createdDate":"2020-07-14T18:43:54.646Z","updatedDate":"2020-07-14T18:43:54.646Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}]
### Update Webhook [PATCH /webhooks/{id}]
+ Parameter
    + id (string) - The ID of the webhook.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + url (string, required) - The URL to send the event to.
        + events (array[string], required) - List of comma-separated events. The `'*'` wild card is supported: for example, use `'*'` to match all events or use `'lightrail.value.*'` to match all Value related events. You can view the full list of supported event types [here](https://www.lightrail.com/docs/#webhooks/supported-event-types).
        + active (boolean, optional) - If false, the Webhook will not send events.
        
    + Body

            {"events":["lightrail.value.*"]}
    
+ Response 200 (application/json)
    + Attributes (Webhook)

    + Body
            
            {"id":"webhook1","url":"https://example.com/callbackUrl","secrets":[{"id":"70035525-e1bd-4864-8cbe-61552cf900e8","secret":"\u20260QFO","createdDate":"2020-07-14T18:43:54.647Z"}],"events":["lightrail.value.*"],"active":true,"createdDate":"2020-07-14T18:43:54.646Z","updatedDate":"2020-07-14T18:43:55.094Z","createdBy":"user-c0e4bc89ec714e6199199e8322459e2e-TEST"}
### Delete Webhook [DELETE /webhooks/{id}]
+ Parameter
    + id (string) - The ID of the webhook.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 204 (application/json)
### Get Secret [GET /webhooks/{id}/secrets/{secretId}]
+ Parameter
    + id (string) - The ID of the webhook.
    + secretId (string) - The ID of the secret.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Attributes (WebhookSecret)
   
    + Body
            
            {
              "id": "ae5ebfa3-69a9-4946-a17d-886f87ee69c9",
              "secret": "F5MUORROLVRSPGDP",
              "createdDate": "2020-03-26T20:48:01.251Z"
            }
### Create Secret [POST /webhooks/{id}/secrets]
+ Parameter
    + id (string) - The ID of the webhook.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 200 (application/json)
    + Attributes (WebhookSecret)
   
    + Body
            
            {
              "id": "ae5ebfa3-69a9-4946-a17d-886f87ee69c9",
              "secret": "F5MUORROLVRSPGDP",
              "createdDate": "2020-03-26T20:48:01.251Z"
            }
### Delete Secret [DELETE /webhooks/{id}/secrets/{secretId}]
+ Parameter
    + id (string) - The ID of the webhook.
    + secretId (string) -- The ID of the secret.

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>
    
+ Response 204 (application/json)


# Data Structures

## CodeGeneration (object)
+ length (number, required) - The number of random characters in the code.  This number must be at least 5 to accommodate a reasonable amount of randomness.
+ charset (string, optional) - The set of characters to use for the random part of the code.  Defaults to all numbers and upper case letters.
+ prefix (string, optional) - Text prepended before the random characters in the code. May not contain leading whitespace.
+ suffix (string, optional) - Text appended after the random characters in the code. May not contain trailing whitespace.

## Currency (object)
+ code (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ name (number) - Long name for the currency, eg: `Dollars`.
+ symbol (number) - Currency symbol used for formatting, eg: `$`.
+ decimalPlaces (number) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

## Contact (object)
+ id (string) - The ID you choose to represent the Contact.
+ firstName (string) - The Contact's first name.
+ lastName (string) - The Contact's last name.
+ email (string) - The Contact's email.
+ metadata (object) - Arbitrary data associated with the Contact.
+ createdDate (string) - Date when the Contact was created.
+ updatedDate (string) - Date when the Contact was last updated.

## Issuance (object)
+ id (string, required) - The ID you choose to represent the Issuance.  Two Issuances can't have the same ID, guaranteeing repeated calls won't create extra resources.
+ programId (string) - The ID of the program it was created from.
+ count (number) - The numbers of Values to issue. Must be between 1-1000.
+ balance (number) - The balance to set on each Value. This can be constrained by the Program's `minInitialBalance` and `maxInitialBalance` or must be in the `fixedInitialBalances` array.  
+ usesRemaining (number) - The usesRemaining to set on each Value. This can be restricted to Values defined by the Program's `fixedInitialUsesRemaining`.  
+ startDate (string) - Override the Program's startDate for the Value.
+ endDate (string) - Override the Program's endDate for the Value.
+ redemptionRule (Rule) - A Redemption Rule controlling when the Values can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
+ balanceRule (Rule) - A Rule controlling the effective balance of the Values in checkout. To use this `balance` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
+ metadata (object) - Arbitrary data associated with the Issuance.
+ createdDate (string) - Date of creation.
+ updatedDate (string) - Date of last update.

## LineItem (object)
+ type (string) - Must be either `product`, `shipping` or `fee`.
+ unitPrice (number, required) -  The unit price of the item.
+ productId (string) -  The ID of the product.
+ variantId (string) - The variant ID of a product. (Can be used to store SKU.)
+ quantity (number) -  The number of items. Defaults to 1 if not provided.
+ taxRate (number) - Tax rate for the item. This is needed when a Transaction contains items that have different tax rates.
+ marketplaceRate (number) - A number between 0 and 1 for the marketplace's commission rate. If this number is set on any lineItems then the `marketplace` section of totals will be calculated.
+ tags (array[string]) - A list of tags associated with the item. For example, 'seasonal' or 'clothing'.
+ metadata (object) - Any additional data you want to store for the item.

## LineItemResponse (LineItem)
+ lineTotal (LineTotal)

## LineTotal (object)
+ subtotal (number) - The total cost of the items. ie `unitPrice * quantity`.
+ taxable (number) - The taxable amount. ie `price - pretaxDiscount`.
+ tax (number) - The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding' by default.
+ discount (number) - The discount
+ sellerDiscount (number) - The amount of discount the seller is responsible for providing for the line item. Calculated if marketplaceRate is set on the line item and/or a Value with a discountSellerLiabilityRule is used to pay for the item.
+ remainder (number) - The amount remaining to be paid for the line item after the transaction has been processed. Will be 0 unless the transaction has `allowRemainder: true`.
+ payable (number) - The cost of the line item after tax and discounts have been applied.

## Program (object)
+ id (string) - The ID you choose to represent the Program.
+ name (string) - A human-readable name for the Program.
+ currency (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ discount (boolean) - If true Values created in the Program will be marked as a discount on checkout.
+ pretax (boolean) - If true the balance on Values created in the Program is applied on checkout before tax is calculated.
+ active (boolean) - Whether Values created in the Program are active and can be used upon creation.
+ redemptionRule (Rule) - A Redemption Rule controlling when Values created in the Program can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
+ balanceRule (Rule) - A Rule controlling the effective balance in checkout of Values created in the Program. To use this `minInitialBalance`, `maxInitialBalance` and `fixedInitialBalances` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
+ minInitialBalance (number) - 
+ maxInitialBalance (number) - 
+ fixedInitialBalances (array[number]) - A list of exact balances Values created in the Program can be created with.
+ fixedInitialUsesRemaining (number) - A list of exact usesRemaining the Value can be created with.
+ discountSellerLiability (number) - (Note: deprecated, please use discountSellerLiabilityRule.) Applies to Values created in the Program. In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Program must be a discount, ie `discount: true`.
+ startDate (string) - Earliest date that Values created in the Program can be active.
+ endDate (string) - Latest date that Values created in the Program can be active.
+ createdDate (string) - Date when the Program was created.
+ updatedDate (string) - Date when the Program was last updated.
+ metadata (object) - Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys.

## RestError (object)
+ statusCode (number) - the HTTP status code.
+ message (string) - an English explanation of the error.  This is for display purposes only as the explanation may be formatted or change between system updates.
+ messageCode (string) - A constant corresponding to the message.  This can be used to take action in response to the error.

## StripeRestError (RestError)
+ stripeError (object) - When using the `stripe` rail: the full error response from Stripe in case of an error charging a credit card.

## Rule (object)
+ rule (string) - the Lightrail Rule text of the rule.
+ explanation (string) - a description of the rule. You may choose to pass the explanation through to the end user.

## Tax (object)
+ roundingMode (string) - The rounding mode used for tax calculations. Modes: `"HALF_EVEN"`, `"HALF_UP"`. Defaults to `"HALF_EVEN"`, also known as bankers rounding, which is the standard for most financial calculations.

## Transaction (object)
+ id (string) - The ID you choose to represent the Transaction.
+ transactionType (string) - The type of the Transaction, eg: `debit`, `credit`, `checkout`...
+ currency (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ tax (Tax, optional) - Tax calculation details for checkout transactions. Will be `null` for other transaction types.
+ steps (array[LightrailTransactionStep, StripeTransactionStep, InternalTransactionStep]) - An array of Transaction steps. A Transaction may have steps from different payment rails (`lightrail` | `stripe` | `internal`), which will have different attributes.
+ totals (TransactionTotals) - Totals calculated for checkout transactions. Will be `null` for other transaction types.
+ lineItems (array[LineItemResponse]) - Data on each LineItem in a checkout transaction. Will be `null` for other transaction types.
+ paymentSources (array[LightrailTransactionParty, StripeTransactionParty, InternalTransactionParty]) - An array of payment sources used in a checkout transaction (will be `null` for other transaction types). Sources may be from different payment rails (`lightrail` | `stripe` | `internal`), which will have different attributes.
+ simulated (boolean) - If `true` the Transaction was simulated.
+ pending (boolean) - If `true` the Transaction was created as pending and does not complete until captured.  Not all transactionTypes can be created as pending.
+ pendingVoidDate (string) - Date after which the pending Transaction will be automatically [voided](#reference/0/transactions/void-pending).  It cannot be [captured](#reference/0/transactions/capture-pending) after this Date.
+ createdDate (string) - Date when the Transaction was created.
+ metadata (object) - Arbitrary data associated with the Transaction.

## TransactionTotals (object)
+ subtotal (number) - The sum of all products, services and fees before tax or discounts.
+ tax (number) - The amount of tax to be collected.
+ discount (number) - The total amount of discounts applied.
+ discountLightrail (number) - The amount discounted from Lightrail payment sources. 
+ payable (number) - The amount payable by the customer. Calculated as `payable = subtotal + tax - discount`.
+ paidLightrail (number) - The amount paid from Lightrail payment sources.
+ paidStripe (number) - The amount paid from Stripe payment sources.
+ paidInternal (number) - The amount paid from Internal payment sources.
+ remainder (number) - The amount still owing, if a remainder is allowed by setting `allowRemainder: true`.
+ forgiven (number) - The amount forgiven (will not be charged).  This happens when `forgiveSubMinAmount=true` and the amount is below the minimum a payment rail will process.
+ marketplace (TransactionTotalsMarketplace) - Marketplace totals calculated if any marketplace behaviour has been configured (by setting the LineItem `marketplaceRate`).

## TransactionTotalsMarketplace (object)
+ sellerDiscount (number) - The amount of discount the seller is responsible for providing (comes from Values with `discountSellerLiability` > 0).
+ sellerGross (number) - The amount payable to the seller before discounts.
+ sellerNet (number) - The amount payable to the seller after discounts.

## LightrailTransactionParty (object)
+ rail (string, required) - The payment rail: `lightrail`. Must be used in combination with one of the following identifiers.
+ code (string) - The code of a Gift Card or Promotion. As a convenience, leading/trailing whitespace will be trimmed from codes supplied for lookup or for charging in a Transaction.
+ contactId (string) - A Contact's ID.  This is shorthand for all Values that a Contact is associated with.
+ valueId (string) - A Value's ID.

## StripeTransactionParty (object)
+ rail (string, required) - The payment rail: `stripe`. Must be used in combination with a `source` or `customer` identifier.
+ source (string) - A tokenized credit card for Stripe.
+ customer (string) - A Stripe customer ID (uses customer's default source).
+ maxAmount (number, optional) - The maximum amount that can be charged to the given Stripe source.
+ minAmount (number, optional) - The minimum amount that can be charged to the given Stripe source.  If unset [Stripe's default for the currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts) will be used.  Setting a lower number is not recommended unless the settlement currency is different from the transaction currency.
+ forgiveSubMinAmount (boolean, optional) - If `true` charge amounts below `minAmount` will be forgiven (not charged so that the transaction may complete).  This amount will be tracked in the response `totals.forgiven`.  Has no effect if the top level `allowRemainder=true`.
+ additionalStripeParams (AdditionalStripeChargeParams, optional) - Additional parameters passed to Stripe when creating a charge.  See [Stripe's documentation](https://stripe.com/docs/api) for more information.

## InternalTransactionParty (object)
+ rail (string, required) - The payment rail: `internal`.
+ internalId (string, required) - The ID of the internal value.
+ balance (number, required) - The amount of internal value stored.
+ beforeLightrail (boolean, optional) - If true this value is applied before Lightrail Values, otherwise it will be applied after (default: false).

## AdditionalStripeChargeParams (object)
+ application_fee (string)
+ application_fee_amount (number)
+ description (string)
+ on_behalf_of (string)
+ receipt_email (string)
+ shipping (AdditionalStripeChargeParams_Shipping)
+ statement_descriptor (string)
+ transfer_group (string)

## `AdditionalStripeChargeParams_Shipping` (object)
+ address (AdditionalStripeChargeParams_Shipping_Address)
+ carrier (string)
+ name (string)
+ phone (string)
+ tracking_number (string)

## `AdditionalStripeChargeParams_Shipping_Address` (object)
+ city (string)
+ country (string)
+ line1 (string)
+ line2 (string)
+ postal_code (string)
+ state (string)

## LightrailTransactionStep (object)
+ rail (string) - The payment rail: `lightrail`.
+ valueId (string) - The id of the Value transacted with.
+ currency (string) - The currency of the Value transacted with.
+ contactId (string) - The ID of the Contact associated with the Value.
+ code (string) - The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`.
+ balanceBefore (number) - The `balance` of the Value before the Transaction.  `null` when the Value does not have a `balance` (and thus has a `balanceRule`).
+ balanceAfter (number) - The `balance` of the Value after the Transaction.  `null` when the Value does not have a `balance` (and thus has a `balanceRule`).
+ balanceChange (number) - The net change of the `balance` of the Value for the Transaction.  When the Value has a `balanceRule` rather than a `balance` this number will still be set to indicate the value of the rule.
+ usesRemainingBefore (number) - The `usesRemaining` of the Value before the Transaction.  `null` when the Value does not have a `usesRemaining`.
+ usesRemainingAfter (number) - The `usesRemaining` of the Value after the Transaction.  `null` when the Value does not have a `usesRemaining`.
+ usesRemainingChange (number) - The net change of the `usesRemaining` of the Value for the Transaction.

## StripeTransactionStep (object)
+ rail (string) - The payment rail: `stripe`.
+ amount (number) - the amount of the charge.
+ chargeId (string) - the ID of the Stripe charge.
+ charge (object) - the Stripe Charge object, if applicable.

## InternalTransactionStep (object)
+ rail (string) - The payment rail: `internal`.
+ internalId (string) - the ID of the internal value transacted with.
+ balanceBefore (number) - The balance of the internal value before the Transaction.
+ balanceAfter (number) - The balance of the internal value after the Transaction.
+ balanceChange (number) - The net change of the balance of the internal value for the Transaction.

## Value (object)
+ id (string) - The ID you choose to represent the Value.
+ programId (string) - 
+ currency (string) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ contactId (string) - The ID of the Contact that has claimed this Value.
+ code (string) - The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`.
+ isGenericCode (boolean) - If `true` the code is to be shared publicly and not secret. If `false` the code is treated as a secret. Defaults to false if not provided.
+ genericCodeOptions (GenericCodeOptions)
+ balance (number) - The amount of money available in a Value. This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500. For generic codes that have a `perContact.balance` the `balance` can control maximum liability and will be drawn down by the `perContact.balance` when attached to a Contact.
+ usesRemaining (number) - The number of times the Value can be used in checkout. When this number reaches 0 the Value can no longer be used in checkout. For generic codes that have a `perContact.usesRemaining` the `usesRemaining` can control maximum uses and will be drawn down by the `perContact.usesRemaining` when attached to a Contact.
+ active (boolean) - Whether the Value is active and can be used upon creation.
+ frozen (boolean) - If `true` the Value is frozen.  When frozen new Transactions cannot be created; pending Transactions can be voided.
+ canceled (boolean) - If `true` the Value is canceled.  When canceled new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
+ pretax (boolean) - If `true` the Value's balance is applied on checkout before tax is calculated.
+ discount (boolean) - If `true` the Value will be marked as a discount on checkout.
+ discountSellerLiability (number) - (Note: deprecated, please use discountSellerLiabilityRule.) In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Value must be a discount, ie `discount: true`.
+ discountSellerLiabilityRule (Rule) - In a marketplace, can be set as a rule that'll evaluate to a number between 0 and 1 for the ratio of the discount the seller is liable for. Examples: `{"rule": "0", "explanation": "marketplace 100% liable"}`, `{"rule": "1", "explanation": "seller 100% liable"}`, `{"rule": "1 - currentLineItem.marketplaceRate", "explanation": "liability proportionally shared based on lineItem's marketplaceRate"}`. Note, the Value must be a discount (`discount: true`).
+ redemptionRule (Rule) - A Redemption Rule controlling when the Value can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
+ balanceRule (Rule) - A Rule controlling the effective balance of the Value in a Checkout. To use this `balance` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md).
+ startDate (string) - Date when the Value becomes available.
+ endDate (string) - Date when the Value expires.  When expired new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
+ metadata (object) - Arbitrary data associated with the Value.
+ createdDate (string) - Date of creation.
+ updatedDate (string) - Date of last update.
+ updatedContactIdDate (string) - Date of the last contactId update (Contact attached).

## GenericCodeOptions (object)
+ perContact (PerContact, required) - Properties determining what the Value is worth to each Contact. If set, the generic code cannot be used anonymously: it must be attached to a Contact first or a `contactId` must be provided with the `code` in checkout.

## PerContact (object)
+ balance (number, optional) - The balance, as an integer in the smallest unit of currency, available to each Contact that the code is attached to. If an overall balance is set on the Value, the `perContact.balance` will be subtracted from the overall `balance` each time the Value is attached. This allows the Value's `balance` to be used as a liability control and represents the total amount that can be spent in checkout.
+ usesRemaining (number, optional) - The usesRemaining available to each Contact that the code is attached to. If an overall usesRemaining is set on the Value, the perContact.usesRemaining will be subtracted from the overall usesRemaining each time the Value is attached. This allows the Value's `usesRemaining` to be used as a liability control and represents how many times the generic code can be used in total.

## Webhook (object)
+ id (string) - The ID of the webhook.
+ url (string) - The URL to send the event to.
+ events (array[string]) - List of comma-separated events. The `'*'` wild card is supported: for example, use `'*'` to match all events or use `'lightrail.value.*'` to match all Value related events. You can view the full list of supported event types [here](https://www.lightrail.com/docs/#webhooks/supported-event-types).
+ secrets (array[WebhookSecret]) - A list of secrets used for the signed header signature.
+ active (boolean) - If false, the Webhook will not send events.
+ createdDate (string) - Date of creation.
+ updatedDate (string) - Date of last update.
+ createdBy (string) - The ID of the user who created the webhook.

## WebhookSecret (object)
+ id (string) - The ID of the secret.
+ secret (string) - The webhook's secret which is used to generate the header signature on event deliveries. This allows you to validate the event was sent by Lightrail.
+ createdDate (string) - The date the secret was created.