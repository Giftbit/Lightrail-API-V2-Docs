FORMAT: 1A
HOST: https://api.lightrail.com/v2/

# Lightrail Documentation
Welcome to Lightrail V2. Incentivize with promotions and loyalty programs, enable gift cards and collect payment all in one unified checkout solution.

## Customers [/customers/]

---
### Create Customer [POST /customers]

Create a new Customer.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + customerId (string, required) - Unique idempotent ID for the Customer.
        + firstName (string, optional) - The Customer's first name.
        + lastName (string, optional) - The Customer's last name.
        + email (string, optional) - The Customer's email.
        + metadata (string, optional) - Arbitrary data associated with the Customer.

    + Body

            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                }
            }
    
+ Response 200
    + Attributes
        + customerId (string, required) - Unique idempotent ID for the Customer.
        + firstName (string, optional) - The Customer's first name.
        + lastName (string, optional) - The Customer's last name.
        + email (string, optional) - The Customer's email.
        + metadata (string, optional) - Arbitrary data associated with the Customer.
        + createdDate (string, required) - ISO date for when the Customer was created.
        + updatedDate (string, required) - ISO date for when the Customer was last updated.

    + Body
            
            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Update Customer [PUT /customers/{customerId}]

Update a Customer by customerId.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + customerId (string, required) - Unique idempotent ID for the Customer.
        + firstName (string, optional) - The Customer's first name.
        + lastName (string, optional) - The Customer's last name.
        + email (string, optional) - The Customer's email.
        + metadata (string, optional) - Arbitrary data associated with the Customer.

    + Body

            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                }
            }
            
+ Parameter
    + customerId (string) - the customerId of the Customer to update.
    
+ Response 200
    + Attributes
        + customerId (string, required) - Unique idempotent ID for the Customer.
        + firstName (string, optional) - The Customer's first name.
        + lastName (string, optional) - The Customer's last name.
        + email (string, optional) - The Customer's email.
        + metadata (string, optional) - Arbitrary data associated with the Customer.
        + createdDate (string, required) - ISO date for when the Customer was created.
        + updatedDate (string, required) - ISO date for when the Customer was last updated.

    + Body
            
            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
            }
### Delete Customer [DELETE /customers/{customerId}]

Delete Customer by customerId.  The customer can only be deleted if it is not associated with any ValueStores.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + customerId (string) - the customerId of the Customer to delete.

+ Response 200

    + Body

            {
                "success": true
            }
### Get Customers [GET /customers{?limit}{?offset}{?firstName}{?lastName}{?email}{?minCreatedDate}{?maxCreatedDate}{?minUpdatedDate}{?maxUpdatedDate}]

Get multiple Customers.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + firstName (string, optional) - Filter by the firstName.
    + lastName (string, optional) - Filter by the lastName.
    + email (string, optional) - Filter by the email.
    + minCreatedDate (string, optional) - Filter by the minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.
    + minUpdatedDate (string, optional) - Filter by the minimum updatedDate, inclusive.
    + maxUpdatedDate (string, optional) - Filter by the maximum updatedDate, inclusive.
    
+ Response 200
    + Attributes
        + count (number, required) - The number of items returned.
        + limit (number, required) - The max number of items to get.
        + offset (number, required) - The number of items to skip.
        + maxLimit (number, required) - The `limit` available`.
        + transactions (array[Customer], required) - the list of Customers.

    + Body

            {
                "count": 1,
                "limit": 100,
                "offset": 0,
                "maxLimit": 1000,
                "customers": [
                    {
                        "customerId": "unique-id-123",
                        "firstName": "Jeffrey",
                        "lastName": "Lebowski",
                        "email": "thedude@example.com",
                        "metadata": {
                            "alias": "El Duderino"
                        },
                        "createdDate": "2018-04-17T23:20:08.404Z",
                        "updatedDate": "2018-04-17T23:20:08.404Z"
                    }
                ]
            }

### Get Customer [GET /customers/{customerId}]

Get Customer by customerId.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + customerId (string) - the customerId of the Customer to get.

+ Response 200
    + Attributes
        + customerId (string, required) - Unique idempotent ID for the Customer.
        + firstName (string, optional) - The Customer's first name.
        + lastName (string, optional) - The Customer's last name.
        + email (string, optional) - The Customer's email.
        + metadata (string, optional) - Arbitrary data associated with the Customer.
        + createdDate (string, required) - ISO date for when the Customer was created.
        + updatedDate (string, required) - ISO date for when the Customer was last updated.

    + Body

            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

## Transactions [/transactions/]

---
### Create Order [POST /transactions/orders]

Data used in example:

Purchasing: 
 - 2x $5 socks (8% tax rate)
 - 1x $1.99 chocolate bar  (5% tax rate)
 - 1x $3.49 shipping (0% tax rate)
 
 Payment Sources:
 - Customer with prepaid account, and a sock and chocolate bar promotion.
    - Account has $20.
    - Sock promo is for 20% off retail price of socks.
    - Chocolate bar promo is a $0.50 credit towards the purchase of a chocolate bar.
- Generic code for 10% off orders over $5 (does not apply to shipping). 


Notes:

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + lineItems (array[LineItem])
        + sources (array[TransactionParty])
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all value being debited, and the remainder indicated.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.
        
    + Body 
    
            {
                "transactionId": "unique-id-123",
                "currency": "USD",
                "lineItems": [
                    {
                        "type": "product",
                        "productId": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2
                    },
                    {
                        "type": "product",
                        "productId": "pid_41234", 
                        "unitPrice": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar."
                    },
                    {
                        "type": "shipping",
                        "productId": "standard-shipping",
                        "unitPrice": 349,
                        "taxRate": 0
                    }
                ],
                "sources": [
                    {
                        "rail": "lightrail",
                        "customerEmail": "alice@example.com"
                    },
                    {
                        "rail": "lightrail",
                        "code": "SAVE10PERCENT"
                    }
                ]
            }
    
+ Response 200
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + transactionType (string, required) - `order`
        + lineItems (array[LineItemResponse])
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The remainder of value that could not be debited.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - ISO date for when the Transaction was created.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body
    
            {
                "transactionId": "unique-id-123",
                "currency": "USD",
                "subtotal": 1548,   // can we group these?  maybe with line items?
                "discount": 350,    // maybe with payment sources? they all kind of
                "tax": 67,          // break down the same total in different ways.
                "payable": 1265,    //            
                "lineItems": [
                    {
                        "type": "product",
                        "id": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "tags": ["clothing"],
                        "quantity": 2,
                        "promotions": [
                            {
                                "valueStoreId": "2018-alice-socks-promo",
                                "rule": "item.productId == "pid_12345'",
                                "ruleExplanation": "Socks 20% discount",
                                "amount": 200,
                                "pretax": true
                            },
                            {
                                "valueStoreId": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": 80,
                                "pretax": true
                            }
                        ],
                        "lineTotal": {
                            "price": 1000,
                            "pretaxDiscount": 280,
                            "taxable": 720,
                            "tax": 58,
                            "postTaxDiscount": 0,
                            "payable": 778
                        }  
                    },
                    {
                        "type": "product",
                        "id": "pid_41234", 
                        "unitPrice": 199,
                        "taxRate": 0.05, 
                        "tags": ["food"],
                        "promotions": [
                            {
                                "valueStoreId": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": 20,
                                "pretax": true
                            },
                            {
                                "valueStoreId": "2018-50cent-chocobar-credit",
                                "rule": "item.productId == "pid_41234",
                                "ruleExplanation": "50 cents towards chocolate bars.",
                                "amount": 50,
                                "pretax": false
                            }
                        ],
                        "lineTotal": {
                            "price": 199,
                            "pretaxDiscount": 20,
                            "taxable": 179,
                            "tax": 9,
                            "postTaxDiscount: 50,
                            "payable": 138
                        }
                    },
                    {
                        "type": "shipping",
                        "id": "standard-shipping", 
                        "unitPrice": 349,
                        "taxRate": 0, 
                        "promotions": [
                        ],
                        "lineTotal": {
                            "price": 349,
                            "pretaxDiscount": 0,
                            "taxable": 349,
                            "tax": 0,
                            "postTaxDiscount: 0,
                            "payable": 349
                        }
                    }                    
                ],
                "paymentSources": [
                    {
                        "rail": "lightrail",
                        "customerEmail": "alice@example.com",
                        "valueStores": [
                            "alice-account-USD", "2018-alice-socks-promo", "2018-50cent-chocobar-credit"
                        ]
                    },
                    {
                        "rail": "lightrail",
                        "code": "SAVE10PERCENT",
                        "valueStores": [
                            "2018-10percent-off-over-5-orders"
                        ]
                    }
                ],
                "steps": [
                    {
                        "valueStoreId": "2018-alice-socks-promo",
                        "valueChange": -200,
                        "valueAfter": null,
                        "type": "PROMOTION"
                    },
                    {
                        "valueStoreId": "2018-10percent-off-over-5-orders",
                        "valueChange": -100,
                        "valueAfter": null,
                        "type": "PROMOTION"
                    },
                    {
                        "valueStoreId": "2018-50cent-chocobar-credit",
                        "valueChange": -50,
                        "valueAfter": null,
                        "type": "PROMOTION"
                    },
                    {
                        "valueStoreId": "alice-account-USD",
                        "valueChange": -1265,
                        "valueAfter": 735,
                        "type": "PREPAID"
                    }
                ]
            }

### Debit [POST /transactions/debit]

Debit (remove value from) a payment rail.

Use cases:
- Manual fixing of an account balance
- Clearing all value from an account (choose a large value and set `allowRemainder` to `true`)

Note:
- Throws error if posted against a valueStore with `valueType: percentOff` or `valueType: valueOff`

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + source (TransactionParty, required) - The rail to debit.  Only `lightrail` rails that refer to a specific ValueStore are supported.
        + amount (number, required) - The amount to credit, > 0.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all value being debited, and the remainder indicated.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "valueStoreId": "vs_1"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo customer inactivity"
                }
            }
    
+ Response 200
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + transactionType (string, required) - `debit`
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The remainder of value that could not be debited.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - ISO date for when the Transaction was created.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "currency": "loyalty-bucks",
                "steps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "valueStoreType": "ACCOUNT",
                        "currency": "XXX",
                        "valueBefore": 5500,
                        "valueAfter": 3000,
                        "valueChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo customer inactivity"
                }
            }

### Credit [POST /transactions/credit]

Credit (add value to) a payment rail.

Use cases:
- Customer service giving account credit
- Partial refunding of a transaction

Note:
- Throws error if posted against a valueStore with `valueType: percentOff` or `valueType: valueOff`

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + destination (TransactionParty, required) - The rail to credit.  Only `lightrail` rails that refer to a specific ValueStore are supported.
        + amount (number, required) - The amount to debit, > 0.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "destination": {
                    "rail": "lightrail",
                    "valueStoreId": "vs_1"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }
    
+ Response 200
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + transactionType (string, required) - `credit`
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - `0`
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - ISO date for when the Transaction was created.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "transactionType": "credit",
                "steps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "valueStoreType": "ACCOUNT",
                        "currency": "XXX",
                        "valueBefore": 1500,
                        "valueAfter": 4000,
                        "valueChange": 2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }

### Transfer [POST /transactions/transfer]

Transfer value from one value store to another.

Note:
- Throws error if either valueStore specified has `valueType: percentOff` or `valueType: valueOff`

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + source (TransactionParty, required) - The rail to take value from.  Only `lightrail` rails that refer to a specific ValueStore are supported.
        + destination (TransactionParty, required) - The rail to send value to.  Only `lightrail` rails that refer to a specific ValueStore are supported.
        + amount (number, required) - The amount to transfer, > 0.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all value being debited, and the remainder indicated.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "valueStoreId": "vs_1"
                },
                "destination": {
                    "rail": "lightrail",
                    "valueStoreId": "alice-account-USD"
                },
                "amount": 2500,
                "currency": "USD",
                "metadata": {
                    "reference": "frequent-shopper-bonus-072301"
                }
            }

+ Response 200
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + transactionType (string, required) - `transfer`
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The remainder of value that could not be debited.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - ISO date for when the Transaction was created.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "transactionSteps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "valueStoreType": "GIFT_CARD",
                        "currency": "USD",
                        "valueBefore": 2500,
                        "valueAfter": 0,
                        "valueChange": -2500
                    },
                    {
                        "rail": "lightrail",
                        "valueStoreId": "alice-account-USD",
                        "valueStoreType": "ACCOUNT",
                        "currency": "USD",
                        "valueBefore": 5000,
                        "valueAfter": 7500,
                        "valueChange": 2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "reference": "loyalty-bonus-072301"
                }
            }

### Get Transactions [GET /transactions{?limit}{?offset}{?transactionType}{?minCreatedDate}{?maxCreatedDate}]

Get multiple Transactions.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + transactionType (string, optional) - Filter by the transactionType.
    + minCreatedDate (string, optional) - Filter by the minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.

+ Response 200
    + Attributes
        + count (number, required) - The number of items returned.
        + limit (number, required) - The max number of items to get.
        + offset (number, required) - The number of items to skip.
        + maxLimit (number, required) - The `limit` available`.
        + transactions (array[Transaction], required) - the list of transactions.

    + Body

            {
                "count": 1,
                "limit": 100,
                "offset": 0,
                "maxLimit": 1000,
                "transactions": [
                    {
                        "transactionId": "unique-id-123",
                        "currency": "loyalty-bucks",
                        "steps": [
                            {
                                "rail": "lightrail",
                                "valueStoreId": "vs_1",
                                "valueStoreType": "ACCOUNT",
                                "currency": "XXX",
                                "valueBefore": 5500,
                                "valueAfter": 3000,
                                "valueChange": -2500
                            }
                        ],
                        "remainder": 0,
                        "simulated": false,
                        "metadata": {
                            "note": "Reduce loyalty points after 3mo customer inactivity"
                        }
                    }
                ]
            }

### Get Transaction [GET /transactions/{transactionId}]

Get Transaction by transactionId.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + transactionId (string) - the transactionId of the Transaction to get.

+ Response 200
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + transactionType (string, required) - The type of the transaction, eg: `debit`, `credit`, `order`...
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The remainder of value that could not be debited.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - ISO date for when the Transaction was created.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "currency": "loyalty-bucks",
                "steps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "valueStoreType": "ACCOUNT",
                        "currency": "XXX",
                        "valueBefore": 5500,
                        "valueAfter": 3000,
                        "valueChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo customer inactivity"
                }
            }

## ValueStores [/valueStores/]

### Value Store Types

From investigating transactions with multiple payment sources (gift cards, accounts, promotions, etc) that operate on shopping carts the following properties were identified in order for payment resolution.

```
ValueStore:
- type of value: 
    - dollar or points value (points is just a different currency). 
    - percent off
- appliesTo:  
    - item 
    - cart
- pretax: 
    - true
    - false
- uses:
    - 1 to unlimted
- type: Usable by biz. Might only affect ordering of pretax=false ValueStores.   
    - GIFT_CARD
    - ACCOUNT (maybe loyalty point becomes a thing)
    - PROMOTION (maybe VOUCHER becomes a thing)
```   

The following table, looks at the primary types of ValueStore in the system and provides sensible defaults for these properties.

<table style="width:100%">
  <tr>
    <th>type</th>
    <th>accessed by</th> 
    <th>type of value</th>
    <th>uses</th>
    <th>pretax</th>
    <th>appliesTo</th>
    <th>exclusivity</th>
    <th>assumptions</th>
  </tr>
  <tr>
    <td>Promotion</td>
    <td>unique code<br> 
        generic code<br> 
        customer</td> 
    <td>$ value<br> 
        % off (100% off can represent units)</td>
    <td>1+ or unlimited</td>
    <td>true<br>
        false</td>
    <td>cart<br> 
        items</td> 
    <td>can be limited</td>
    <td></td>
  </tr>
  <tr>
    <td>Gift Card</td>
    <td>unique code<br> 
        customer</td> 
    <td>$ value</td>
    <td>unlimited</td>
    <td>false</td>
    <td>cart</td> 
    <td>not limited</td>
    <td>GC is sent: interaction between 2 customers</td>
  </tr>
  <tr>
    <td>Account</td>
    <td>customer</td> 
    <td>$ value</td>
    <td>unlimited</td>
    <td>false</td>
    <td>cart</td> 
    <td>not limited</td>
    <td>maybe one account per customer per currency?</td>
  </tr>
  <tr>
    <td>Loyalty Point (probably just an account in a different currency)</td>
    <td>customer</td> 
    <td>$ value</td>
    <td>unlimited</td>
    <td>false</td>
    <td>cart</td> 
    <td>not limited</td>
    <td>-accrues on purchase<br>-converted to account $ or redeemable for units<br>-Conversion rate?<br>-Linked to membership tiers: get more points per purchase at higher tiers</td>
  </tr>
  <tr>
    <td>Voucher (functionally this is just a promotion)</td>
    <td></td> 
    <td></td>
    <td></td>
    <td></td>
    <td></td> 
    <td></td>
    <td>This might be how customers view a promotion that is sent C to C</td>
  </tr>
</table>

---
### Create an Account [POST /valueStores/accounts]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.\
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + value (number, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + expires (string, optional) - The expiry in ISO-8601
        + active (boolean, optional) - 
        
    + Body 
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500,
                "accessedBy": [
                    {
                        "customerId": "cus_123"
                    }
                ]
            }
    
+ Response 200

    + Body
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500, 
                "type": "ACCOUNT",
                "pretax": false,
                "appliesTo": "cart",
                "expires": "never",
                "active": true,
                "accessedBy": [
                    {
                        "customerId": "cus_123"        
                    },
                    {
                        "customerId": "cus_456"        
                    }
                ]
            }

### Create Gift Card [POST /valueStores/giftCards]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.\
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + value (number, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + expires (string, optional) - The expiry in ISO-8601
        + active (boolean, optional) - 
        
    + Body 
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500,
                "accessedBy": [
                    {
                        "code": "MY-OWN-CODE"
                    }
                ]
            }
    
+ Response 200

    + Body
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500, 
                "type": "GIFT_CARD",
                "accessedBy": [
                    {
                        "code": "MY-OWN-CODE"        
                    }
                ]
            }

### Create a Promotion [POST /valueStores/promotions]

Notes:
Sort of a strange relationship between `appliesTo: "item"` and the redemption rule. How do we know the rule actually relates to an item. 
What if the rule is if the transaction is over $50? Parsing rules to understand them seems somewhat infeasible.   


+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.\
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + value (number, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + expires (string, optional) - The expiry in ISO-8601
        + active (boolean, optional) - 
        + appliesTo (string, required) - "cart" or "item". or maybe: "item": { SOME_IDENTIFIER: SOME_VALUE } 
        + pretax (string, optional) - Determines whether the promotion should apply before or after tax.
        
    + Body 
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500,
                "accessedBy": [
                    {
                        "customerId": "cus_123"        
                    }
                ],
                "appliesTo": "item",
                "rule": "transaction.lineItems.item.id == pid_123",
                "pretax": true,
                "uses": 1,
                "limitation": "ONE_PER_ITEM"
            }
    
+ Response 200

    + Body
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500, 
                "type": "PROMOTION",
                "pretax": true,
                "appliesTo": "item",
                "expires": "never",
                "active": true,
                "accessedBy": [
                    {
                        "customerId": "cus_123"        
                    }
                ]
            }

# Data Structures

## Customer (object)
+ customerId (string, required) - Unique idempotent ID for the Customer.
+ firstName (string, optional) - The Customer's first name.
+ lastName (string, optional) - The Customer's last name.
+ email (string, optional) - The Customer's email.
+ metadata (string, optional) - Arbitrary data associated with the Customer.
+ createdDate (string, required) - ISO date for when the Customer was created.
+ updatedDate (string, required) - ISO date for when the Customer was last updated.
## LineItem (object)
+ type (string, required) - Must be either `product`, `shipping` or `fee`.
+ productId (string, optional) - The ID of the product. 
+ variantId (string, optional) - The variant ID of a product. (Can be used to store SKU.)
+ unitPrice (number, required) - The unit price of the item. 
+ quantity (number, optional) - The number of items. Defaults to 1 if not provided. 
+ taxRate (number, optional) - Tax rate for the item. This is needed when a transaction contains items that have different tax rates.
+ tags (array[string], optional) - A list of tags associated with the item. For example, "seasonal" or "clothing".
+ metadata (object, optional) - Any additional data you want to store for the item.

## LineItemResponse (LineItem)
+ promotions (array[LineItemPromotions])
+ lineTotal (LineTotal)

## LineItemPromotions (object)
+ valueStoreId (string) - The ID of the ValueStore.
+ rule (string) - The redemption rule.
+ ruleExplanation (string) - Description of the rule.
+ amount (number) - How value of the promotion.
+ pretax (boolean) - Whether the ValueStore applies before or after tax.

## LineTotal (object)
+ price (number) - The total cost of the items. ie `unitPrice * quantity`.
+ pretaxDiscount (number) - The discount before tax is calculated.
+ taxable (number) - The taxable amount. ie `price - pretaxDiscount`.
+ tax (number) - The taxable amount multiplied by the taxRate for the item. Uses "bankers rounding".
+ postTaxDiscount (number) - The discount after tax has been added.
+ payable (number) - The cost of the line item after tax and discounts have been applied.
## Transaction (object)
+ transactionId (string, required) - Unique idempotent ID for the Transaction.
+ transactionType (string, required) - The type of the transaction, eg: `debit`, `credit`, `order`...
+ steps (array[TransactionStep], required) - An array of transaction steps.
+ remainder (number, required) - The remainder of value that could not be debited.
+ simulated (boolean, optional) - True if the transaction was simulated.
+ createdDate (string, required) - ISO date for when the Transaction was created.
+ metadata (object, optional) - Arbitrary data associated with the Transaction.
## TransactionStep (object)
A step taken as part of the transaction.
+ rail (string, required) - Indicates the payment rail. Must be either `lightrail`, `stripe` or `internal`.

## LightrailTransactionStep (TransactionStep)
+ rail (string, required) - `lightrail`
+ valueStoreId (string, required) - the valueStoreId of the ValueStore transacted with.
+ valueStoreType (string, required) - the valueStoreType of the ValueStore transacted with.
+ currency (string, required) - the currency of the ValueStore transacted with.
+ customerId (string, optional) - the customerId of the Customer associated with the ValueStore.
+ codeLastFour (string, optional) - the last 4 digits of the code the ValueStore was accessed with.
+ valueBefore (number, required) - the value of the ValueStore before the transaction.
+ valueAfter (number, required) - the value of the ValueStore after the transaction.
+ valueChange (number, required) - the net change of the ValueStore for the transaction.

## StripeTransactionStep (TransactionStep)
+ rail (string, required) - `stripe`
+ amount (number, required) - the amount of the charge.
+ chargeId (string, optional) - the ID of the Stripe charge, if applicable.
+ charge (object, optional) - the Stripe Charge object, if applicable.

## InternalTransactionStep (TransactionStep)
+ rail (string, required) - `internal`
+ id (string, required) - the ID of the internal value store transacted with.
+ valueBefore (number, required) - the value of the ValueStore before the transaction.
+ valueAfter (number, required) - the value of the ValueStore after the transaction.
+ valueChange (number, required) - the net change of the ValueStore for the transaction.

<!-- TODO Decide between these two approaches of documenting this concept -->
## PaymentSource (object)
+ rail (string, required) - The payment rail. Must belong to `[lightrail, stripe]`. Must be used in combination with one of the following identifiers.
+ customerId (string, optional) - The customerId in Lightrail.
+ code (string, optional) - The code of a gift card or promotion.
+ valueStoreId (string, optional) - The ID of a ValueStore.
+ cardToken (string, optional) - A tokenized credit card for Stripe.  
## TransactionParty (object)
A partner in the transaction; either a source or a destination for value.  Some TransactionParty objects refer to a single specific account and some may be capable of referring to multiple accounts.
+ rail (string, required) - Indicates the payment rail. Must be either `lightrail`, `stripe` or `internal`.

## LightrailValueStoreIdTransactionParty (TransactionParty)
+ rail (string, required) - `lightrail`
+ valueStoreId (string, required) - the ValueStore's valueStoreId to transact with.

## LightrailCodeTransactionParty (TransactionParty)
+ rail (string, required) - `lightrail`
+ code (string, required) - the ValueStore's code to transact with.

## LightrailCustomerIdTransactionParty (TransactionParty)
This refers to *all* ValueStores associated with the customer.
+ rail (string, required) - `lightrail`
+ customerId (string, required) - the Customer's customerId.

## StripeTransactionParty (TransactionParty)
+ rail (string, required) - `stripe`
+ token (string, required) - the Stripe token.

## InternalTransactionParty (TransactionParty)
Represents an existing storage for value outside of Lightrail.  This value store can be debited for up to its total value.  The Lightrail system cannot protect against double billing for this value store so manual precautions must be taken.

This is intended as a stop gap solution while transitioning from a legacy system.

+ rail (string, required) - `internal`
+ id (string, required) - the ID of the value.
+ value (number, required) - the amount of value.
+ appliedFirst (boolean, optional) - if true this value store is applied before Lightrail ValueStores, otherwise it will be applied after.