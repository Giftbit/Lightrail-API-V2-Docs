FORMAT: 1A
HOST: https://api.lightrail.com/v1/

# Lightrail Documentation
Welcome to Lightrail V2. Incentivize with promotions and loyalty programs, enable gift cards and collect payment all in one unified checkout solution.

## Value Store Types

```
ValueStore:
- "type of value" - $ value, % off
- appliesTo: "item" | "cart"
- preTax: boolean;
- type: "GIFT_CARD", "ACCOUNT", "PROMOTION" // doesn't really matter
```

<table style="width:100%">
  <tr>
    <th>type</th>
    <th>accessed by</th> 
    <th>type of value</th>
    <th>uses</th>
    <th>preTax</th>
    <th>appliesTo</th>
    <th>exclusivity</th>
    <th>assumptions</th>
  </tr>
  <tr>
    <td>Promotion</td>
    <td>unique code<br> 
        generic code<br> 
        customer</td> 
    <td>$ value<br> 
        % off (100% off can represent units)</td>
    <td>1+ or unlimited</td>
    <td>true<br>
        false</td>
    <td>cart<br> 
        items</td> 
    <td>can be limited</td>
    <td></td>
  </tr>
  <tr>
    <td>Gift Card</td>
    <td>unique code<br> 
        customer</td> 
    <td>$ value</td>
    <td>unlimited</td>
    <td>false</td>
    <td>cart</td> 
    <td>not limited</td>
    <td>GC is sent: interaction between 2 customers</td>
  </tr>
  <tr>
    <td>Account</td>
    <td>customer</td> 
    <td>$ value</td>
    <td>unlimited</td>
    <td>false</td>
    <td>cart</td> 
    <td>not limited</td>
    <td>maybe one account per customer per currency?</td>
  </tr>
  <tr>
    <td>Loyalty Point (probably just an account in a different currency)</td>
    <td>customer</td> 
    <td>$ value</td>
    <td>unlimited</td>
    <td>false</td>
    <td>cart</td> 
    <td>not limited</td>
    <td>-accrues on purchase<br>-converted to account $ or redeemable for units<br>-Conversion rate?<br>-Linked to membership tiers: get more points per purchase at higher tiers</td>
  </tr>
  <tr>
    <td>Voucher (functionally this is just a promotion)</td>
    <td></td> 
    <td></td>
    <td></td>
    <td></td>
    <td></td> 
    <td></td>
    <td>This might be how customers view a promotion that is sent C to C</td>
  </tr>
</table>

## Transactions [/transactions/]

---
### Debit [POST /transactions/debit]

Data used in example:

Purchasing: 
 - 2x $5 socks (8% tax rate)
 - 1x $1.99 chocolate bar  (5% tax rate)
 - 1x $3.49 shipping (0% tax rate)
 
 Payment Sources:
 - Customer with prepaid account, and a sock and chocolate bar promotion.
    - Account has $20.
    - Sock promo is for 20% off retail price of socks.
    - Chocolate bar promo is a $0.50 credit towards the purchase of a chocolate bar.
- Generic code for 10% off orders over $5 (does not apply to shipping). 


Notes:
- Throws error if posted against a valueStore with `valueType: percentOff` or `valueType: valueOff`
- *Isn't this endpoint actually something like `/orders/create`? Should there be a `/transactions/debit` for a single valueStore than corresponds to `/transactions/credit`?*

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + transactionId (string, required) - Unique idempotent id for the Transaction.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD, CAD but can also be any branded currency ie `megabucks`.
        + lineItems (array[LineItem])
        
    + Body 
    
            {
                "transactionId": "unique-id-123",
                "currency": "USD",
                "lineItems": [
                    {
                        "type": "product",
                        "id": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2
                    },
                    {
                        "type": "product",
                        "id": "pid_41234", 
                        "unitPrice": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar."
                    },
                    {
                        "type": "shipping",
                        "id": "standard-shipping",
                        "unitPrice": 349,
                        "taxRate": 0
                    }
                ],
                "paymentSources": [
                    {
                        "rail": "lightrail",
                        "customerEmail": "alice@example.com"
                    },
                    {
                        "rail": "lightrail",
                        "code": "SAVE10PERCENT"
                    }
                ]
            }
    
+ Response 200
    + Attributes
        + lineItems (array[LineItemResponse])

    + Body
    
            {
                "transactionId": "unique-id-123",
                "currency": "USD",
                "subtotal": 1548,
                "discount": 350,
                "tax": 67,
                "payable": 1265,                
                "lineItems": [
                    {
                        "type": "product",
                        "id": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2,
                        "promotions": [
                            {
                                "type": "ITEM_DISCOUNT",
                                "valueStoreId": "2018-alice-socks-promo",
                                "ruleExplanation": "Socks 20% discount",
                                "amount": 200,
                                "pretax": true
                            },
                            {
                                "type": "CART_DISCOUNT",
                                "valueStoreId": "2018-10percent-off-over-5-orders",
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": 80,
                                "pretax": true
                            }
                        ],
                        "lineTotal": {
                            "price": 1000,
                            "preTaxDiscount": 280,
                            "taxable": 720,
                            "tax": 58,
                            "postTaxDiscount": 0,
                            "payable": 778
                        }  
                    },
                    {
                        "type": "product",
                        "id": "pid_41234", 
                        "unitCost": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar.",
                        "promotions": [
                            {
                                "type": "CART_DISCOUNT",
                                "valueStoreId": "2018-10percent-off-over-5-orders",
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": 20,
                                "pretax": true
                            },
                            {
                                "type": "ITEM_DISCOUNT",
                                "valueStoreId": "2018-50cent-chocobar-credit",
                                "ruleExplanation": "50 cents towards chocolate bars.",
                                "amount": 50,
                                "pretax": false
                            }
                        ],
                        "lineTotal": {
                            "price": 199,
                            "preTaxDiscount": 20,
                            "taxable": 179,
                            "tax": 9,
                            "postTaxDiscount: 50,
                            "payable": 138
                        }
                    },
                    {
                        "type": "shipping",
                        "id": "standard-shipping", 
                        "unitCost": 349,
                        "taxRate": 0, 
                        "promotions": [
                        ],
                        "lineTotal": {
                            "price": 349,
                            "preTaxDiscount": 0,
                            "taxable": 349,
                            "tax": 0,
                            "postTaxDiscount: 0,
                            "payable": 349
                        }
                    }                    
                ],
                "paymentSources": [
                    {
                        "rail": "lightrail",
                        "customerEmail": "alice@example.com",
                        "valueStores": [
                            "alice-account-USD", "2018-alice-socks-promo", "2018-50cent-chocobar-credit"
                        ]
                    },
                    {
                        "rail": "lightrail",
                        "code": "SAVE10PERCENT",
                        "valueStores": [
                            "2018-10percent-off-over-5-orders"
                        ]
                    }
                ],
                "transactionSteps": [
                    {
                        "valueStoreId": "2018-alice-socks-promo",
                        "amount": -200,
                        "type": "PROMOTION"
                    },
                    {
                        "valueStoreId": "2018-10percent-off-over-5-orders",
                        "amount": -100,
                        "type": "PROMOTION"
                    },
                    {
                        "valueStoreId": "2018-50cent-chocobar-credit",
                        "amount": -50,
                        "type": "PROMOTION"
                    },
                    {
                        "valueStoreId": "alice-account-USD",
                        "amount": -1265,
                        "type": "PREPAID"
                    }
                ]
            }

### Credit [POST /transactions/credit]

Use cases:
- Crediting an account
-

Note:
- Throws error if posted against a valueStore with `valueType: percentOff` or `valueType: valueOff`


---
+ Request (application/json)
    + Headers

        Authorization: Bearer <API_KEY>

    + Attributes
        + transactionId (string, required) - Unique idempotent id for the Transaction.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD, CAD but can also be any branded currency ie `megabucks`.
        + amount (integer, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.
        + metadata (object, optional) - Arbitrary data associated with the transaction

    + Body

            {
                "transactionId": "unique-id-123",
                "currency": "USD",
                "amount": 2500,
                "valueStoreId": "vs_1"
            }
    
+ Response 200
    + Attributes
        + transactionId (string, required) - Unique idempotent id for the Transaction.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD, CAD but can also be any branded currency ie `megabucks`.
        + amount (integer, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.

    + Body

            {
                "transactionId": "unique-id-123",
                "currency": "USD",
                "amount": 2500
                "valueStoreId": "vs_1"
            }

### Transfer [POST /transactions/transfer]

Note:
- Throws error if either valueStore specified has `valueType: percentOff` or `valueType: valueOff`


---
+ Request (application/json)
    + Headers

        Authorization: Bearer <API_KEY>

    + Attributes
        + transactionId (string, required) - Unique idempotent id for the Transaction.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD, CAD but can also be any branded currency ie `megabucks`.
        + amount (integer, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + from (string, required) - Unique idempotent id for the ValueStore.
        + to (string, required) - Unique idempotent id for the ValueStore.
        + metadata (object, optional) - Arbitrary data associated with the transaction

    + Body

            {
                "transactionId": "unique-id-123",
                "currency": "USD",
                "amount": 2500,
                "from": "vs_1",
                "to": "alice-account-USD"
            }

+ Response 200
    + Attributes
        + transactionId (string, required) - Unique idempotent id for the Transaction.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD, CAD but can also be any branded currency ie `megabucks`.
        + amount (integer, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.

    + Body

            {
                "transactionId": "unique-id-123",
                "currency": "USD",
                "amount": 2500,
                "from": "vs_1",
                "to": "alice-account-USD"
            }

## ValueStores [/valueStores/]

---
### Create an Account [POST /valueStores/accounts]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.\
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD, CAD but can also be any branded currency ie `megabucks`.
        + value (number, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + expires (string, optional) - The expiry in ISO-8601
        + active (boolean, optional) - 
        
    + Body 
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500,
                "accessedBy": [
                    {
                        "customerId": "cus_123"
                    }
                ]
            }
    
+ Response 200

    + Body
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500, 
                "type": "ACCOUNT",
                "preTax": false,
                "appliesTo": "cart",
                "expires": "never",
                "active": true,
                "accessedBy": [
                    {
                        "customerId": "cus_123"        
                    },
                    {
                        "customerId": "cus_456"        
                    }
                ]
            }

### Create Gift Card [POST /valueStores/giftCards]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.\
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD, CAD but can also be any branded currency ie `megabucks`.
        + value (number, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + expires (string, optional) - The expiry in ISO-8601
        + active (boolean, optional) - 
        
    + Body 
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500,
                "accessedBy": [
                    {
                        "code": "MY-OWN-CODE"
                    }
                ]
            }
    
+ Response 200

    + Body
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500, 
                "type": "GIFT_CARD",
                "accessedBy": [
                    {
                        "code": "MY-OWN-CODE"        
                    }
                ]
            }

### Create a Promotion [POST /valueStores/accounts]

Notes:
Sort of a strange relationship between `appliesTo: "item"` and the redemption rule. How do we know the rule actually relates to an item. 
What if the rule is if the transaction is over $50? Parsing rules to understand them seems somewhat infeasible.   


+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.\
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD, CAD but can also be any branded currency ie `megabucks`.
        + value (number, required) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + expires (string, optional) - The expiry in ISO-8601
        + active (boolean, optional) - 
        + appliesTo (string, required) - "cart" or "item". or maybe: "item": { SOME_IDENTIFIER: SOME_VALUE } 
        + preTax (string, optional) - Determines whether the promotion should apply before or after tax.
        
    + Body 
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500,
                "accessedBy": [
                    {
                        "customerId": "cus_123"        
                    }
                ],
                "appliesTo": "item",
                "rule": "transaction.lineItems.item.id == pid_123",
                "preTax": true,
                "uses": 1,
                "limitation": "ONE_PER_ITEM"
            }
    
+ Response 200

    + Body
    
            {
                "valueStoreId": "vs-1",
                "currency": "USD",
                "value": 2500, 
                "type": "PROMOTION",
                "preTax": true,
                "appliesTo": "item",
                "expires": "never",
                "active": true,
                "accessedBy": [
                    {
                        "customerId": "cus_123"        
                    }
                ]
            }

# Data Structures

## LineItem (object)
+ type (string, required) - Must be either `product`, `shipping`, or `tax`.
+ productId (string, optional) - If the type is `product` productId must be provided.
+ unitCost (number, required) - The unit cost of the item. 
+ quantity (number, optional) - The number of items. Defaults to 1 if not provided. 
+ taxRate (number, optional) - Tax rate for the item. This is needed when a transaction contains items that have different tax rates.
+ description (string, optional) - Description for the item.

## LineItemResponse (LineItem)
+ someNewField (string) - Blah blah blah