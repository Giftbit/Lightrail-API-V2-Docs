FORMAT: 1A
HOST: https://api.lightrail.com/v2/

# Lightrail Documentation
Welcome to Lightrail V2. Incentivize with promotions and loyalty programs, enable gift cards and collect payment all in one unified checkout solution.

## Customers [/customers/]

Customers are the people or businesses who buy products or services from you.  They're identified by a unique `customerId`.

---
### Create Customer [POST /customers]

Create a new Customer.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + customerId (string, required) - Unique idempotent ID for the Customer.
        + firstName (string, optional) - The Customer's first name.
        + lastName (string, optional) - The Customer's last name.
        + email (string, optional) - The Customer's email.
        + metadata (object, optional) - Arbitrary data associated with the Customer.

    + Body

            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                }
            }
    
+ Response 200
    + Attributes (Customer)

    + Body
            
            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Update Customer [PUT /customers/{customerId}]

Update a Customer by customerId.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + customerId (string, required) - Unique idempotent ID for the Customer.
        + firstName (string, optional) - The Customer's first name.
        + lastName (string, optional) - The Customer's last name.
        + email (string, optional) - The Customer's email.
        + metadata (string, optional) - Arbitrary data associated with the Customer.

    + Body

            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                }
            }
            
+ Parameter
    + customerId (string) - the customerId of the Customer to update.
    
+ Response 200
    + Attributes (Customer)

    + Body
            
            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
            }
### Delete Customer [DELETE /customers/{customerId}]

Delete a Customer by customerId.

The customer can only be deleted if it is not associated with any ValueStores.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + customerId (string) - the customerId of the Customer to delete.

+ Response 200

    + Body

            {
                "success": true
            }
### Get Customers [GET /customers{?limit}{?offset}{?firstName}{?lastName}{?email}{?minCreatedDate}{?maxCreatedDate}{?minUpdatedDate}{?maxUpdatedDate}]

Get multiple Customers.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + firstName (string, optional) - Filter by the firstName.
    + lastName (string, optional) - Filter by the lastName.
    + email (string, optional) - Filter by the email.
    + minCreatedDate (string, optional) - Filter by the minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.
    + minUpdatedDate (string, optional) - Filter by the minimum updatedDate, inclusive.
    + maxUpdatedDate (string, optional) - Filter by the maximum updatedDate, inclusive.
    
+ Response 200
    + Attributes
        + count (number, required) - The number of items returned.
        + limit (number, required) - The max number of items to get.
        + offset (number, required) - The number of items to skip.
        + maxLimit (number, required) - The `limit` available`.
        + customers (array[Customer], required) - the list of Customers.

    + Body

            {
                "count": 1,
                "limit": 100,
                "offset": 0,
                "maxLimit": 1000,
                "customers": [
                    {
                        "customerId": "unique-id-123",
                        "firstName": "Jeffrey",
                        "lastName": "Lebowski",
                        "email": "thedude@example.com",
                        "metadata": {
                            "alias": "El Duderino"
                        },
                        "createdDate": "2018-04-17T23:20:08.404Z",
                        "updatedDate": "2018-04-17T23:20:08.404Z"
                    }
                ]
            }

### Get Customer [GET /customers/{customerId}]

Get Customer by customerId.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + customerId (string) - the customerId of the Customer to get.

+ Response 200
    + Attributes (Customer)

    + Body

            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

## Programs [/programs/]

Programs act as a template to set properties of ValueStores for the type of value you wish to issue. 
A few common examples of the types of value you may want to issue and define as Programs are:
- Gift cards
- Accounts, points 
- Promotions  

See [here](http://localhost:8181/docs) to see examples of how you'd create a Program for the common types listed above.

---
### Create Program [POST /programs]

Create a new Program.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + programId (string, required) - Unique idempotent ID for the Program.
        + name (string, optional) - A human-readable name for the Program.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + access (enum[string], required) - How the valueStores can be accessed
            + `customerId` - must be associated with a customerId.
            + `secureCode` - a code is generated or supplied and is stored securely.
            + `publicCode` - a code is generated or supplied and can be displayed.
        + discount (boolean, optional) - If true the Value Store will be noted as a discount for the customer in orders.
        + preTax (boolean, optional) - If true the Value Store's value is applied before tax is calculated.
        + active (boolean, optional) - Whether the ValueStore is active and can be used upon creation.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value Store can be used in an order.
        + valueRule (number, optional) - A Value Rule controlling the value of the ValueStore in an Order.  To use this `value` must be set to `null`.
        + minInitialValue (number, optional) - The minimum value the Value Store can be created with.
        + maxInitialValue (number, optional) - The maximum value the Value Store can be created with.
        + fixedInitialValues (array[number], optional) - A list of values the Value Store can be created with.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (number, optional) - Arbitrary data associated with the Program.

    + Body

            {
                "programId": "unique-id-123",
                "name": "Giftcard programm",
                "currency": "CAD",
                "access": "generatedCode",
                "fixedInitialValues": [
                    500,
                    1500,
                    2500
                ]
            }
    
+ Response 200
    + Attributes (Customer)

    + Body
            
            {
                "programId": "unique-id-123",
                "name": "Giftcard programm",
                "currency": "CAD",
                "access": "generatedCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialValue": null,
                "maxInitialValue": null,
                "fixedInitialValues": [
                    500,
                    1500,
                    2500
                ],
                "uses": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Update a Program [PATCH /programs/{programId}]

Update fields that are sent and leave unspecified values at their default.

Value Stores that have already been created will not be changed.

+ Parameter
    + programId (string) - the programId of the Program to modify.

+ Request (application/merge-patch+json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + programId (string, optional) - Unique idempotent ID for the Program.  If present must match the programId in the path.
        + active (boolean, optional) - Whether the ValueStore is active and can be used upon creation.
        + minInitialValue (number, optional) - The minimum value the Value Store can be created with.
        + maxInitialValue (number, optional) - The maximum value the Value Store can be created with.
        + fixedInitialValues (array[number], optional) - A list of values the Value Store can be created with.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (number, optional) - Arbitrary data associated with the Program.
        
    + Body
    
            {
                "tags": ["internal"]
            }
    
+ Response 200
    + Attributes (Program)

    + Body
    
            {
                "programId": "unique-id-123",
                "name": "Giftcard programm",
                "currency": "CAD",
                "access": "generatedCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialValue": null,
                "maxInitialValue": null,
                "fixedInitialValues": [
                    500,
                    1500,
                    2500
                ],
                "uses": null,
                "tags": ["internal"],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Get Programs [GET /programs{?limit}{?offset}{?programId}{?currency}{?access}{?discount}{?preTax}{?active}{?minUses}{?maxUses}{?tags}{?minCreatedDate}{?maxCreatedDate}{?minUpdatedDate}{?maxUpdatedDate}]

Get multiple Value Stores.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + programId (string, optional) - Filter by programId.
    + currency (string, optional) - Filter by currency.
    + access (string, optional) - Filter by access.
    + discount (string, optional) - Filter by discount.
    + preTax (string, optional) - Filter by preTax.
    + active (boolean, optional) - Filter active/inactive.
    + minUses (number, optional) - Filter by minimum uses, inclusive.
    + maxUses (number, optional) - Filter by maximum uses, inclusive.
    + tags (number, optional) - Filter by tags.
    + minCreatedDate (string, optional) - Filter by he minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.
    + minUpdatedDate (string, optional) - Filter by the minimum updatedDate, inclusive.
    + maxUpdatedDate (string, optional) - Filter by the maximum updatedDate, inclusive.
    
+ Response 200
    + Attributes
        + count (number, required) - The number of items returned.
        + limit (number, required) - The max number of items to get.
        + offset (number, required) - The number of items to skip.
        + maxLimit (number, required) - The `limit` available`.
        + programs (array[Program], required) - the list of Programs.

    + Body

            {
                "count": 1,
                "limit": 100,
                "offset": 0,
                "maxLimit": 1000,
                "programs": [
                    {
                        "programId": "unique-id-123",
                        "name": "Giftcard programm",
                        "currency": "CAD",
                        "access": "generatedCode",
                        "discount": "false",
                        "preTax": "false",
                        "active": "true",
                        "redemptionRule": null,
                        "valueRule": null,
                        "minInitialValue": null,
                        "maxInitialValue": null,
                        "fixedInitialValues": [
                            500,
                            1500,
                            2500
                        ],
                        "uses": null,
                        "tags": [],
                        "metadata": null,
                        "createdDate": "2018-04-17T23:20:08.404Z",
                        "updatedDate": "2018-04-17T23:20:08.404Z"
                    }
                ]
            }

### Get Program [GET /programs/{programId}]

Get Program by programId

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + programId (string) - the programId of the Program to get.

+ Response 200
    + Attributes (Program)

    + Body

            {
                "programId": "unique-id-123",
                "name": "Giftcard programm",
                "currency": "CAD",
                "access": "generatedCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialValue": null,
                "maxInitialValue": null,
                "fixedInitialValues": [
                    500,
                    1500,
                    2500
                ],
                "uses": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

## ValueStores [/valueStores/]

Value Stores are (naturally) where value is stored in the Lightrail system.  They are identified by a unique valueStoreId but may also be referenced by a code or associated with a Customer.

---
### Create a Value Store [POST /valueStores]

Create a new Value Store.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + valueStoreId (string, required) - Unique idempotent id for the ValueStore.
        + programId (string, optional) - Associate with and copy default values from the given Program.
        + customerId (string, optional) - Associate the Value Store with the given Customer.  Cannot be set with `code`.
        + code (string, optional) - Associate the Value Store with the given code.  Cannot be set with `customerId`.
        + currency (string, optional) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`. Required if `programId` is not set.
        + value (number, optional) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + preTax (boolean, optional) - If true the Value Store's value is applied before tax is calculated.
        + active (boolean, optional) - Whether the ValueStore is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value Store is frozen and cannot be transacted with.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value Store can be used in an order.
        + valueRule (number, optional) - A Value Rule controlling the value of the ValueStore in an Order.  To use this `value` must be set to `null`.
        + uses (number, optional) - The number of times the value store can be transacted with.
        + startDate (number, optional) - ISO date for when the valueStore can start to be transacted with.
        + endDate (number, optional) - ISO date for when the valueStore can last be transacted with.
        + metadata (number, optional) - Arbitrary data associated with the Value Store.
        
    + Body
    
            {
                "valueStoreId": "vs-1",
                "programId": "giftcards",
                "currency": "USD",
                "value": 2500
            }
    
+ Response 200
    + Attributes (ValueStore)

    + Body
    
            {
                "valueStoreId": "vs-1",
                "programId": "giftcards",
                "currency": "USD",
                "value": 2500, 
                "preTax": false,
                "active": true,
                "frozen": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Update a Value Store [PATCH /valueStores/{valueStoreId}]

Update fields that are sent and leave unspecified values at their default.

In particular this is how you activate/deactivate freeze/unfreeze a Value Store.

+ Parameter
    + valueStoreId (string) - the valueStoreId of the Value Store to modify.

+ Request (application/merge-patch+json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + valueStoreId (string, optional) - Unique idempotent id for the ValueStore.  If present must match the valueStoreId in the path.
        + currency (string, optional) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + value (number, optional) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + preTax (boolean, optional) - If true the Value Store's value is applied before tax is calculated.
        + active (boolean, optional) - Whether the ValueStore is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value Store is frozen and cannot be transacted with.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value Store can be used in an order.
        + valueRule (number, optional) - A Value Rule controlling the value of the ValueStore in an Order.  To use this `value` must be set to `null`.
        + uses (number, optional) - The number of times the value store can be transacted with.
        + startDate (number, optional) - ISO date for when the valueStore can start to be transacted with.
        + endDate (number, optional) - ISO date for when the valueStore can last be transacted with.
        + metadata (number, optional) - Arbitrary data associated with the Value Store.
        
    + Body
    
            {
                "frozen": true
            }
    
+ Response 200
    + Attributes (ValueStore)

    + Body
    
            {
                "valueStoreId": "vs-1",
                "programId": "giftcards",
                "currency": "USD",
                "value": 2500, 
                "preTax": false,
                "active": true,
                "frozen": true,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Get Value Stores [GET /valueStores{?limit}{?offset}{?programId}{?currency}{?minValue}{?maxValue}{?active}{?frozen}{?minUses}{?maxUses}{?minStartDate}{?maxStartDate}{?minEndDate}{?maxEndDate}{?minCreatedDate}{?maxCreatedDate}{?minUpdatedDate}{?maxUpdatedDate}]

Get multiple Value Stores.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + programId (string, optional) - Filter by programId.
    + currency (string, optional) - Filter by currency.
    + minValue (number, optional) - Filter by minimumm value, inclusive.
    + maxValue (number, optional) - Filter by maximum value, inclusive.
    + active (boolean, optional) - Filter active/inactive.
    + frozen (boolean, optional) - Filter frozen/unfrozen.
    + minUses (number, optional) - Filter by minimum uses, inclusive.
    + maxUses (number, optional) - Filter by maximum uses, inclusive.
    + minStartDate (string, optional) - Filter by he minimum startDate, inclusive.
    + maxStartDate (string, optional) - Filter by he maximum startDate, inclusive.
    + minEndDate (string, optional) - Filter by he minimum endDate, inclusive.
    + maxEndDate (string, optional) - Filter by he maximum endDate, inclusive.
    + minCreatedDate (string, optional) - Filter by he minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.
    + minUpdatedDate (string, optional) - Filter by the minimum updatedDate, inclusive.
    + maxUpdatedDate (string, optional) - Filter by the maximum updatedDate, inclusive.
    
+ Response 200
    + Attributes
        + count (number, required) - The number of items returned.
        + limit (number, required) - The max number of items to get.
        + offset (number, required) - The number of items to skip.
        + maxLimit (number, required) - The `limit` available`.
        + valueStores (array[ValueStore], required) - the list of Value Stores.

    + Body

            {
                "count": 1,
                "limit": 100,
                "offset": 0,
                "maxLimit": 1000,
                "valueStores": [
                    {
                        "valueStoreId": "vs-1",
                        "programId": "giftcards",
                        "currency": "USD",
                        "value": 2500, 
                        "preTax": false,
                        "active": true,
                        "frozen": false,
                        "redemptionRule": null,
                        "valueRule": null,
                        "uses": null,
                        "startDate": null,
                        "endDate": null,
                        "metadata": null,
                        "createdDate": "2018-04-17T23:20:08.404Z",
                        "updatedDate": "2018-04-17T23:20:08.404Z"
                    }
                ]
            }

### Get Value Store [GET /valueStores/{valueStoreId}]

Get Value Store by valueStoreId.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + valueStoreId (string) - the valueStoreId of the Value Store to get.

+ Response 200
    + Attributes (ValueStore)

    + Body

            {
                "valueStoreId": "vs-1",
                "programId": "giftcards",
                "currency": "USD",
                "value": 2500, 
                "preTax": false,
                "active": true,
                "frozen": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Get Value Store Code [GET /valueStores/{valueStoreId}/code]

Get a Value Store's code.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + valueStoreId (string) - the valueStoreId of the Value Store to get the code of.

+ Response 200
    + Attributes
        + code (string, optional) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`.

    + Body

            {
                "code": "BLACKFRIDAY20%"
            }

### Set Value Store Code [PUT /valueStores/{valueStoreId}/code]

Set a Value Store's code.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, required) - The code to set.
        + secure (boolean, optional) - If true the code is stored securely and only shown in abbreviated form.
        
    + Body
    
            {
                "code": "c3d177ff950b4e2796e341f65976e1b1",
                "secure" true
            }

+ Parameter
    + valueStoreId (string) - the valueStoreId of the Value Store to update the code of.

+ Response 200
    + Attributes
        + code (string, optional) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`.

    + Body

            {
                "code": "…e1b1"
            }

### Delete Value Store Code [DELETE /valueStores/{valueStoreId}/code]

Delete a Value Store's code.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + valueStoreId (string) - the valueStoreId of the Value Store to delete the code of.

+ Response 200

    + Body

            {
                "success": true
            }

### Get Value Store's Customer [GET /valueStores/{valueStoreId}/customer]

Get a Value Store's customer.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + valueStoreId (string) - the valueStoreId of the Value Store to get the Customer of.

+ Response 200
    + Attributes (Customer)

    + Body

            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Set Value Store Customer [PUT /valueStores/{valueStoreId}/customer]

Set a Value Store's Customer.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + customerId (string, required) - The customerId to set as the Customer owning the Value Store.
        
    + Body
    
            {
                "customerId": "unique-id-123"
            }

+ Parameter
    + valueStoreId (string) - the valueStoreId of the Value Store to set the Customer of.

+ Response 200
    + Attributes (Customer)

    + Body

            {
                "customerId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Delete Value Store Customer [DELETE /valueStores/{valueStoreId}/customer]

Remove the Customer as the owner of a Value Store.  The Customer's info is not deleted.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + valueStoreId (string) - the valueStoreId of the Value Store to remove the Customer from.

+ Response 200

    + Body

            {
                "success": true
            }

## Transactions [/transactions/]

---
### Process an order [POST /transactions/orders]

Process an order by debiting (removing value from) one or more payment rails.

The payment rails `lightrail`, `stripe` and `internal` are supported.

Data used in example:
- Purchasing: 
    - 2x $5 socks (8% tax rate)
    - 1x $1.99 chocolate bar  (5% tax rate)
    - 1x $3.49 shipping (0% tax rate)
- Payment Sources:
    - Customer with prepaid account, and a sock and chocolate bar promotion.
        - Account has $20.
        - Sock promo is for 20% off retail price of socks.
        - Chocolate bar promo is a $0.50 credit towards the purchase of a chocolate bar.
    - Generic code for 10% off orders over $5 (does not apply to shipping). 

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + lineItems (array[LineItem])
        + sources (array[TransactionParty])
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all value being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.
        
    + Body 
    
            {
                "transactionId": "unique-id-123",
                "currency": "USD",
                "lineItems": [
                    {
                        "type": "product",
                        "productId": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2
                    },
                    {
                        "type": "product",
                        "productId": "pid_41234", 
                        "unitPrice": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar."
                    },
                    {
                        "type": "shipping",
                        "productId": "standard-shipping",
                        "unitPrice": 349,
                        "taxRate": 0
                    }
                ],
                "sources": [
                    {
                        "rail": "lightrail",
                        "customerEmail": "alice@example.com"
                    },
                    {
                        "rail": "lightrail",
                        "code": "SAVE10PERCENT"
                    }
                ]
            }
    
+ Response 200
    + Attributes (Transaction)

    + Body
    
            {
                "transactionId": "unique-id-123",
                "transactionType": "order",
                "currency": "USD",
                "totals": {
                    "subtotal": 1548, 
                    "tax": 67,
                    "discount": 350,
                    "payable": 1265 
                },
                "lineItems": [
                    {
                        "type": "product",
                        "id": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2,
                        "valueStoresApplied": [
                            {
                                "valueStoreId": "2018-alice-socks-promo",
                                "rule": "item.productId == "pid_12345'",
                                "ruleExplanation": "Socks 20% discount",
                                "amount": -200,
                                "preTax": true,
                                "discount": true
                            }, 
                            {
                                "valueStoreId": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": -80,
                                "preTax": true,
                                "discount": true
                            }
                        ],
                        "lineTotal": {
                            "price": 1000,
                            "taxable": 720,
                            "tax": 58,
                            "discount": 280,
                            "payable": 778
                        }  
                    },
                    {
                        "type": "product",
                        "id": "pid_41234", 
                        "unitCost": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar.",
                        "valueStoresApplied": [
                            {
                                "valueStoreId": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": -20,
                                "preTax": true,
                                "discount": true
                            },
                            {
                                "valueStoreId": "2018-50cent-chocobar-credit",
                                "rule": "item.productId == "pid_41234",
                                "ruleExplanation": "50 cents towards chocolate bars.",
                                "amount": -50,
                                "preTax": false,
                                "discount": true
                            }
                        ],
                        "lineTotal": {
                            "price": 199,
                            "taxable": 179,
                            "tax": 9,
                            "discount": 70,
                            "payable": 138
                        }
                    },
                    {
                        "type": "shipping",
                        "id": "standard-shipping", 
                        "unitCost": 349,
                        "taxRate": 0, 
                        "valueStoresApplied": [
                            {
                                "valueStoreId": "alice-account-USD",
                                "amount": -349,
                                "preTax": false,
                                "discount": false
                            }
                        ],
                        "lineTotal": {
                            "price": 349,
                            "taxable": 349,
                            "tax": 0,
                            "discount": 0,
                            "payable": 349
                        }
                    }
                ],
                "steps": [
                    {
                        "valueStoreId": "2018-alice-socks-promo",
                        "amount": -200,
                        "customerEmail": "alice@example.com",
                        "tags": ["customer-promotions", "clothing-promos"],
                        "discount": true 
                    },
                    {
                        "valueStoreId": "2018-10percent-off-over-5-orders",
                        "amount": -100,
                        "code": "SAVE10PERCENT",
                        "tags": ["generic-code"],
                        "discount": true
                    },
                    {
                        "valueStoreId": "2018-50cent-chocobar-credit",
                        "amount": -50,
                        "customerEmail": "alice@example.com"
                        "tags": ["customer-promotions", "food-promos"],
                        "discount": true
                    },
                    {
                        "valueStoreId": "alice-account-USD",
                        "amount": -1265,
                        "customerEmail": "alice@example.com",
                        "tags": ["customer-accounts"],
                        "discount": false
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {}
            }

### Debit [POST /transactions/debit]

Debit (remove value from) a payment rail.

Currently only the `lightrail` payment rail is supported.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + source (TransactionParty, required) - The rail to debit.  Only `lightrail` rails that refer to a specific ValueStore are supported.
        + amount (number, required) - The amount to credit, > 0.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all value being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "valueStoreId": "vs_1"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo customer inactivity"
                }
            }
    
+ Response 200
    + Attributes (Transaction)

    + Body

            {
                "transactionId": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "currency": "XXX",
                        "valueBefore": 5500,
                        "valueAfter": 3000,
                        "valueChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo customer inactivity"
                }
            }

### Credit [POST /transactions/credit]

Credit (add value to) a payment rail.

Currently only the `lightrail` payment rail is supported.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + destination (TransactionParty, required) - The rail to credit.  Only `lightrail` rails that refer to a specific ValueStore are supported.
        + amount (number, required) - The amount to debit, > 0.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "destination": {
                    "rail": "lightrail",
                    "valueStoreId": "vs_1"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }
    
+ Response 200
    + Attributes (Transaction)

    + Body

            {
                "transactionId": "unique-id-123",
                "transactionType": "credit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "currency": "XXX",
                        "valueBefore": 1500,
                        "valueAfter": 4000,
                        "valueChange": 2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }

### Transfer [POST /transactions/transfer]

Transfer value from one value store to another.

Currently only the `lightrail` payment rail is supported.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + source (TransactionParty, required) - The rail to take value from.  Only `lightrail` rails that refer to a specific ValueStore are supported.
        + destination (TransactionParty, required) - The rail to send value to.  Only `lightrail` rails that refer to a specific ValueStore are supported.
        + amount (number, required) - The amount to transfer, > 0.
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all value being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "valueStoreId": "vs_1"
                },
                "destination": {
                    "rail": "lightrail",
                    "valueStoreId": "alice-account-USD"
                },
                "amount": 2500,
                "currency": "USD",
                "metadata": {
                    "reference": "frequent-shopper-bonus-072301"
                }
            }

+ Response 200
    + Attributes
        + transactionId (string, required) - Unique idempotent ID for the Transaction.
        + transactionType (string, required) - `transfer`
        + currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The remainder of value that could not be debited.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - ISO date for when the Transaction was created.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "transactionId": "unique-id-123",
                "transactionType": "transfer",
                "currency": "USD",
                "steps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "currency": "USD",
                        "valueBefore": 2500,
                        "valueAfter": 0,
                        "valueChange": -2500
                    },
                    {
                        "rail": "lightrail",
                        "valueStoreId": "alice-account-USD",
                        "currency": "USD",
                        "valueBefore": 5000,
                        "valueAfter": 7500,
                        "valueChange": 2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "reference": "loyalty-bonus-072301"
                }
            }

### Get Transactions [GET /transactions{?limit}{?offset}{?transactionType}{?minCreatedDate}{?maxCreatedDate}]

Get multiple Transactions.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + transactionType (string, optional) - Filter by the transactionType.
    + minCreatedDate (string, optional) - Filter by the minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.

+ Response 200
    + Attributes
        + count (number, required) - The number of items returned.
        + limit (number, required) - The max number of items to get.
        + offset (number, required) - The number of items to skip.
        + maxLimit (number, required) - The `limit` available`.
        + transactions (array[Transaction], required) - the list of transactions.

    + Body

            {
                "count": 1,
                "limit": 100,
                "offset": 0,
                "maxLimit": 1000,
                "transactions": [
                    {
                        "transactionId": "unique-id-123",
                        "transactionType": "debit",
                        "currency": "XXX",
                        "steps": [
                            {
                                "rail": "lightrail",
                                "valueStoreId": "vs_1",
                                "currency": "XXX",
                                "valueBefore": 5500,
                                "valueAfter": 3000,
                                "valueChange": -2500
                            }
                        ],
                        "remainder": 0,
                        "simulated": false,
                        "createdDate": "2018-04-17T23:20:08.404Z",
                        "updatedDate": "2018-04-17T23:20:08.404Z",
                        "metadata": {
                            "note": "Reduce loyalty points after 3mo customer inactivity"
                        }
                    }
                ]
            }

### Get Transaction [GET /transactions/{transactionId}]

Get Transaction by transactionId.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + transactionId (string) - the transactionId of the Transaction to get.

+ Response 200
    + Attributes (Transaction)

    + Body

            {
                "transactionId": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "currency": "XXX",
                        "valueBefore": 5500,
                        "valueAfter": 3000,
                        "valueChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo customer inactivity"
                }
            }

### Capture Pending Transaction [POST /transactions/{transactionId}/capture]

Capture a pending Transaction by transactionId.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + transactionId (string) - the transactionId of the pending Transaction to capture.

+ Response 200
    + Attributes (Transaction)

    + Body

            {
                "transactionId": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "currency": "XXX",
                        "valueBefore": 5500,
                        "valueAfter": 3000,
                        "valueChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "captured",
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo customer inactivity"
                }
            }

### Void Pending Transaction [POST /transactions/{transactionId}/void]

Void a pending Transaction by transactionId.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + transactionId (string) - the transactionId of the pending Transaction to void.

+ Response 200
    + Attributes (Transaction)

    + Body

            {
                "transactionId": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "valueStoreId": "vs_1",
                        "currency": "XXX",
                        "valueBefore": 5500,
                        "valueAfter": 3000,
                        "valueChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "void",
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo customer inactivity"
                }
            }

# Data Structures

## Currency (object)
+ code (string, required) - 
+ name (number, required) - 
+ symbol (number, required) - 
+ decimalPlaces (number, required) - 

## Customer (object)
+ customerId (string, required) - Unique idempotent ID for the Customer.
+ firstName (string, optional) - The Customer's first name.
+ lastName (string, optional) - The Customer's last name.
+ email (string, optional) - The Customer's email.
+ metadata (object, optional) - Arbitrary data associated with the Customer.
+ createdDate (string, required) - ISO date for when the Customer was created.
+ updatedDate (string, required) - ISO date for when the Customer was last updated.

## LineItem (object)
+ type (string, required) - Must be either `product`, `shipping` or `fee`.
+ productId (string, optional) -  The ID of the product.
+ variantId (string, optional) - The variant ID of a product. (Can be used to store SKU.)
+ unitPrice (number, required) -  The unit price of the item.
+ quantity (number, optional) -  The number of items. Defaults to 1 if not provided.
+ taxRate (number, optional) - Tax rate for the item. This is needed when a transaction contains items that have different tax rates.
+ tags (array[string], optional) - A list of tags associated with the item. For example, 'seasonal' or 'clothing'.
+ metadata (object, optional) - Any additional data you want to store for the item.

## LineItemResponse (LineItem)
+ valueStoresApplied (array[LineItemPromotions])
+ lineTotal (LineTotal)

## LineItemPromotions (object)
+ valueStoreId (string) - Unique idempotent id for the ValueStore.
+ redemptionRule (string) - A Redemption Rule controlling when the Value Store can be used in an order.
+ ruleExplanation (string) - An explanation for the `redemptionRule` does that can be used to display to the customer.
+ amount (number) - The value of the discount.
+ preTax (boolean) - If true the Value Store's value is applied before tax is calculated.

## LineTotal (object)
+ price (number) - The total cost of the items. ie `unitPrice * quantity`.
+ taxable (number) - The taxable amount. ie `price - preTaxDiscount`.
+ tax (number) - The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding'.
+ discount (number) - The discount
+ payable (number) - The cost of the line item after tax and discounts have been applied.

## Program (object)
+ programId (string, required) - Unique idempotent ID for the Program.
+ name (string, optional) - A human-readable name for the Program.
+ currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
+ access (enum[string], required) - How the valueStores can be accessed.
    + `customerId` - must be associated with a customerId.
    + `secureCode` - a code is generated or supplied and is stored securely.
    + `publicCode` - a code is generated or supplied and can be displayed.
+ discount (boolean, required) - If true the Value Store will be noted as a discount for the customer in orders.
+ preTax (boolean, required) - If true the Value Store's value is applied before tax is calculated.
+ active (boolean, optional) - Whether the ValueStore is active and can be used upon creation.
+ redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value Store can be used in an order.
+ valueRule (number, optional) - A Value Rule controlling the value of the ValueStore in an Order.  To use this `value` must be set to `null`.
+ minInitialValue (number, optional) - 
+ maxInitialValue (number, optional) - 
+ fixedInitialValues (array[number], optional) - A list of values the Value Store can be created with.
+ uses (number, optional) - If set the number of uses the Value Store will be created with.  Set `null` or omit for infinite uses.
+ tags (array[string], optional) - Segmentation tags.
+ createdDate (string, required) - ISO date for when the Program was created.
+ updatedDate (string, required) - ISO date for when the Program was last updated.
+ metadata (object, optional) - Arbitrary data associated with the Program.

## Rule (object)
+ rule (string, required) - the Lightrail Rule text of the rule.
+ explanation (string, required) - a plain explanation of the rule seen by customers.

## Transaction (object)
+ transactionId (string, required) - Unique idempotent ID for the Transaction.
+ transactionType (string, required) - The type of the transaction, eg: `debit`, `credit`, `order`...
+ currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
+ steps (array[TransactionStep], required) - An array of transaction steps.
+ remainder (number, required) - The remainder of value that could not be debited.
+ simulated (boolean, optional) - True if the transaction was simulated.
+ pending (enum[string], optional) - The pending status.  Only set if the Transaction was created with `pending` set to `true`.
    + `pending` - created pending and unresolved.
    + `captured` - created pending and captured.  The Transaction is final.
    + `void` - created pending and voided.  The Transaction was unrolled and all funds released back to their sources.
+ createdDate (string, required) - ISO date for when the Transaction was created.
+ updatedDate (string, required) - ISO date for when the Customer was last updated.
+ metadata (object, optional) - Arbitrary data associated with the Transaction.

## TransactionParty (object)
+ rail (string, required) - The payment rail. Must belong to [`lightrail`, `stripe`, `internal`]. Must be used in combination with one of the following identifiers.
+ customerId (string, optional) - `lightrail`: the Customer's customerId.
+ code (string, optional) - `lightrail`: the code of a gift card or promotion.
+ valueStoreId (string, optional) - `lightrail`: The ID of a ValueStore.
+ token (string, optional) - `stripe`: a tokenized credit card for Stripe.  
+ id (string, optional) - `internal`: the ID of the value.
+ value (number, optional) - `internal`: the amount of value.
+ beforeLightrail (boolean, optional) - `internal`: if true this value store is applied before Lightrail ValueStores, otherwise it will be applied after.

## TransactionStep (object)
A step taken as part of the transaction.
+ rail (string, required) - Indicates the payment rail. Must be either `lightrail`, `stripe` or `internal`.

## LightrailTransactionStep (TransactionStep)
+ rail (string, required) - `lightrail`
+ valueStoreId (string, required) - the valueStoreId of the ValueStore transacted with.
+ currency (string, required) - the currency of the ValueStore transacted with.
+ customerId (string, optional) - the customerId of the Customer associated with the ValueStore.
+ code (string, optional) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`..
+ valueBefore (number, required) - the value of the ValueStore before the transaction.
+ valueAfter (number, required) - the value of the ValueStore after the transaction.
+ valueChange (number, required) - the net change of the ValueStore for the transaction.

## StripeTransactionStep (TransactionStep)
+ rail (string, required) - `stripe`
+ amount (number, required) - the amount of the charge.
+ chargeId (string, optional) - the ID of the Stripe charge, if applicable.
+ charge (object, optional) - the Stripe Charge object, if applicable.

## InternalTransactionStep (TransactionStep)
+ rail (string, required) - `internal`
+ id (string, required) - the ID of the internal value store transacted with.
+ valueBefore (number, required) - the value of the ValueStore before the transaction.
+ valueAfter (number, required) - the value of the ValueStore after the transaction.
+ valueChange (number, required) - the net change of the ValueStore for the transaction.

## ValueStore (object)
+ valueStoreId (string, required) - Unique idempotent id for the ValueStore.
+ programId (string, optional) - The programId of the Program this ValueStore is in.
+ currency (string, required) - Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`.
+ value (number, optional) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
+ discount (boolean, optional) - If true the Value Store will be noted as a discount for the customer in orders.
+ preTax (boolean, optional) - If true the Value Store's value is applied before tax is calculated.
+ active (boolean, optional) - Whether the ValueStore is active and can be used upon creation.
+ frozen (boolean, optional) - If true the Value Store is frozen and cannot be transacted with.
+ redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value Store can be used in an order.
+ valueRule (number, optional) - A Value Rule controlling the value of the ValueStore in an Order.  To use this `value` must be set to `null`.
+ uses (number, optional) - The number of times the value store can be transacted with.
+ startDate (number, optional) - ISO date for when the valueStore can start to be transacted with.
+ endDate (number, optional) - ISO date for when the valueStore can last be transacted with.
+ metadata (number, optional) - Arbitrary data associated with the Value Store.
+ createdDate (string, required) - ISO date for when the Customer was created.
+ updatedDate (string, required) - ISO date for when the Customer was last updated.