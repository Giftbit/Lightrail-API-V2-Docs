FORMAT: 1A
HOST: https://api.lightrail.com/v2/

# Lightrail Documentation

Welcome to Lightrail V2. Lightrail makes it easy to create gift cards, manage contact account credit, run promotional discount programs, and collect payment all in one unified checkout solution. 

You are viewing the reference api documentation. For an overview and detailed use case examples please view our [docs home](https://localhost:8181/docs/).

## Authentication
Authentication is done via an authorization header. You can retrieve your Lightrail API key [here](https://www.lightrail.com).

In requests to Lightrail you must incldue the following header:
```
Authorization: Bearer <API_KEY>
```

## Support
[Contact us](mailto:hello@lightrail.com) any time if you have any questions, we're here to help.


## Contacts [/contacts/]

Contacts are the people or businesses who buy products or services from you.  They're identified by a unique `contactId`.

---
### Create Contact [POST /contacts]

Create a new Contact.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + contactId (string, required) - Unique idempotent ID for the Contact.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (object, optional) - Arbitrary data associated with the Contact.

    + Body

            {
                "contactId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                }
            }
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "contactId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",'
                "tags": [],
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }
### Update Contact [PUT /contacts/{contactId}]

Update fields that are sent and leave unspecified values unchanged.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + contactId (string, required) - Unique idempotent ID for the Contact.
        + firstName (string, optional) - The Contact's first name.
        + lastName (string, optional) - The Contact's last name.
        + email (string, optional) - The Contact's email.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (string, optional) - Arbitrary data associated with the Contact.

    + Body

            {
                "metadata": {
                    "alias": "El Duderino"
                }
            }
            
+ Parameter
    + contactId (string) - the contactId of the Contact to update.
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "contactId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "tags": [],
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
            }
### Delete Contact [DELETE /contacts/{contactId}]

Delete a Contact by contactId.

The Contact can only be deleted if it is not associated with any Values.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + contactId (string) - the contactId of the Contact to delete.

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }
### Get Contacts [GET /contacts{?limit}{?offset}{?firstName}{?lastName}{?email}{?tags}{?minCreatedDate}{?maxCreatedDate}{?minUpdatedDate}{?maxUpdatedDate}]

Get multiple Contacts.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + firstName (string, optional) - Filter by the firstName.
    + lastName (string, optional) - Filter by the lastName.
    + email (string, optional) - Filter by the email.
    + tags (number, optional) - Filter by tags.
    + minCreatedDate (string, optional) - Filter by the minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.
    + minUpdatedDate (string, optional) - Filter by the minimum updatedDate, inclusive.
    + maxUpdatedDate (string, optional) - Filter by the maximum updatedDate, inclusive.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1

    + Attributes (array[Contact])

    + Body

            [
                {
                    "contactId": "unique-id-123",
                    "firstName": "Jeffrey",
                    "lastName": "Lebowski",
                    "email": "thedude@example.com",
                    "tags": [],
                    "metadata": {
                        "alias": "El Duderino"
                    },
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]

### Get Contact [GET /contacts/{contactId}]

Get Contact by contactId.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + contactId (string) - the contactId of the Contact to get.

+ Response 200 (application/json)
    + Attributes (Contact)

    + Body

            {
                "contactId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "tags": [],
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

## Programs [/programs]

Programs act as a template to set properties for the type of Value you wish to issue. 
A few common examples of the types of Value you may want to issue and define as Programs are:
- Gift cards
- Accounts, points 
- Promotions  

See [here](https://localhost:8181/docs/) to see examples of how you'd create a Program for the common types listed above.

---
### Create Program [POST /programs]

Create a new Program.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + programId (string, required) - Unique idempotent ID for the Program.
        + name (string, optional) - A human-readable name for the Program.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + access (enum[string], required) - How the values can be accessed
            + `contactId` - must be associated with a contactId.
            + `secureCode` - a code is generated or supplied and is stored securely.
            + `publicCode` - a code is generated or supplied and can be displayed.
        + discount (boolean, optional) - If true the Value will be noted as a discount for the contact in orders.
        + preTax (boolean, optional) - If true the Value's balance is applied before tax is calculated.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in an order.
        + valueRule (number, optional) - A Value Rule controlling the effective balance of the Value in an Order.  To use this `balance` must be set to `null`.
        + minInitialBalance (number, optional) - The minimum balance the Value can be created with.
        + maxInitialBalance (number, optional) - The maximum balance the Value can be created with.
        + fixedInitialValues (array[number], optional) - A list of values the Value can be created with.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (number, optional) - Arbitrary data associated with the Program.

    + Body

            {
                "programId": "unique-id-123",
                "name": "Giftcard programm",
                "currency": "CAD",
                "access": "generatedCode",
                "fixedInitialValues": [
                    500,
                    1500,
                    2500
                ]
            }
    
+ Response 200 (application/json)
    + Attributes (Contact)

    + Body
            
            {
                "programId": "unique-id-123",
                "name": "Giftcard programm",
                "currency": "CAD",
                "access": "generatedCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": null,
                "maxInitialBalance": null,
                "fixedInitialValues": [
                    500,
                    1500,
                    2500
                ],
                "uses": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Update a Program [PATCH /programs/{programId}]

Update a Program by programId.  Update fields that are sent and leave unspecified values unchanged.

Values that have already been created will not be changed.

+ Parameter
    + programId (string) - the programId of the Program to modify.

+ Request (application/merge-patch+json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + programId (string, optional) - Unique idempotent ID for the Program.  If present must match the programId in the path.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + minInitialBalance (number, optional) - The minimum balance the Value can be created with.
        + maxInitialBalance (number, optional) - The maximum balance the Value can be created with.
        + fixedInitialValues (array[number], optional) - A list of values the Value can be created with.
        + tags (array[string], optional) - Segmentation tags.
        + metadata (number, optional) - Arbitrary data associated with the Program.
        
    + Body
    
            {
                "tags": ["internal"]
            }
    
+ Response 200 (application/json)
    + Attributes (Program)

    + Body
    
            {
                "programId": "unique-id-123",
                "name": "Giftcard programm",
                "currency": "CAD",
                "access": "generatedCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": null,
                "maxInitialBalance": null,
                "fixedInitialValues": [
                    500,
                    1500,
                    2500
                ],
                "uses": null,
                "tags": ["internal"],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Delete Program [DELETE /program/{programId}]

Delete a Program by programId.

The Program can only be deleted if it is not associated with any Values.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + programId (string) - the programId of the Program to delete.

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

### Get Programs [GET /programs{?limit}{?offset}{?programId}{?currency}{?access}{?discount}{?preTax}{?active}{?minUses}{?maxUses}{?tags}{?minCreatedDate}{?maxCreatedDate}{?minUpdatedDate}{?maxUpdatedDate}]

Get multiple Programs.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + programId (string, optional) - Filter by programId.
    + currency (string, optional) - Filter by currency.
    + access (string, optional) - Filter by access.
    + discount (string, optional) - Filter by discount.
    + preTax (string, optional) - Filter by preTax.
    + active (boolean, optional) - Filter active/inactive.
    + minUses (number, optional) - Filter by minimum uses, inclusive.
    + maxUses (number, optional) - Filter by maximum uses, inclusive.
    + tags (number, optional) - Filter by tags.
    + minCreatedDate (string, optional) - Filter by he minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.
    + minUpdatedDate (string, optional) - Filter by the minimum updatedDate, inclusive.
    + maxUpdatedDate (string, optional) - Filter by the maximum updatedDate, inclusive.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Program])

    + Body

            [
                {
                    "programId": "unique-id-123",
                    "name": "Giftcard programm",
                    "currency": "CAD",
                    "access": "generatedCode",
                    "discount": "false",
                    "preTax": "false",
                    "active": "true",
                    "redemptionRule": null,
                    "valueRule": null,
                    "minInitialBalance": null,
                    "maxInitialBalance": null,
                    "fixedInitialValues": [
                        500,
                        1500,
                        2500
                    ],
                    "uses": null,
                    "tags": [],
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]

### Get Program [GET /programs/{programId}]

Get Program by programId

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + programId (string) - the programId of the Program to get.

+ Response 200 (application/json)
    + Attributes (Program)

    + Body

            {
                "programId": "unique-id-123",
                "name": "Giftcard programm",
                "currency": "CAD",
                "access": "generatedCode",
                "discount": "false",
                "preTax": "false",
                "active": "true",
                "redemptionRule": null,
                "valueRule": null,
                "minInitialBalance": null,
                "maxInitialBalance": null,
                "fixedInitialValues": [
                    500,
                    1500,
                    2500
                ],
                "uses": null,
                "tags": [],
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

## Values [/values]

Values (naturally) represent value in the Lightrail system, such as a gift card or promotion.  They are identified by a unique id but may also be referenced by a code or associated with a Contact.

### Create a Value [POST /values]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - Unique idempotent id for the Value.
        + programId (string, optional) - Associate with and copy default values from the given Program.
        + contactId (string, optional) - Associate the Value with the given Contact.  Cannot be set with `code`.
        + code (string, optional) - Associate the Value with the given code.  Cannot be set with `contactId`.
        + currency (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. Required if `programId` is not set.
        + balance (number, optional) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
        + preTax (boolean, optional) - If true the Value's balance is applied before tax is calculated.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in an order.
        + valueRule (number, optional) - A Value Rule controlling the effective balance of the Value in an Order.  To use this `balance` must be set to `null`.
        + uses (number, optional) - The number of times the Value can be transacted with.
        + startDate (number, optional) - ISO date for when the Value can start to be transacted with.
        + endDate (number, optional) - ISO date for when the Value can last be transacted with.
        + metadata (number, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "id": "vs-1",
                "programId": "giftcards",
                "currency": "USD",
                "balance": 2500
            }
    
+ Response 200 (application/json)
    + Attributes (Value)

    + Body
    
            {
                "id": "vs-1",
                "programId": "giftcards",
                "currency": "USD",
                "balance": 2500, 
                "preTax": false,
                "active": true,
                "frozen": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Update a Value [PATCH /values/{id}]

+ Parameter
    + id (string) - the id of the Value to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, optional) - Unique idempotent id for the Value.  If present must match the id in the path.
        + preTax (boolean, optional) - If true the Value's balance is applied before tax is calculated.
        + active (boolean, optional) - Whether the Value is active and can be used upon creation.
        + frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
        + redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in an order.
        + valueRule (number, optional) - A Value Rule controlling the effective balance of the Value in an Order.  To use this `balance` must be set to `null`.
        + uses (number, optional) - The number of times the Value can be transacted with.
        + startDate (number, optional) - ISO date for when the Value can start to be transacted with.
        + endDate (number, optional) - ISO date for when the Value can last be transacted with.
        + metadata (number, optional) - Arbitrary data associated with the Value.
        
    + Body
    
            {
                "frozen": true
            }
    
+ Response 200 (application/json)
    + Attributes (Value)

    + Body
    
            {
                "id": "vs-1",
                "programId": "giftcards",
                "currency": "USD",
                "balance": 2500, 
                "preTax": false,
                "active": true,
                "frozen": true,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Get Values [GET /values{?limit}{?offset}{?programId}{?currency}{?minBalance}{?maxBalance}{?active}{?frozen}{?minUses}{?maxUses}{?minStartDate}{?maxStartDate}{?minEndDate}{?maxEndDate}{?minCreatedDate}{?maxCreatedDate}{?minUpdatedDate}{?maxUpdatedDate}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + programId (string, optional) - Filter by programId.
    + currency (string, optional) - Filter by currency.
    + minBalance (number, optional) - Filter by minimumm balance, inclusive.
    + maxBalance (number, optional) - Filter by maximum balance, inclusive.
    + active (boolean, optional) - Filter active/inactive.
    + frozen (boolean, optional) - Filter frozen/unfrozen.
    + minUses (number, optional) - Filter by minimum uses, inclusive.
    + maxUses (number, optional) - Filter by maximum uses, inclusive.
    + minStartDate (string, optional) - Filter by he minimum startDate, inclusive.
    + maxStartDate (string, optional) - Filter by he maximum startDate, inclusive.
    + minEndDate (string, optional) - Filter by he minimum endDate, inclusive.
    + maxEndDate (string, optional) - Filter by he maximum endDate, inclusive.
    + minCreatedDate (string, optional) - Filter by he minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.
    + minUpdatedDate (string, optional) - Filter by the minimum updatedDate, inclusive.
    + maxUpdatedDate (string, optional) - Filter by the maximum updatedDate, inclusive.
    
+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Value])

    + Body

            [
                {
                    "id": "vs-1",
                    "programId": "giftcards",
                    "currency": "USD",
                    "balance": 2500, 
                    "preTax": false,
                    "active": true,
                    "frozen": false,
                    "redemptionRule": null,
                    "valueRule": null,
                    "uses": null,
                    "startDate": null,
                    "endDate": null,
                    "metadata": null,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z"
                }
            ]

### Get Value [GET /values/{id}]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the id of the Value to get.

+ Response 200 (application/json)
    + Attributes (Value)

    + Body

            {
                "id": "vs-1",
                "programId": "giftcards",
                "currency": "USD",
                "balance": 2500, 
                "preTax": false,
                "active": true,
                "frozen": false,
                "redemptionRule": null,
                "valueRule": null,
                "uses": null,
                "startDate": null,
                "endDate": null,
                "metadata": null,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Get Value Code [GET /values/{id}/code]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the id of the Value to get the code of.

+ Response 200 (application/json)
    + Attributes
        + code (string, optional) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`.

    + Body

            {
                "code": "BLACKFRIDAY20%"
            }

### Set Value Code [PUT /values/{id}/code]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, required) - The code to set.
        + secure (boolean, optional) - If true the code is stored securely and only shown in abbreviated form.
        
    + Body
    
            {
                "code": "c3d177ff950b4e2796e341f65976e1b1",
                "secure" true
            }

+ Parameter
    + id (string) - the id of the Value to update the code of.

+ Response 200 (application/json)
    + Attributes
        + code (string, optional) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`.

    + Body

            {
                "code": "…e1b1"
            }

### Delete Value Code [DELETE /values/{id}/code]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the id of the Value to delete the code of.

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

### Get Value's Contact [GET /values/{id}/contact]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the id of the Value to get the Contact of.

+ Response 200 (application/json)
    + Attributes (Contact)

    + Body

            {
                "contactId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Set Value Contact [PUT /values/{id}/contact]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + contactId (string, required) - The contactId to set as the Contact owning the Value.
        
    + Body
    
            {
                "contactId": "unique-id-123"
            }

+ Parameter
    + id (string) - the id of the Value to set the Contact of.

+ Response 200 (application/json)
    + Attributes (Contact)

    + Body

            {
                "contactId": "unique-id-123",
                "firstName": "Jeffrey",
                "lastName": "Lebowski",
                "email": "thedude@example.com",
                "metadata": {
                    "alias": "El Duderino"
                },
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z"
            }

### Delete Value Contact [DELETE /values/{id}/contact]

+ Request (application/json)

    Remove the Contact as the owner of a Value.  The Contact's info is not deleted.

    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the id of the Value to remove the Contact from.

+ Response 200 (application/json)

    + Body

            {
                "success": true
            }

## Transactions [/transactions]

### Process an order [POST /transactions/orders]

Process an order by debiting (removing value from) one or more payment rails.

The payment rails `lightrail`, `stripe` and `internal` are supported.

Data used in example:
- Purchasing: 
    - 2x $5 socks (8% tax rate)
    - 1x $1.99 chocolate bar  (5% tax rate)
    - 1x $3.49 shipping (0% tax rate)
- Payment Sources:
    - Contact with prepaid account, and a sock and chocolate bar promotion.
        - Account has $20.
        - Sock promo is for 20% off retail price of socks.
        - Chocolate bar promo is a $0.50 credit towards the purchase of a chocolate bar.
    - Generic code for 10% off orders over $5 (does not apply to shipping). 

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + lineItems (array[LineItem])
        + sources (array[TransactionParty])
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all balance being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.
        
    + Body 
    
            {
                "id": "unique-id-123",
                "currency": "USD",
                "lineItems": [
                    {
                        "type": "product",
                        "productId": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2
                    },
                    {
                        "type": "product",
                        "productId": "pid_41234", 
                        "unitPrice": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar."
                    },
                    {
                        "type": "shipping",
                        "productId": "standard-shipping",
                        "unitPrice": 349,
                        "taxRate": 0
                    }
                ],
                "sources": [
                    {
                        "rail": "lightrail",
                        "contactEmail": "alice@example.com"
                    },
                    {
                        "rail": "lightrail",
                        "code": "SAVE10PERCENT"
                    }
                ]
            }
    
+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body
    
            {
                "id": "unique-id-123",
                "transactionType": "order",
                "currency": "USD",
                "totals": {
                    "subtotal": 1548, 
                    "tax": 67,
                    "discount": 350,
                    "payable": 1265 
                },
                "lineItems": [
                    {
                        "type": "product",
                        "id": "pid_12345", 
                        "unitPrice": 500,
                        "taxRate": 0.08, 
                        "description": "Socks.", 
                        "quantity": 2,
                        "valuesApplied": [
                            {
                                "id": "2018-alice-socks-promo",
                                "rule": "item.productId == "pid_12345'",
                                "ruleExplanation": "Socks 20% discount",
                                "amount": -200,
                                "preTax": true,
                                "discount": true
                            }, 
                            {
                                "id": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": -80,
                                "preTax": true,
                                "discount": true
                            }
                        ],
                        "lineTotal": {
                            "price": 1000,
                            "taxable": 720,
                            "tax": 58,
                            "discount": 280,
                            "payable": 778
                        }  
                    },
                    {
                        "type": "product",
                        "id": "pid_41234", 
                        "unitCost": 199,
                        "taxRate": 0.05, 
                        "description": "Chocolate bar.",
                        "valuesApplied": [
                            {
                                "id": "2018-10percent-off-over-5-orders",
                                "rule": "order.total > 500 && item.type != 'shipping", 
                                "ruleExplanation": "Take 10% off order if over $5.",
                                "amount": -20,
                                "preTax": true,
                                "discount": true
                            },
                            {
                                "id": "2018-50cent-chocobar-credit",
                                "rule": "item.productId == "pid_41234",
                                "ruleExplanation": "50 cents towards chocolate bars.",
                                "amount": -50,
                                "preTax": false,
                                "discount": true
                            }
                        ],
                        "lineTotal": {
                            "price": 199,
                            "taxable": 179,
                            "tax": 9,
                            "discount": 70,
                            "payable": 138
                        }
                    },
                    {
                        "type": "shipping",
                        "id": "standard-shipping", 
                        "unitCost": 349,
                        "taxRate": 0, 
                        "valuesApplied": [
                            {
                                "id": "alice-account-USD",
                                "amount": -349,
                                "preTax": false,
                                "discount": false
                            }
                        ],
                        "lineTotal": {
                            "price": 349,
                            "taxable": 349,
                            "tax": 0,
                            "discount": 0,
                            "payable": 349
                        }
                    }
                ],
                "steps": [
                    {
                        "id": "2018-alice-socks-promo",
                        "amount": -200,
                        "contactEmail": "alice@example.com",
                        "tags": ["contact-promotions", "clothing-promos"],
                        "discount": true 
                    },
                    {
                        "id": "2018-10percent-off-over-5-orders",
                        "amount": -100,
                        "code": "SAVE10PERCENT",
                        "tags": ["generic-code"],
                        "discount": true
                    },
                    {
                        "id": "2018-50cent-chocobar-credit",
                        "amount": -50,
                        "contactEmail": "alice@example.com"
                        "tags": ["contact-promotions", "food-promos"],
                        "discount": true
                    },
                    {
                        "id": "alice-account-USD",
                        "amount": -1265,
                        "contactEmail": "alice@example.com",
                        "tags": ["contact-accounts"],
                        "discount": false
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {}
            }

### Debit [POST /transactions/debit]

Debit (remove value from) a payment rail.

Currently only the `lightrail` payment rail is supported.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + source (TransactionParty, required) - The rail to debit.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to credit, > 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all balance being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "id": "vs_1"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }
    
+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "balanceBefore": 5500,
                        "balanceAfter": 3000,
                        "balanceChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

### Credit [POST /transactions/credit]

Credit (add value to) a payment rail.

Currently only the `lightrail` payment rail is supported.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + destination (TransactionParty, required) - The rail to credit.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to credit, > 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "destination": {
                    "rail": "lightrail",
                    "id": "vs_1"
                },
                "amount": 2500,
                "currency": "XXX",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }
    
+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "credit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "balanceBefore": 1500,
                        "balanceAfter": 4000,
                        "balanceChange": 2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Frequent buyer bonus"
                }
            }

### Transfer [POST /transactions/transfer]

Transfer balance from one Value to another.

Currently only the `lightrail` payment rail is supported.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + source (TransactionParty, required) - The rail to take value from.  Only `lightrail` rails that refer to a specific Value are supported.
        + destination (TransactionParty, required) - The rail to send value to.  Only `lightrail` rails that refer to a specific Value are supported.
        + amount (number, required) - The amount to transfer, > 0.
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + simulate (boolean, optional) - If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change.
        + allowRemainder (boolean, optional) - If true the transaction will go through without all balance being debited, and the remainder indicated.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "source": {
                    "rail": "lightrail",
                    "id": "vs_1"
                },
                "destination": {
                    "rail": "lightrail",
                    "id": "alice-account-USD"
                },
                "amount": 2500,
                "currency": "USD",
                "metadata": {
                    "reference": "frequent-shopper-bonus-072301"
                }
            }

+ Response 200 (application/json)
    + Attributes
        + id (string, required) - Unique idempotent ID for the Transaction.
        + transactionType (string, required) - `transfer`
        + currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + steps (array[TransactionStep], required) - An array of transaction steps.
        + remainder (number, required) - The remainder of balance that could not be debited.
        + simulated (boolean, optional) - True if the transaction was simulated.
        + createdDate (string, required) - ISO date for when the Transaction was created.
        + pending (boolean, optional) - If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured.
        + metadata (object, optional) - Arbitrary data associated with the Transaction.

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "transfer",
                "currency": "USD",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "USD",
                        "balanceBefore": 2500,
                        "balanceAfter": 0,
                        "balanceChange": -2500
                    },
                    {
                        "rail": "lightrail",
                        "id": "alice-account-USD",
                        "currency": "USD",
                        "balanceBefore": 5000,
                        "balanceAfter": 7500,
                        "balanceChange": 2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "reference": "loyalty-bonus-072301"
                }
            }

### Get Transactions [GET /transactions{?limit}{?offset}{?transactionType}{?minCreatedDate}{?maxCreatedDate}]

Get multiple Transactions.

---
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + limit (number, optional) - The max number of items to get.
    + offset (number, optional) - The number of items to skip.
    + transactionType (string, optional) - Filter by the transactionType.
    + minCreatedDate (string, optional) - Filter by the minimum createdDate, inclusive.
    + maxCreatedDate (string, optional) - Filter by the maximum createdDate, inclusive.

+ Response 200 (application/json)
    + Headers
        
            Limit: 100
            MaxLimit: 1000
            Offset: 0
            Count: 1
        
    + Attributes (array[Transaction])

    + Body

            [
                {
                    "id": "unique-id-123",
                    "transactionType": "debit",
                    "currency": "XXX",
                    "steps": [
                        {
                            "rail": "lightrail",
                            "id": "vs_1",
                            "currency": "XXX",
                            "balanceBefore": 5500,
                            "balanceAfter": 3000,
                            "balanceChange": -2500
                        }
                    ],
                    "remainder": 0,
                    "simulated": false,
                    "createdDate": "2018-04-17T23:20:08.404Z",
                    "updatedDate": "2018-04-17T23:20:08.404Z",
                    "metadata": {
                        "note": "Reduce loyalty points after 3mo contact inactivity"
                    }
                }
            ]

### Get Transaction [GET /transactions/{id}]

Get Transaction by id.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the id of the Transaction to get.

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "balanceBefore": 5500,
                        "balanceAfter": 3000,
                        "balanceChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:20:08.404Z",
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

### Capture Pending Transaction [POST /transactions/{id}/capture]

Capture a pending Transaction by id.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the id of the pending Transaction to capture.

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "balanceBefore": 5500,
                        "balanceAfter": 3000,
                        "balanceChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "captured",
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

### Void Pending Transaction [POST /transactions/{id}/void]

Void a pending Transaction by id.

---

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + id (string) - the id of the pending Transaction to void.

+ Response 200 (application/json)
    + Attributes (Transaction)

    + Body

            {
                "id": "unique-id-123",
                "transactionType": "debit",
                "currency": "XXX",
                "steps": [
                    {
                        "rail": "lightrail",
                        "id": "vs_1",
                        "currency": "XXX",
                        "balanceBefore": 5500,
                        "balanceAfter": 3000,
                        "balanceChange": -2500
                    }
                ],
                "remainder": 0,
                "simulated": false,
                "pending": "void",
                "createdDate": "2018-04-17T23:20:08.404Z",
                "updatedDate": "2018-04-17T23:58:19.036Z"
                "metadata": {
                    "note": "Reduce loyalty points after 3mo contact inactivity"
                }
            }

## Currencies [/currencies]

A Currency is a unit of money in the system.  It can be a standard currency such as `USD`, or a made up currency such as `FUNBUX`.  All currencies must be created before they are used, though they are typically created on initial setup in the web app.

### Create a Currency [POST /currencies]

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <API_KEY>
        
    + Attributes
        + code (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
        + name (string, required) - Long name for the currency, eg: `Dollars`.
        + symbol (number, required) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, required) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

    + Body

            {
                "code": "USD",
                "name": "Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
    
+ Response 200 (application/json)
    + Attributes (Currency)

    + Body
            
            {
                "code": "USD",
                "name": "Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }
### Update a Currency [PATCH /currencies/{code}]

+ Parameter
    + code (string) - the code of the Currency to modify.

+ Request (application/merge-patch+json)

    Applies a JSON merge.  Only members that are present are changed and all others are left untouched.

    + Headers
    
            Authorization: Bearer <API_KEY>

    + Attributes
        + code (string, optional) - Short code for a currency, eg: `USD`, `FUNBUX`. If present must match the code in the path.
        + name (string, optional) - Long name for the currency, eg: `Dollars`.
        + symbol (string, optional) - Currency symbol used for formatting, eg: `$`.
        + decimalPlaces (number, optional) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.
        
    + Body
    
            {
                "name": "Zimbabwe Dollars",
                "symbol": "Z$"
            }
    
+ Response 200 (application/json)
    + Attributes (Currency)

    + Body
    
            {
                "code": "ZWD",
                "name": "Zimbabwe Dollars",
                "symbol": "Z$",
                "decimalPlaces": 2
            }
### Delete a Currency [DELETE /currencies/{code}]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + code (string) - the code of the Currency to delete.

+ Response 200 (application/json)
    
    + Body

            {
                "success": true
            }

+ Response 409 (application/json)

    Attempting to delete a Currency that is in use.  If the Currency is referenced a Value or Program those objects would need to be deleted first.  If the Currency is referenced by a Transaction it cannot be deleted because Transactions cannot be deleted.  Currencies in use can still be updated.

    + Body
    
            {
                "statusCode": 409,
                "message": "Currency 'USD' is in use.",
                "messageCode": "CurrencyInUse"
            }
### Get Currencies [GET /currencies]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Response 200 (application/json)
    + Attributes (array[Currency])

    + Body

            [
                {
                    "code": "USD",
                    "name": "Dollars",
                    "symbol": "$",
                    "decimalPlaces": 2
                }
            ]

### Get a Currency [GET /currencies/{code}]

+ Request
    + Headers
    
            Authorization: Bearer <API_KEY>

+ Parameter
    + code (string) - the code of the Currency to get.

+ Response 200 (application/json)
    + Attributes (Currency)

    + Body

            {
                "code": "USD",
                "name": "Dollars",
                "symbol": "$",
                "decimalPlaces": 2
            }

# Data Structures

## Currency (object)
+ code (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ name (number, required) - Long name for the currency, eg: `Dollars`.
+ symbol (number, required) - Currency symbol used for formatting, eg: `$`.
+ decimalPlaces (number, required) - The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.

## Contact (object)
+ contactId (string, required) - Unique idempotent ID for the Contact.
+ firstName (string, optional) - The Contact's first name.
+ lastName (string, optional) - The Contact's last name.
+ email (string, optional) - The Contact's email.
+ tags (array[string], optional) - Segmentation tags.
+ metadata (object, optional) - Arbitrary data associated with the Contact.
+ createdDate (string, required) - ISO date for when the Contact was created.
+ updatedDate (string, required) - ISO date for when the Contact was last updated.

## LineItem (object)
+ type (string, required) - Must be either `product`, `shipping` or `fee`.
+ productId (string, optional) -  The ID of the product.
+ variantId (string, optional) - The variant ID of a product. (Can be used to store SKU.)
+ unitPrice (number, required) -  The unit price of the item.
+ quantity (number, optional) -  The number of items. Defaults to 1 if not provided.
+ taxRate (number, optional) - Tax rate for the item. This is needed when a transaction contains items that have different tax rates.
+ tags (array[string], optional) - A list of tags associated with the item. For example, 'seasonal' or 'clothing'.
+ metadata (object, optional) - Any additional data you want to store for the item.

## LineItemResponse (LineItem)
+ valuesApplied (array[LineItemPromotions])
+ lineTotal (LineTotal)

## LineItemPromotions (object)
+ id (string) - Unique idempotent id for the Value.
+ redemptionRule (string) - A Redemption Rule controlling when the Value can be used in an order.
+ ruleExplanation (string) - An explanation for the `redemptionRule` does that can be used to display to the contact.
+ amount (number) - The value of the discount.
+ preTax (boolean) - If true the Value's balance is applied before tax is calculated.

## LineTotal (object)
+ price (number) - The total cost of the items. ie `unitPrice * quantity`.
+ taxable (number) - The taxable amount. ie `price - preTaxDiscount`.
+ tax (number) - The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding'.
+ discount (number) - The discount
+ payable (number) - The cost of the line item after tax and discounts have been applied.

## Program (object)
+ programId (string, required) - Unique idempotent ID for the Program.
+ name (string, optional) - A human-readable name for the Program.
+ currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ access (enum[string], required) - How the values can be accessed.
    + `contactId` - must be associated with a contactId.
    + `secureCode` - a code is generated or supplied and is stored securely.
    + `publicCode` - a code is generated or supplied and can be displayed.
+ discount (boolean, required) - If true the Value will be noted as a discount for the contact in orders.
+ preTax (boolean, required) - If true the Value's balance is applied before tax is calculated.
+ active (boolean, optional) - Whether the Value is active and can be used upon creation.
+ redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in an order.
+ valueRule (number, optional) - A Value Rule controlling the effective balance of the Value in an Order.  To use this `balance` must be set to `null`.
+ minInitialBalance (number, optional) - 
+ maxInitialBalance (number, optional) - 
+ fixedInitialValues (array[number], optional) - A list of values the Value can be created with.
+ uses (number, optional) - If set the number of uses the Value will be created with.  Set `null` or omit for infinite uses.
+ tags (array[string], optional) - Segmentation tags.
+ createdDate (string, required) - ISO date for when the Program was created.
+ updatedDate (string, required) - ISO date for when the Program was last updated.
+ metadata (object, optional) - Arbitrary data associated with the Program.

## Rule (object)
+ rule (string, required) - the Lightrail Rule text of the rule.
+ explanation (string, required) - a plain explanation of the rule seen by contacts.

## Transaction (object)
+ id (string, required) - Unique idempotent ID for the Transaction.
+ transactionType (string, required) - The type of the transaction, eg: `debit`, `credit`, `order`...
+ currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ steps (array[TransactionStep], required) - An array of transaction steps.
+ remainder (number, required) - The remainder of balance that could not be debited.
+ simulated (boolean, optional) - True if the transaction was simulated.
+ pending (enum[string], optional) - The pending status.  Only set if the Transaction was created with `pending` set to `true`.
    + `pending` - created pending and unresolved.
    + `captured` - created pending and captured.  The Transaction is final.
    + `void` - created pending and voided.  The Transaction was unrolled and all funds released back to their sources.
+ createdDate (string, required) - ISO date for when the Transaction was created.
+ updatedDate (string, required) - ISO date for when the Contact was last updated.
+ metadata (object, optional) - Arbitrary data associated with the Transaction.

## TransactionParty (object)
+ rail (string, required) - The payment rail. Must belong to [`lightrail`, `stripe`, `internal`]. Must be used in combination with one of the following identifiers.
+ contactId (string, optional) - `lightrail`: the Contact's contactId.
+ code (string, optional) - `lightrail`: the code of a gift card or promotion.
+ id (string, optional) - `lightrail`: The ID of a Value.
+ token (string, optional) - `stripe`: a tokenized credit card for Stripe.  
+ id (string, optional) - `internal`: the ID of the internal value.
+ balance (number, optional) - `internal`: the amount of internal value.
+ beforeLightrail (boolean, optional) - `internal`: if true this value is applied before Lightrail Values, otherwise it will be applied after.

## TransactionStep (object)
A step taken as part of the transaction.
+ rail (string, required) - Indicates the payment rail. Must be either `lightrail`, `stripe` or `internal`.

## LightrailTransactionStep (TransactionStep)
+ rail (string, required) - `lightrail`
+ id (string, required) - the id of the Value transacted with.
+ currency (string, required) - the currency of the Value transacted with.
+ contactId (string, optional) - the contactId of the Contact associated with the Value.
+ code (string, optional) - The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `…ABCD`..
+ balanceBefore (number, required) - the balance of the Value before the transaction.
+ balanceAfter (number, required) - the balance of the Value after the transaction.
+ balanceChange (number, required) - the net balance change of the Value for the transaction.

## StripeTransactionStep (TransactionStep)
+ rail (string, required) - `stripe`
+ amount (number, required) - the amount of the charge.
+ chargeId (string, optional) - the ID of the Stripe charge, if applicable.
+ charge (object, optional) - the Stripe Charge object, if applicable.

## InternalTransactionStep (TransactionStep)
+ rail (string, required) - `internal`
+ id (string, required) - the ID of the internal value transacted with.
+ balanceBefore (number, required) - the balance of the internal value before the transaction.
+ balanceAfter (number, required) - the balance of the internal value after the transaction.
+ balanceChange (number, required) - the net balance change of the internal value for the transaction.

## Value (object)
+ id (string, required) - Unique idempotent id for the Value.
+ programId (string, optional) - The programId of the Program this Value is in.
+ currency (string, required) - Short code for a currency, eg: `USD`, `FUNBUX`.
+ balance (number, optional) - An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500.
+ discount (boolean, optional) - If true the Value will be noted as a discount for the contact in orders.
+ preTax (boolean, optional) - If true the Value's balance is applied before tax is calculated.
+ active (boolean, optional) - Whether the Value is active and can be used upon creation.
+ frozen (boolean, optional) - If true the Value is frozen and cannot be transacted with.
+ redemptionRule (Rule, optional) - A Redemption Rule controlling when the Value can be used in an order.
+ valueRule (number, optional) - A Value Rule controlling the effective balance of the Value in an Order.  To use this `balance` must be set to `null`.
+ uses (number, optional) - The number of times the Value can be transacted with.
+ startDate (number, optional) - ISO date for when the Value can start to be transacted with.
+ endDate (number, optional) - ISO date for when the Value can last be transacted with.
+ metadata (number, optional) - Arbitrary data associated with the Value.
+ createdDate (string, required) - ISO date for when the Contact was created.
+ updatedDate (string, required) - ISO date for when the Contact was last updated.