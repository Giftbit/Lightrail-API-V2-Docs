openapi: 3.0.0
info:
  title: Lightrail Documentation
  description: |-
    ## Introduction
    Welcome to Lightrail. Lightrail is accessed through REST calls and [JSON](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON)-encoded data.  You can build in to the API using one of our [libraries](https://www.lightrail.com/docs/#client-libraries/client-libraries) or directly with the REST/HTTP client of your choice.

    You can test drive the API with a REST client like [Insomnia](https://support.insomnia.rest/article/52-importing-and-exporting-data) or [Postman](https://learning.postman.com/docs/integrations/available-integrations/working-with-openAPI/).  Download the OpenAPI spec using the download button above, import it, configure a test mode [API key](#section/Authentication) from Lightrail and start playing.

    If you're just starting to learn about Lightrail start with the [object model documentation](https://www.lightrail.com/docs/#object-model/object-model).

    ## Dates and Durations
    All dates and durations are sent and received in ISO 8601 format.

    Date format: `YYYY-MM-DDTHH:MM:SS.SSSZ`

    Example date: `2007-04-05T14:30:00.000Z`

    Duration format: `PnYnMnDTnHnMnS`

    Example duration: `P7DT12H`

    ## Filtering
    Resources that may contain lots of entries ([Contacts](#operation/ListContacts), [Values](#operation/ListValues), [Programs](#tag/Programs/list-programs), [Transactions](#operation/ListTransactions)) have filters for retrieving a subset of the entries.

    Some query filter properties support operators for more powerful filtering.  The operator is specified after the property and a dot (eg: `balance.ne` for balance not equal to).

    | operator | description |
    |----------|-------------|
    | lt       | Less than (&lt;). |
    | lte      | Less than or equal to (&lt;=). |
    | gt       | Greater than (&gt;). |
    | gte      | Greater than or equal to (&gt;=). |
    | eq       | Equal to (==).  This is the default where no operator is specified. |
    | ne       | Not equal to (!=). |
    | in       | Equals one of the members of a comma-separated list.  Literal commas must be escaped (\\,). |
    | like     | Equal to with wildcard support.  Percent signs (%) in the value are wild.  This operator is only supported on string properties. |
    | isNull   | Equal to null (true) or not equal to null (false). |
    | orNull   | Allows other filters acting on the same property to also include results if the property is equal to null (true), or, not equal to null (false). |

    **Examples**
    1. List [Contacts](#operation/ListContacts) where `email` equals "mia.wallace@example.com" or "mia_wallace@example.com":
    `https://api.lightrail.com/v2/contacts?email.in=mia.wallace@example.com,mia_wallace@example.com`

    2. List [Values](#operation/ListValues) where `currency` equals "USD" and `balance` greater than or equal to $10:
    `https://api.lightrail.com/v2/values?currency=USD&balance.gte=1000`

    3. List [Contacts](#operation/ListContacts) where `email` address is "like" `%@gmail.com` where `%` acts as a wild card (ie: ends with @gmail.com).
    `https://api.lightrail.com/v2/contacts?email.like=%@gmail.com`

    4. List [Programs](#tag/Programs/list-programs) where `endDate` is greater than date or `null` (ie: filtering for non-expired).
    `https://api.lightrail.com/v2/programs?endDate.gt=2019-11-08T12:00:00.000Z&endDate.orNull=true`

    ## Paging
    Resources that may contain lots of entries ([Contacts](#operation/ListContacts), [Values](#operation/ListValues), [Programs](#tag/Programs/list-programs)) may not return all results in a single response.  Instead they return a number of results limited by the `limit` query parameter.

    Retrieving results after the first page means following links in the [Link header](https://tools.ietf.org/html/rfc5988).  Here's an example Link header...

    ```text
    (all line-breaks are inserted here for clarity and don't exist in production)

    Link:
      </v2/contacts?limit=100>;
        rel="first",
      </v2/contacts?limit=100&before=eyJpZCI6ImplZmYgaXMgYXdlc29tZSJ9>;
        rel="prev",
      </v2/contacts?limit=100&next=eyJpZCI6ImplbiBpcyBhd2Vzb21lIHRvbyJ9>;
        rel="next",
      </v2/contacts?limit=100&last=true>;
        rel="last"
    ```

    This example has links to the first page, the previous page, the next page, and the last page.  When already at the first page there will only be links to the next and last.  When already at the last page there will only be links to the first and prev.  If there are no results to page though or only one page there will not be any links.

    It's important to follow the links in the Link header and not construct the URLs on your own.

    ## Errors
    Lightrail uses the following HTTP status codes to indicate an error:

    | code | meaning |
    |------|---------|
    | 400  | The request could not be understood.  eg: JSON body could not be parsed. |
    | 401  | Authentication missing. |
    | 403  | The operation is not allowed for the given authentication. |
    | 404  | The resource was not found.  eg: There is no Contact for the given ID. |
    | 409  | The operation could not be performed because of the state of the system.  eg: There is not enough balance for a Transaction to complete. |
    | 422  | The request was understood but has a logical problem.  eg: Attempting to credit a negative amount. If using the `stripe` payment rail, most Stripe errors will result in a `422`. |
    | 424  | The request failed due to a failed third party dependency (such as an error calling Stripe). This can indicate that Lightrail and a third party are an inconsistent state. eg: While attempting to reverse a checkout Transaction with two Stripe charges, the first charge is refunded but the second refund fails. Refunds in Stripe cannot be undone which leaves the system in a state that it cannot automatically recover from. Note, this status code is extremely rare and represents a worst-case scenario for which some intervening action will be necessary. |
    | 429  | Too many requests in a given amount of time. |
    | 500  | Internal server error.  Please [contact us](mailto:hello@lightrail.com) with details of your request and we'll look into it. |

    Lightrail errors contain a JSON body with the following properties:

    | property    | always present | purpose |
    |-------------|----------------|---------|
    | message     | yes            | English explanation of the error.  This is for display purposes only as the explanation may be formatted or change between system updates. |
    | statusCode  | yes            | The HTTP status code. |
    | messageCode | no             | A constant corresponding to the message.  This can be used to take action in response to the error. |
    | stripeError | no             | When using the `stripe` rail: the full error response from Stripe in case of an error charging a credit card. |

    An example:

    ```json
    {
        "message": "Insufficient balance for the transaction.",
        "statusCode": 409,
        "messageCode": "InsufficientBalance"
    }
    ```

    ## Support
    [Contact us](mailto:hello@lightrail.com) any time if you have any questions.  We're here to help.
  contact:
    name: Lightrail Support
    email: hello@lightrail.com
  version: 'v2'
servers:
  - url: https://api.lightrail.com/v2
    variables: {}
paths:
  /currencies:
    post:
      tags:
        - Currencies
      summary: Create a Currency
      description: ''
      operationId: CreateCurrency
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCurrencyRequest'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
    get:
      tags:
        - Currencies
      summary: List Currencies
      description: ''
      operationId: ListCurrencies
      parameters: []
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
                description: ''
              examples:
                listCurrenciesResponse:
                  $ref: '#/components/examples/listCurrenciesResponse'
  /currencies/{code}:
    get:
      tags:
        - Currencies
      summary: Get a Currency
      description: ''
      operationId: GetCurrency
      parameters:
        - name: code
          in: path
          description: the code of the Currency to get.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
              examples:
                getCurrencyResponse:
                  $ref: '#/components/examples/getCurrencyResponse'
    patch:
      tags:
        - Currencies
      summary: Update a Currency
      description: ''
      operationId: UpdateCurrency
      parameters:
        - name: code
          in: path
          description: the code of the Currency to modify.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: Applies a JSON merge. Only members that are present are changed and all others are left untouched.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCurrencyRequest'
            example:
              name: Zimbabwe Dollars
              symbol: Z$
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
    delete:
      tags:
        - Currencies
      summary: Delete a Currency
      description: ''
      operationId: DeleteCurrency
      parameters:
        - name: code
          in: path
          description: the code of the Currency to delete.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCurrencyResponse'
              example:
                success: true
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              examples:
                deleteCurrencyInUseResponse:
                  $ref: '#/components/examples/deleteCurrencyInUseResponse'
  /contacts:
    post:
      tags:
        - Contacts
      summary: Create a Contact
      description: ''
      operationId: CreateContact
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactRequest'
            examples:
              createContactRequest:
                $ref: '#/components/examples/createContactRequest'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                createContactResponse:
                  $ref: '#/components/examples/createContactResponse'
        409:
          description: Conflict
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              examples:
                createContactAlreadyExistsResponse:
                  $ref: '#/components/examples/createContactAlreadyExistsResponse'
    get:
      tags:
        - Contacts
      summary: List Contacts
      description: ''
      operationId: ListContacts
      parameters:
        - $ref: '#/components/parameters/limit'
        - name: id
          in: query
          description: Filter by ID.  This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: firstName
          in: query
          description: 'Filter by the firstName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: lastName
          in: query
          description: 'Filter by the lastName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: email
          in: query
          description: 'Filter by email.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: valueId
          in: query
          description: 'Filter by Value ID. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Success
          headers:
            Limit:
              $ref: '#/components/headers/Limit'
            MaxLimit:
              $ref: '#/components/headers/MaxLimit'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
                description: ''
              examples:
                listContactsResponse:
                  $ref: '#/components/examples/listContactsResponse'
  /contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Get a Contact
      description: ''
      operationId: GetaContact
      parameters:
        - name: id
          in: path
          description: The ID of the Contact to get.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              example:
                createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
                createdDate: 2020-08-26T18:04:44.000Z
                email: thedude@example.com
                firstName: Jeffrey
                id: f3036399-0963-4c3d-9
                lastName: Lebowski
                metadata:
                  alias: El Duderino
                updatedDate: 2020-08-26T18:04:44.000Z
    patch:
      tags:
        - Contacts
      summary: Update a Contact
      description: ''
      operationId: UpdateContact
      parameters:
        - name: id
          in: path
          description: The ID of the Contact to update.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: Applies a JSON merge. Only members that are present are changed and all others are left untouched.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactRequest'
            examples:
              updateContactRequest:
                $ref: '#/components/examples/updateContactRequest'
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                updateContactResponse:
                  $ref: '#/components/examples/updateContactResponse'
    delete:
      tags:
        - Contacts
      summary: Delete a Contact
      description: ''
      operationId: DeleteContact
      parameters:
        - name: id
          in: path
          description: The ID of the Contact to delete.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteContactResponse'
              example:
                success: true
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              example:
                statusCode: 409
                message: Contact 'unique-id-123' is in use
                messageCode: ContactInUse
  /contacts/{id}/values/attach:
    post:
      tags:
        - Contacts
      summary: Attach a Contact to a Value
      description: |-
        Attaching a Value to a Contact will associate the Value with the Contact. The Contact then "has" that Value. In a checkout Transaction, specifying the `contactId` as a payment source will resolve to all associated Values for the Contact to be considered for the Transaction.

        If attaching a Unique Value (`isGenericCode=false`) the Value's `contactId` will be set to the ID of the Contact attached to it. If attaching a Generic Code (`isGenericCode=true`) it depends on whether the Generic Code has `genericCodeOptions.perContact` properties set. If set, attaching will result in a new Value being created using the perContact properties for the new Value's `balance` and `usesRemaining`. If not set, the Generic Code will be shared and the Contact will receive a reference to the Generic Code. You can [list the Value's Contacts](#tag/Values/list-a-value's-attached-contacts) to see all Contacts attached to the Value.
      operationId: AttachContactToValue
      parameters:
        - name: id
          in: path
          description: The ID of the Contact to attach Value to.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachContactToValue'
            examples:
              attachValueRequest:
                $ref: '#/components/examples/attachValueRequest'
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
              examples:
                attachValueResponse:
                  $ref: '#/components/examples/attachValueResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /contacts/{id}/values/detach:
    post:
      tags:
        - Contacts
      summary: Detach a Contact from a Value
      description: ''
      operationId: DetachContactFromValue
      parameters:
        - name: id
          in: path
          description: The ID of the Contact to detach the Value from.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetachContactFromValueRequest'
            examples:
              detachValueRequest:
                $ref: '#/components/examples/detachValueRequest'
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
              examples:
                detachValueResponse:
                  $ref: '#/components/examples/detachValueResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /contacts/{id}/values:
    get:
      tags:
        - Contacts
      summary: List a Contact's Values
      description: ''
      operationId: ListaContact'sValues
      parameters:
        - name: id
          in: path
          description: The ID of the Contact to get the Values of.
          required: true
          style: simple
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - name: programId
          in: query
          description: Filter by Program ID.  This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: currency
          in: query
          description: Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: balance
          in: query
          description: 'Filter by balance.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: number
            format: double
        - name: usesRemaining
          in: query
          description: 'Filter by number of uses remaining.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: number
            format: double
        - name: discount
          in: query
          description: Filter by discount.
          style: form
          explode: true
          schema:
            type: boolean
        - name: active
          in: query
          description: Filter active/inactive.
          style: form
          explode: true
          schema:
            type: boolean
        - name: frozen
          in: query
          description: Filter frozen/unfrozen.
          style: form
          explode: true
          schema:
            type: boolean
        - name: canceled
          in: query
          description: Filter canceled.
          style: form
          explode: true
          schema:
            type: boolean
        - name: pretax
          in: query
          description: Filter by whether or not the Value is applied pretax.
          style: form
          explode: true
          schema:
            type: boolean
        - name: startDate
          in: query
          description: 'Filter by startDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: endDate
          in: query
          description: 'Filter by endDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: createdDate
          in: query
          description: 'Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: updatedDate
          in: query
          description: 'Filter by updatedDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Success
          headers:
            Limit:
              $ref: '#/components/headers/Limit'
            MaxLimit:
              $ref: '#/components/headers/MaxLimit'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Value'
                description: ''
              examples:
                listContactsValueResponse:
                  $ref: '#/components/examples/listContactsValueResponse'
  /values:
    post:
      tags:
        - Values
      summary: Create a Value
      description: ''
      operationId: CreateValue
      parameters:
        - name: showCode
          in: query
          description: Show the full code for the Value.  This is useful when using the `generateCode` param and you want to see the generated code.
          style: form
          explode: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateValueRequest'
            examples:
              createValue1Request:
                $ref: '#/components/examples/createValue1Request'
              createValue2Request:
                $ref: '#/components/examples/createValue2Request'
              createValue3Request:
                $ref: '#/components/examples/createValue3Request'
              createValue4Request:
                $ref: '#/components/examples/createValue4Request'
        required: true
      responses:
        201:
          description: Value created successfully.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
              examples:
                createValue1Response:
                  $ref: '#/components/examples/createValue1Response'
                createValue2Response:
                  $ref: '#/components/examples/createValue2Response'
                createValue3Response:
                  $ref: '#/components/examples/createValue3Response'
                createValue4Response:
                  $ref: '#/components/examples/createValue4Response'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              examples:
                createValueAlreadyExists:
                  $ref: '#/components/examples/createValueAlreadyExistsResponse'
    get:
      tags:
        - Values
      summary: List Values
      description: ''
      operationId: ListValues
      parameters:
        - $ref: '#/components/parameters/limit'
        - name: showCode
          in: query
          description: Show the full code for the Value.
          style: form
          explode: true
          schema:
            type: boolean
        - name: code
          in: query
          description: The code (secret or generic) of the Value to get.
          style: form
          explode: true
          schema:
            type: string
          example: SUMMERPROMO
        - name: programId
          in: query
          description: Filter by Program ID.  This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: currency
          in: query
          description: Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: contactId
          in: query
          description: Filter by Values attached to the given Contact ID.
          style: form
          explode: true
          schema:
            type: string
        - name: isGenericCode
          in: query
          description: Filter by isGenericCode.
          style: form
          explode: true
          schema:
            type: boolean
        - name: balance
          in: query
          description: 'Filter by balance.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: number
            format: double
        - name: usesRemaining
          in: query
          description: 'Filter by number of uses remaining.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: number
            format: double
        - name: discount
          in: query
          description: Filter by discount.
          style: form
          explode: true
          schema:
            type: boolean
        - name: active
          in: query
          description: Filter active/inactive.
          style: form
          explode: true
          schema:
            type: boolean
        - name: frozen
          in: query
          description: Filter frozen/unfrozen.
          style: form
          explode: true
          schema:
            type: boolean
        - name: canceled
          in: query
          description: Filter canceled.
          style: form
          explode: true
          schema:
            type: boolean
        - name: pretax
          in: query
          description: Filter by whether or not the Value is applied pretax.
          style: form
          explode: true
          schema:
            type: boolean
        - name: startDate
          in: query
          description: 'Filter by startDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: endDate
          in: query
          description: 'Filter by endDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: createdDate
          in: query
          description: 'Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: updatedDate
          in: query
          description: 'Filter by updatedDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Success
          headers:
            Limit:
              $ref: '#/components/headers/Limit'
            MaxLimit:
              $ref: '#/components/headers/MaxLimit'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Value'
                description: ''
              examples:
                listValuesResponse:
                  $ref: '#/components/examples/listValuesResponse'
  /values/{id}:
    get:
      tags:
        - Values
      summary: Get a Value
      description: ''
      operationId: GetValue
      parameters:
        - name: id
          in: path
          description: The ID of the Value to get.
          required: true
          style: simple
          schema:
            type: string
        - name: showCode
          in: query
          description: Show the full code for the Value.
          style: form
          explode: true
          schema:
            type: boolean
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
    patch:
      tags:
        - Values
      summary: Update a Value
      description: ''
      operationId: UpdateValue
      parameters:
        - name: id
          in: path
          description: The ID of the Value to modify.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: Applies a JSON merge. Only members that are present are changed and all others are left untouched.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateValueRequest'
            examples:
              updateValueRequest:
                $ref: '#/components/examples/updateValueRequest'
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
              examples:
                updateValueResponse:
                  $ref: '#/components/examples/updateValueResponse'
  /values/{id}/changeCode:
    post:
      tags:
        - Values
      summary: Change a Value's code
      description: ''
      operationId: ChangeValueCode
      parameters:
        - name: id
          in: path
          description: The ID of the Value to change the code of.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeValueCodeRequest'
            examples:
              changeCodeRequest:
                $ref: '#/components/examples/changeCodeRequest'
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
              examples:
                changeCodeResponse:
                  $ref: '#/components/examples/changeCodeResponse'
  /values/{id}/transactions:
    get:
      tags:
        - Values
      summary: List a Value's Transactions
      description: ''
      operationId: ListValueTransactions
      parameters:
        - name: id
          in: path
          description: The ID of the Value to get the Transactions of.
          required: true
          style: simple
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - name: transactionType
          in: query
          description: Filter by the transactionType.  This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: createdDate
          in: query
          description: 'Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: currency
          in: query
          description: Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Success
          headers:
            Limit:
              $ref: '#/components/headers/Limit'
            MaxLimit:
              $ref: '#/components/headers/MaxLimit'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
                description: ''
  /values/{id}/contacts:
    get:
      tags:
        - Values
      summary: List a Value's Attached Contacts
      description: ''
      operationId: ListValueAttachedContacts
      parameters:
        - name: id
          in: path
          description: The ID of the Value to get the Contacts of.
          required: true
          style: simple
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - name: firstName
          in: query
          description: 'Filter by the firstName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: lastName
          in: query
          description: 'Filter by the lastName.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: email
          in: query
          description: 'Filter by email.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Success
          headers:
            Limit:
              $ref: '#/components/headers/Limit'
            MaxLimit:
              $ref: '#/components/headers/MaxLimit'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
                description: ''
              examples:
                listValueContactsResponse:
                  $ref: '#/components/examples/listValueContactsResponse'
  /programs:
    post:
      tags:
        - Programs
      summary: Create a Program
      operationId: CreateProgram
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProgramRequest'
            examples:
              createProgramRequest:
                $ref: '#/components/examples/createProgramRequest'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
              examples:
                createProgramResponse:
                  $ref: '#/components/examples/createProgramResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              examples:
                createValueAlreadyExists:
                  $ref: '#/components/examples/createProgramAlreadyExistsResponse'
    get:
      tags:
        - Programs
      summary: List Programs
      description: ''
      operationId: ListPrograms
      parameters:
        - $ref: '#/components/parameters/limit'
        - name: id
          in: query
          description: Filter by ID. This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: currency
          in: query
          description: Filter by currency. This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: startDate
          in: query
          description: 'Filter by startDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: endDate
          in: query
          description: 'Filter by endDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: createdDate
          in: query
          description: 'Filter by createdDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: updatedDate
          in: query
          description: 'Filter by updatedDate. This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Success
          headers:
            Limit:
              $ref: '#/components/headers/Limit'
            MaxLimit:
              $ref: '#/components/headers/MaxLimit'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Program'
                description: ''
              examples:
                listProgramsResponse:
                  $ref: '#/components/examples/listProgramsResponse'
  /programs/{id}:
    get:
      tags:
        - Programs
      summary: Get a Program
      description: ''
      operationId: GetaProgram
      parameters:
        - name: id
          in: path
          description: The ID of the Program to get.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
    patch:
      tags:
        - Programs
      summary: Update a Program
      description: ''
      operationId: UpdateProgram
      parameters:
        - name: id
          in: path
          description: The ID of the Program to modify.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: "Applies a JSON merge. Only members that are present are changed and all others are left untouched. \nNote that updating a Program does not automatically update the attributes of Values that have already been generated through it. Only new Values generated afterwards will reflect the changes. If you want existing Values to reflect your changes, you will need to update them in a separate step."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProgramRequest'
            examples:
              updateProgram1Request:
                $ref: '#/components/examples/updateProgram1Request'
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                updateProgram1Response:
                  $ref: '#/components/examples/updateProgram1Response'
    delete:
      tags:
        - Programs
      summary: Delete a Program
      description: ''
      operationId: DeleteProgram
      parameters:
        - name: id
          in: path
          description: The ID of the Promotion Program to delete.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProgramResponse'
              example:
                success: true
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              example:
                statusCode: 409
                message: Program 'abc123' is in use.
                messageCode: ProgramInUse
  /programs/{id}/issuances:
    post:
      tags:
        - Programs
      summary: Create an Issuance
      description: |-
        An Issuance creates many [Values](#tag/Values) in bulk and is tracked for downloading secure codes after creation.  This is primarily used by the web app.  When creating only a few Values use [Create Value](#tag/Values/create-a-value) instead.
      operationId: CreateIssuance
      parameters:
        - name: id
          in: path
          description: The ID of the Program to issue Value from.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIssuanceRequest'
            examples:
              createIssuanceRequest:
                $ref: '#/components/examples/createIssuanceRequest'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuance'
              examples:
                createIssuanceResponse:
                  $ref: '#/components/examples/createIssuanceResponse'
    get:
      tags:
        - Programs
      summary: List Issuances
      description: ''
      operationId: ListIssuances
      parameters:
        - name: id
          in: path
          description: The ID of the Program to get Issuances from.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers:
            Limit:
              $ref: '#/components/headers/Limit'
            MaxLimit:
              $ref: '#/components/headers/MaxLimit'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issuance'
                description: ''
              examples:
                listIssuancesResponse:
                  $ref: '#/components/examples/listIssuancesResponse'
  /programs/{programId}/issuances/{issuanceId}:
    get:
      tags:
        - Programs
      summary: Get an Issuance
      description: ''
      operationId: GetanIssuance
      parameters:
        - name: issuanceId
          in: path
          description: The ID of the Issuance to get.
          required: true
          style: simple
          schema:
            type: string
        - name: programId
          in: path
          description: The ID of the Program of the Issuance.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuance'
  /transactions/checkout:
    post:
      tags:
        - Transactions
      summary: Checkout
      description: |-
        The checkout endpoint collects all payment for a purchase.  It can apply all Lightrail promotions, calculate tax, debit funds from Lightrail and charge credit cards through Stripe. Your Stripe account must be [connected to Lightrail](https://www.lightrail.com/app/#/account/api) in order for Lightrail to make charges on your behalf.

        Lightrail and Stripe payment sources are referred to as the payment rails `lightrail` and `stripe` respectively. There is also an `internal` payment rail which can be used to represent any other payment source. This is intended as a stop-gap solution to support transitioning from legacy systems.

        Error responses: If using the `stripe` rail, it is possible for checkout transactions to fail for reasons outside of Lightrail's control, such as an invalid card token or a card being declined. Stripe errors will be passed on in full under the `stripeError` key in the response.
      operationId: Checkout
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
            examples:
              checkout1Request:
                $ref: '#/components/examples/checkout1Request'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              examples:
                checkout1Response:
                  $ref: '#/components/examples/checkout1Response'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripeRestError'
              example:
                statusCode: 409
                message: Insufficient balance for the transaction.
                messageCode: InsufficientBalance
  /transactions/debit:
    post:
      tags:
        - Transactions
      summary: Debit
      description: |-
        Debit (remove an amount from) a Lightrail payment source.  Debiting is simpler and less powerful than checkout.  It does not apply the promotion logic of `balanceRules`, or calculate discounts or taxes.
      operationId: Debit
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DebitRequest'
            examples:
              debitTransactionRequest:
                $ref: '#/components/examples/debitTransactionRequest'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              examples:
                debitTransactionResponse:
                  $ref: '#/components/examples/debitTransactionResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              examples:
                debitTransactionInsufficientBalanceResponse:
                  $ref: '#/components/examples/debitTransactionInsufficientBalanceResponse'
                debitTransactionAlreadyExistsResponse:
                  $ref: '#/components/examples/debitTransactionAlreadyExistsResponse'
                debitTransactionFrozenResponse:
                  $ref: '#/components/examples/debitTransactionFrozenResponse'
  /transactions/credit:
    post:
      tags:
        - Transactions
      summary: Credit
      description: |-
        Credit (add an amount to) a Lightrail payment destination.
      operationId: Credit
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditRequest'
            examples:
              creditTransactionRequest:
                $ref: '#/components/examples/creditTransactionRequest'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              examples:
                creditTransactionResponse:
                  $ref: '#/components/examples/creditTransactionResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              examples:
                creditTransactionAlreadyExistsResponse:
                  $ref: '#/components/examples/creditTransactionAlreadyExistsResponse'
                creditTransactionFrozenResponse:
                  $ref: '#/components/examples/creditTransactionFrozenResponse'
  /transactions/transfer:
    post:
      tags:
        - Transactions
      summary: Transfer
      description: |-
        Transfer value from a Lightrail or Stripe payment source to a Lightrail payment destination.
      operationId: Transfer
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
            examples:
              transferRequest:
                $ref: '#/components/examples/transferRequest'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              examples:
                transferResponse:
                  $ref: '#/components/examples/transferResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripeRestError'
              examples:
                transferInsufficientBalanceResponse:
                  $ref: '#/components/examples/transferInsufficientBalanceResponse'
                transferTransactionExistsResponse:
                  $ref: '#/components/examples/transferTransactionExistsResponse'
                transferFrozenResponse:
                  $ref: '#/components/examples/transferFrozenResponse'
  /transactions/{id}/reverse:
    post:
      tags:
        - Transactions
      summary: Reverse
      description: |-
        Reverses any balance changes, usesRemaining changes and Stripe charges of a Transaction. Reverse adds a Transaction to the [Transaction Chain](#operation/GetTransactionChain).

        Reversing a Transaction is not possible when: the Transaction is pending (must be voided or captured), one of the Values is frozen, the Transaction is a transfer from one Value to another and there is insufficient balance to reverse it.
      operationId: Reverse
      parameters:
        - name: id
          in: path
          description: The ID of any Transaction to reverse.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReverseRequest'
            examples:
              reverseCheckoutRequest:
                $ref: '#/components/examples/reverseCheckoutRequest'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              examples:
                reverseCheckoutResponse:
                  $ref: '#/components/examples/reverseCheckoutResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              examples:
                reverseCheckoutInsufficientBalanceResponse:
                  summary: Insufficient balance
                  value:
                    statusCode: 409
                    message: Insufficient balance for the transaction.
                    messageCode: InsufficientBalance
                reverseCheckoutAlreadyReversedResponse:
                  $ref: '#/components/examples/reverseCheckoutAlreadyReversedResponse'
  /transactions/{id}/capture:
    post:
      tags:
        - Transactions
      summary: Capture Pending
      description: |-
        Secures a pending Transaction and adds the capture to the [Transaction Chain](#operation/GetTransactionChain).  A pending Transaction is created when it is created with `pending=true`.  A pending Transaction will be automatically voided unless it is captured before the `pendingVoidDate`.

        Capturing a pending Transaction is not possible when one of the Values is frozen.
      operationId: CapturePending
      parameters:
        - name: id
          in: path
          description: The ID of the pending Transaction to capture.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapturePendingRequest'
            examples:
              pendingCaptureRequest:
                $ref: '#/components/examples/pendingCaptureRequest'
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              examples:
                pendingCaptureResponse:
                  $ref: '#/components/examples/pendingCaptureResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
              example:
                statusCode: 409
                message: Cannot capture Transaction because value 'valueId' is frozen.
                messageCode: ValueFrozen
  /transactions/{id}/void:
    post:
      tags:
        - Transactions
      summary: Void Pending
      description: |-
        Releases a pending Transaction and adds the void to the [Transaction Chain](#operation/GetTransactionChain).  A pending Transaction is created when it is created with `pending=true`.  A pending Transaction will be automatically voided but voiding it manually releases the funds sooner.
      operationId: VoidPending
      parameters:
        - name: id
          in: path
          description: The ID of the pending Transaction to void.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidPendingRequest'
            examples:
              pendingVoidRequest:
                $ref: '#/components/examples/pendingVoidRequest'
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              examples:
                pendingVoidResponse:
                  $ref: '#/components/examples/pendingVoidResponse'
  /transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Get a Transaction
      description: ''
      operationId: GetaTransaction
      parameters:
        - name: id
          in: path
          description: The ID of the Transaction to get.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transactions/{id}/chain:
    get:
      tags:
        - Transactions
      summary: Get Transaction Chain
      description: |-
        Get all Transactions in a Transaction Chain.

        A Transaction Chain is an ordered list of Transactions and results from creating Transactions that depend on another; such Transactions are [reverse](#operation/Reverse), [capture pending](#operation/CapturePending) and [void pending](#operation/VoidPending). The Transaction Chain can be retrieved using any Transaction ID in the chain and can be used to understand the current state of a Transaction.
      operationId: GetTransactionChain
      parameters:
        - name: id
          in: path
          description: The ID of any Transaction in the chain to look up.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers:
            Limit:
              $ref: '#/components/headers/Limit'
            MaxLimit:
              $ref: '#/components/headers/MaxLimit'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
                description: ''
              examples:
                transactionChainResponse:
                  $ref: '#/components/examples/transactionChainResponse'
  /transactions:
    get:
      tags:
        - Transactions
      summary: List Transactions
      description: ''
      operationId: ListTransactions
      parameters:
        - $ref: '#/components/parameters/limit'
        - name: transactionType
          in: query
          description: Filter by the transactionType.  This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: createdDate
          in: query
          description: 'Filter by createdDate.  This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#section/Filtering) for more information.'
          style: form
          explode: true
          schema:
            type: string
        - name: currency
          in: query
          description: Filter by currency.  This filter supports the operators `eq`, `in`.  See [filtering](#section/Filtering) for more information.
          style: form
          explode: true
          schema:
            type: string
        - name: valueId
          in: query
          description: Filter by Value ID used in the Transaction.
          style: form
          explode: true
          schema:
            type: string
      responses:
        200:
          description: Success
          headers:
            Limit:
              $ref: '#/components/headers/Limit'
            MaxLimit:
              $ref: '#/components/headers/MaxLimit'
            Link:
              $ref: '#/components/headers/Link'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
                description: ''
              examples:
                listTransactionsResponse:
                  $ref: '#/components/examples/listTransactionsResponse'
  /webhooks:
    post:
      tags:
        - Webhooks
      summary: Create a Webhook
      description: ''
      operationId: CreateWebhook
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
            examples:
              createWebhookRequest:
                $ref: '#/components/examples/createWebhookRequest'
        required: true
      responses:
        201:
          description: Created
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
              examples:
                createWebhookResponse:
                  $ref: '#/components/examples/createWebhookResponse'
    get:
      tags:
        - Webhooks
      summary: List Webhooks
      description: ''
      operationId: ListWebhooks
      parameters: []
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
                description: ''
              examples:
                listWebhooksResponse:
                  $ref: '#/components/examples/listWebhooksResponse'
  /webhooks/{id}:
    get:
      tags:
        - Webhooks
      summary: Get a Webhook
      description: ''
      operationId: GetWebhook
      parameters:
        - name: id
          in: path
          description: The ID of the webhook.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
              examples:
                getWebhookResponse:
                  $ref: '#/components/examples/getWebhookResponse'
    patch:
      tags:
        - Webhooks
      summary: Update a Webhook
      description: ''
      operationId: UpdateWebhook
      parameters:
        - name: id
          in: path
          description: The ID of the webhook.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
            examples:
              updateWebhookRequest:
                $ref: '#/components/examples/updateWebhookRequest'
        required: true
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
              examples:
                updateWebhookResponse:
                  $ref: '#/components/examples/updateWebhookResponse'
    delete:
      tags:
        - Webhooks
      summary: Delete Webhook
      description: ''
      operationId: DeleteWebhook
      parameters:
        - name: id
          in: path
          description: The ID of the webhook.
          required: true
          style: simple
          schema:
            type: string
      responses:
        204:
          description: ''
          headers: {}
  /webhooks/{id}/secrets/{secretId}:
    get:
      tags:
        - Webhooks
      summary: Get Secret
      description: Get the secret used to sign the requests.
      operationId: GetSecret
      parameters:
        - name: id
          in: path
          description: The ID of the webhook.
          required: true
          style: simple
          schema:
            type: string
        - name: secretId
          in: path
          description: The ID of the secret.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSecret'
              example:
                id: ae5ebfa3-69a9-4946-a17d-886f87ee69c9
                secret: F5MUORROLVRSPGDP
                createdDate: 2020-03-26T20:48:01.251Z
    delete:
      tags:
        - Webhooks
      summary: Delete Secret
      description: Delete the secret used to sign requests
      operationId: DeleteSecret
      parameters:
        - name: id
          in: path
          description: The ID of the webhook.
          required: true
          style: simple
          schema:
            type: string
        - name: secretId
          in: path
          description: The ID of the secret.
          required: true
          style: simple
          schema:
            type: string
      responses:
        204:
          description: ''
          headers: {}
  /webhooks/{id}/secrets:
    post:
      tags:
        - Webhooks
      summary: Create Secret
      description: Create a new secret for this webhook.  This will not delete other secrets.  Having multiple secrets allows rotating secrets with 0 downtime.
      operationId: CreateSecret
      parameters:
        - name: id
          in: path
          description: The ID of the webhook.
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSecret'
              examples:
                createWebhookSecretResponse:
                  $ref: '#/components/examples/createWebhookSecretResponse'
components:
  schemas:
    CodeGeneration:
      title: CodeGeneration
      type: object
      properties:
        length:
          type: number
          description: The number of random characters in the code.  This number must be at least 5 to accommodate a reasonable amount of randomness.
        charset:
          type: string
          description: The set of characters to use for the random part of the code.  Defaults to all numbers and upper case letters.
        prefix:
          type: string
          description: Text prepended before the random characters in the code.
        suffix:
          type: string
          description: Text appended after the random characters in the code.
    Currency:
      title: Currency
      type: object
      properties:
        code:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        name:
          type: number
          description: 'Long name for the currency, eg: `Dollars`.'
        symbol:
          type: number
          description: 'Currency symbol used for formatting, eg: `$`.'
        decimalPlaces:
          type: number
          description: 'The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.'
        createdDate:
          type: string
          description: Date when the Currency was created.
        updatedDate:
          type: string
          description: Date when the Currency was last updated.
        createdBy:
          type: string
          description: The ID of the user who created the Currency.
    Contact:
      title: Contact
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Contact.
        firstName:
          type: string
          description: The Contact's first name.
        lastName:
          type: string
          description: The Contact's last name.
        email:
          type: string
          description: The Contact's email address.
        metadata:
          type: object
          description: Arbitrary data associated with the Contact.
        createdDate:
          type: string
          description: Date when the Contact was created.
        updatedDate:
          type: string
          description: Date when the Contact was last updated.
        createdBy:
          type: string
          description: The ID of the user who created the Contact.
    Issuance:
      title: Issuance
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Issuance.  Two Issuances can't have the same ID, guaranteeing repeated calls won't create extra resources.
        programId:
          type: string
          description: The ID of the program it was created from.
        count:
          type: number
          description: The numbers of Values to issue. Must be between 1-10000.
        balance:
          type: number
          description: The balance to set on each Value. This can be constrained by the Program's `minInitialBalance` and `maxInitialBalance` or must be in the `fixedInitialBalances` array.
        usesRemaining:
          type: number
          description: The usesRemaining to set on each Value. This can be restricted to Values defined by the Program's `fixedInitialUsesRemaining`.
        startDate:
          type: string
          description: Override the Program's startDate for the Value.
        endDate:
          type: string
          description: Override the Program's endDate for the Value.
        redemptionRule:
          $ref: '#/components/schemas/Rule'
        balanceRule:
          $ref: '#/components/schemas/Rule'
        metadata:
          type: object
          description: Arbitrary data associated with the Issuance.
        createdDate:
          type: string
          description: Date when the Issuance was created.
        updatedDate:
          type: string
          description: Date when the Issuance was last updated.
        createdBy:
          type: string
          description: The ID of the user who created the Issuance.
    LineItem:
      title: LineItem
      required:
        - unitPrice
      type: object
      properties:
        type:
          type: string
          description: Must be either `product`, `shipping` or `fee`.
        unitPrice:
          type: number
          description: The unit price of the item.
        productId:
          type: string
          description: The ID of the product.
        variantId:
          type: string
          description: The variant ID of a product. (Can be used to store SKU.)
        quantity:
          type: number
          description: The number of items. Defaults to 1 if not provided.
        taxRate:
          type: number
          description: Tax rate for the item. This is needed when a Transaction contains items that have different tax rates.
        marketplaceRate:
          type: number
          description: A number between 0 and 1 for the marketplace's commission rate. If this number is set on any lineItems then the `marketplace` section of totals will be calculated.
        tags:
          type: array
          items:
            type: string
          description: A list of tags associated with the item. For example, 'seasonal' or 'clothing'.
        metadata:
          type: object
          description: Any additional data you want to store for the item.
    LineItemResponse:
      title: LineItemResponse
      allOf:
        - $ref: '#/components/schemas/LineItem'
        - type: object
          properties:
            lineTotal:
              $ref: '#/components/schemas/LineTotal'
    LineTotal:
      title: LineTotal
      type: object
      properties:
        subtotal:
          type: number
          description: The total cost of the items. ie `unitPrice * quantity`.
        taxable:
          type: number
          description: The taxable amount. ie `price - pretaxDiscount`.
        tax:
          type: number
          description: The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding' by default.
        discount:
          type: number
          description: The discount
        sellerDiscount:
          type: number
          description: The amount of discount the seller is responsible for providing for the line item. Calculated if marketplaceRate is set on the line item and/or a Value with a discountSellerLiabilityRule is used to pay for the item.
        remainder:
          type: number
          description: 'The amount remaining to be paid for the line item after the transaction has been processed. Will be 0 unless the transaction has `allowRemainder: true`.'
        payable:
          type: number
          description: The cost of the line item after tax and discounts have been applied.
    Program:
      title: Program
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Program.
        name:
          type: string
          description: A human-readable name for the Program.
        currency:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        discount:
          type: boolean
          description: If true Values created in the Program will be marked as a discount on checkout.
        pretax:
          type: boolean
          description: If true the balance on Values created in the Program is applied on checkout before tax is calculated.
        active:
          type: boolean
          description: Whether Values created in the Program are active and can be used upon creation.
        redemptionRule:
          $ref: '#/components/schemas/Rule'
        balanceRule:
          $ref: '#/components/schemas/Rule'
        minInitialBalance:
          type: number
        maxInitialBalance:
          type: number
        fixedInitialBalances:
          type: array
          items:
            type: number
          description: A list of exact balances Values created in the Program can be created with.
        fixedInitialUsesRemaining:
          type: number
          description: A list of exact usesRemaining the Value can be created with.
        discountSellerLiability:
          type: number
          description: '(Note: deprecated, please use discountSellerLiabilityRule.) Applies to Values created in the Program. In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Program must be a discount, ie `discount: true`.'
        startDate:
          type: string
          description: Earliest date that Values created in the Program can be active.
        endDate:
          type: string
          description: Latest date that Values created in the Program can be active.
        metadata:
          type: object
          description: Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys.
        createdDate:
          type: string
          description: Date when the Program was created.
        updatedDate:
          type: string
          description: Date when the Program was last updated.
        createdBy:
          type: string
          description: The ID of the user who created the Program.
    RestError:
      title: RestError
      type: object
      properties:
        statusCode:
          type: number
          description: the HTTP status code.
        message:
          type: string
          description: an English explanation of the error.  This is for display purposes only as the explanation may be formatted or change between system updates.
        messageCode:
          type: string
          description: A constant corresponding to the message.  This can be used to take action in response to the error.
        stripeError:
          type: object
          description: 'When using the `stripe` rail: the full error response from Stripe in case of an error charging a credit card.'
    StripeRestError:
      title: StripeRestError
      allOf:
        - $ref: '#/components/schemas/RestError'
        - type: object
          properties:
            stripeError:
              type: object
              description: 'When using the `stripe` rail: the full error response from Stripe in case of an error charging a credit card.'
    Rule:
      title: Rule
      type: object
      properties:
        rule:
          type: string
          description: The Lightrail Rule text of the rule.
        explanation:
          type: string
          description: A description of the rule. You may choose to pass the explanation through to the end user.
    Tax:
      title: Tax
      type: object
      properties:
        roundingMode:
          type: string
          description: 'The rounding mode used for tax calculations. Modes: `"HALF_EVEN"`, `"HALF_UP"`. Defaults to `"HALF_EVEN"`, also known as bankers rounding, which is the standard for most financial calculations.'
    Transaction:
      title: Transaction
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Transaction.
        transactionType:
          type: string
          description: 'The type of the Transaction, eg: `debit`, `credit`, `checkout`...'
        currency:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        tax:
          $ref: '#/components/schemas/Tax'
        steps:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LightrailTransactionStep'
              - $ref: '#/components/schemas/StripeTransactionStep'
              - $ref: '#/components/schemas/InternalTransactionStep'
          description: An array of Transaction steps. A Transaction may have steps from different payment rails (`lightrail` | `stripe` | `internal`), which will have different attributes.
        totals:
          $ref: '#/components/schemas/TransactionTotals'
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItemResponse'
          description: Data on each LineItem in a checkout transaction. Will be `null` for other transaction types.
        paymentSources:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LightrailTransactionParty'
              - $ref: '#/components/schemas/StripeTransactionParty'
              - $ref: '#/components/schemas/InternalTransactionParty'
          description: An array of payment sources used in a checkout transaction (will be `null` for other transaction types). Sources may be from different payment rails (`lightrail` | `stripe` | `internal`), which will have different attributes.
        simulated:
          type: boolean
          description: If `true` the Transaction was simulated.
        pending:
          type: boolean
          description: If `true` the Transaction was created as pending and does not complete until captured.  Not all transactionTypes can be created as pending.
        pendingVoidDate:
          type: string
          description: Date after which the pending Transaction will be automatically [voided](#operation/VoidPending).  It cannot be [captured](#operation/CapturePending) after this Date.
        metadata:
          type: object
          description: Arbitrary data associated with the Transaction.
        createdDate:
          type: string
          description: Date when the Transaction was created.
        createdBy:
          type: string
          description: The ID of the user who created the Transaction.
    TransactionTotals:
      title: TransactionTotals
      type: object
      properties:
        subtotal:
          type: number
          description: The sum of all products, services and fees before tax or discounts.
        tax:
          type: number
          description: The amount of tax to be collected.
        discount:
          type: number
          description: The total amount of discounts applied.
        discountLightrail:
          type: number
          description: The amount discounted from Lightrail payment sources.
        payable:
          type: number
          description: The amount payable by the customer. Calculated as `payable = subtotal + tax - discount`.
        paidLightrail:
          type: number
          description: The amount paid from Lightrail payment sources.
        paidStripe:
          type: number
          description: The amount paid from Stripe payment sources.
        paidInternal:
          type: number
          description: The amount paid from Internal payment sources.
        remainder:
          type: number
          description: 'The amount still owing, if a remainder is allowed by setting `allowRemainder: true`.'
        forgiven:
          type: number
          description: The amount forgiven (will not be charged).  This happens when `forgiveSubMinAmount=true` and the amount is below the minimum a payment rail will process.
        marketplace:
          $ref: '#/components/schemas/TransactionTotalsMarketplace'
    TransactionTotalsMarketplace:
      title: TransactionTotalsMarketplace
      type: object
      properties:
        sellerDiscount:
          type: number
          description: The amount of discount the seller is responsible for providing (comes from Values with `discountSellerLiability` > 0).
        sellerGross:
          type: number
          description: The amount payable to the seller before discounts.
        sellerNet:
          type: number
          description: The amount payable to the seller after discounts.
    LightrailTransactionParty:
      title: LightrailTransactionParty
      description: A Value in Lightrail.  If `contactId` is specified a Value attached to the Contact will be used.
      required:
        - rail
      type: object
      properties:
        rail:
          type: string
          description: 'The payment rail: `lightrail`. Must be used in combination with one of the following identifiers.'
        code:
          type: string
          description: The code of a Gift Card or Promotion.
        contactId:
          type: string
          description: A Contact's ID.  This is shorthand for all Values that a Contact is associated with.
        valueId:
          type: string
          description: A Value's ID.
    LightrailUniqueTransactionParty:
      title: LightrailUniqueTransactionParty
      description: A Value in Lightrail.  A `contactId` cannot be specified because a specifiec Value must be chosen.
      required:
        - rail
      type: object
      properties:
        rail:
          type: string
          description: 'The payment rail: `lightrail`. Must be used in combination with one of the following identifiers.'
        code:
          type: string
          description: The code of a Gift Card or Promotion.
        valueId:
          type: string
          description: A Value's ID.
    StripeTransactionParty:
      title: StripeTransactionParty
      required:
        - rail
      type: object
      properties:
        rail:
          type: string
          description: 'The payment rail: `stripe`. Must be used in combination with a `source` or `customer` identifier.'
        source:
          type: string
          description: A tokenized credit card for Stripe.
        customer:
          type: string
          description: A Stripe customer ID (uses customer's default source).
        maxAmount:
          type: number
          description: The maximum amount that can be charged to the given Stripe source.
        minAmount:
          type: number
          description: The minimum amount that can be charged to the given Stripe source.  If unset [Stripe's default for the currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts) will be used.  Setting a lower number is not recommended unless the settlement currency is different from the transaction currency.
        forgiveSubMinAmount:
          type: boolean
          description: If `true` charge amounts below `minAmount` will be forgiven (not charged so that the transaction may complete).  This amount will be tracked in the response `totals.forgiven`.  Has no effect if the top level `allowRemainder=true`.
        additionalStripeParams:
          $ref: '#/components/schemas/AdditionalStripeChargeParams'
    InternalTransactionParty:
      title: InternalTransactionParty
      required:
        - rail
        - internalId
        - balance
      type: object
      properties:
        rail:
          type: string
          description: 'The payment rail: `internal`.'
        internalId:
          type: string
          description: The ID of the internal value.
        balance:
          type: number
          description: The amount of internal value stored.
        beforeLightrail:
          type: boolean
          description: 'If true this value is applied before Lightrail Values, otherwise it will be applied after (default: false).'
    AdditionalStripeChargeParams:
      title: AdditionalStripeChargeParams
      type: object
      properties:
        application_fee:
          type: string
        application_fee_amount:
          type: number
        description:
          type: string
        on_behalf_of:
          type: string
        receipt_email:
          type: string
        shipping:
          $ref: '#/components/schemas/AdditionalStripeChargeParams_Shipping'
        statement_descriptor:
          type: string
        transfer_group:
          type: string
    AdditionalStripeChargeParams_Shipping:
      title: AdditionalStripeChargeParams_Shipping
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AdditionalStripeChargeParams_Shipping_Address'
        carrier:
          type: string
        name:
          type: string
        phone:
          type: string
        tracking_number:
          type: string
    AdditionalStripeChargeParams_Shipping_Address:
      title: AdditionalStripeChargeParams_Shipping_Address
      type: object
      properties:
        city:
          type: string
        country:
          type: string
        line1:
          type: string
        line2:
          type: string
        postal_code:
          type: string
        state:
          type: string
    LightrailTransactionStep:
      title: LightrailTransactionStep
      type: object
      properties:
        rail:
          type: string
          description: 'The payment rail: `lightrail`.'
        valueId:
          type: string
          description: The id of the Value transacted with.
        currency:
          type: string
          description: The currency of the Value transacted with.
        contactId:
          type: string
          description: The ID of the Contact associated with the Value.
        code:
          type: string
          description: 'The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`.'
        balanceBefore:
          type: number
          description: The `balance` of the Value before the Transaction.  `null` when the Value does not have a `balance` (and thus has a `balanceRule`).
        balanceAfter:
          type: number
          description: The `balance` of the Value after the Transaction.  `null` when the Value does not have a `balance` (and thus has a `balanceRule`).
        balanceChange:
          type: number
          description: The net change of the `balance` of the Value for the Transaction.  When the Value has a `balanceRule` rather than a `balance` this number will still be set to indicate the value of the rule.
        balanceRule:
          $ref: '#/components/schemas/Rule'
        usesRemainingBefore:
          type: number
          description: The `usesRemaining` of the Value before the Transaction.  `null` when the Value does not have a `usesRemaining`.
        usesRemainingAfter:
          type: number
          description: The `usesRemaining` of the Value after the Transaction.  `null` when the Value does not have a `usesRemaining`.
        usesRemainingChange:
          type: number
          description: The net change of the `usesRemaining` of the Value for the Transaction.
    StripeTransactionStep:
      title: StripeTransactionStep
      type: object
      properties:
        rail:
          type: string
          description: 'The payment rail: `stripe`.'
        amount:
          type: number
          description: the amount of the charge.
        chargeId:
          type: string
          description: The ID of the Stripe charge.
        charge:
          type: object
          description: the Stripe Charge object, if applicable.
    InternalTransactionStep:
      title: InternalTransactionStep
      type: object
      properties:
        rail:
          type: string
          description: 'The payment rail: `internal`.'
        internalId:
          type: string
          description: The ID of the internal value transacted with.
        balanceBefore:
          type: number
          description: The balance of the internal value before the Transaction.
        balanceAfter:
          type: number
          description: The balance of the internal value after the Transaction.
        balanceChange:
          type: number
          description: The net change of the balance of the internal value for the Transaction.
    Value:
      title: Value
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Value.
        programId:
          type: string
        currency:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        contactId:
          type: string
          description: The ID of the Contact that has claimed this Value.
        code:
          type: string
          description: 'The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`.'
        isGenericCode:
          type: boolean
          description: If `true` the code is to be shared publicly and not secret. If `false` the code is treated as a secret. Defaults to false if not provided.
        genericCodeOptions:
          $ref: '#/components/schemas/GenericCodeOptions'
        balance:
          type: number
          description: The amount of money available in a Value. This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500. For generic codes that have a `perContact.balance` the `balance` can control maximum liability and will be drawn down by the `perContact.balance` when attached to a Contact.
        usesRemaining:
          type: number
          description: The number of times the Value can be used in checkout. When this number reaches 0 the Value can no longer be used in checkout. For generic codes that have a `perContact.usesRemaining` the `usesRemaining` can control maximum uses and will be drawn down by the `perContact.usesRemaining` when attached to a Contact.
        active:
          type: boolean
          description: Whether the Value is active and can be used upon creation.
        frozen:
          type: boolean
          description: If `true` the Value is frozen.  When frozen new Transactions cannot be created; pending Transactions can be voided.
        canceled:
          type: boolean
          description: If `true` the Value is canceled.  When canceled new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
        pretax:
          type: boolean
          description: If `true` the Value's balance is applied on checkout before tax is calculated.
        discount:
          type: boolean
          description: If `true` the Value will be marked as a discount on checkout.
        discountSellerLiability:
          type: number
          deprecated: true
          description: '(Note: deprecated, please use discountSellerLiabilityRule.) In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount. The Value must be a discount, ie `discount: true`.'
        discountSellerLiabilityRule:
          allOf:
            - description: 'In a marketplace, a [Lightrail Rule](https://www.lightrail.com/docs/#advanced/lightrail-rule-syntax) that calculates the amount of the discount the seller is liable for.  When returning 0 the marketplace is entirely liable for the discount.  For any other number the seller is liable for that amount of the discount. The Value must be a discount, ie `discount: true`.'
            - $ref: '#/components/schemas/Rule'
        redemptionRule:
          allOf:
            - description: A [Lightrail Rule](https://www.lightrail.com/docs/#use-cases/redemption-and-balance-rules) that calculates whether this Value can be redeemed (applied to) a [checkout Transaction](#operation/Checkout).
            - $ref: '#/components/schemas/Rule'
        balanceRule:
          allOf:
            - description: |-
                A [Lightrail Rule](https://www.lightrail.com/docs/#use-cases/redemption-and-balance-rules) that calculates how much this Value is worth in a [checkout Transaction](#operation/Checkout).

                A value must have a `balance` or a `balanceRule` either directly or inherented from its Program.
            - $ref: '#/components/schemas/Rule'
        startDate:
          type: string
          description: Date when the Value becomes available.
        endDate:
          type: string
          description: Date when the Value expires.  When expired new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
        metadata:
          type: object
          description: Arbitrary data associated with the Value.
        createdDate:
          type: string
          description: Date when the Value was created.
        updatedDate:
          type: string
          description: Date when the Value was last updated.
        updatedContactIdDate:
          type: string
          description: Date of the last contactId update (Contact attached).
        createdBy:
          type: string
          description: The ID of the user who created the Value.
    GenericCodeOptions:
      title: GenericCodeOptions
      required:
        - perContact
      type: object
      properties:
        perContact:
          $ref: '#/components/schemas/PerContact'
    PerContact:
      title: PerContact
      type: object
      properties:
        balance:
          type: number
          description: The balance, as an integer in the smallest unit of currency, available to each Contact that the code is attached to. If an overall balance is set on the Value, the `perContact.balance` will be subtracted from the overall `balance` each time the Value is attached. This allows the Value's `balance` to be used as a liability control and represents the total amount that can be spent in checkout.
        usesRemaining:
          type: number
          description: The usesRemaining available to each Contact that the code is attached to. If an overall usesRemaining is set on the Value, the perContact.usesRemaining will be subtracted from the overall usesRemaining each time the Value is attached. This allows the Value's `usesRemaining` to be used as a liability control and represents how many times the generic code can be used in total.
    Webhook:
      title: Webhook
      type: object
      properties:
        id:
          type: string
          description: The ID of the webhook.
        url:
          type: string
          description: The URL to send the event to.
        events:
          type: array
          items:
            type: string
          description: "Array of string event names. The `'*'` wild card is supported: for example, use `['*']` to match all events or use `['lightrail.value.*', 'lightrail.transaction.*']` to match all Value and Transaction related events. You can view the full list of supported event types [here](https://www.lightrail.com/docs/#webhooks/supported-event-types)."
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/WebhookSecret'
          description: A list of secrets used for the signed header signature.
        active:
          type: boolean
          description: If false, the webhook will not send events.
        createdDate:
          type: string
          description: Date when the webhook was created.
        updatedDate:
          type: string
          description: Date when the webhook was last updated.
        createdBy:
          type: string
          description: The ID of the user who created the webhook.
    WebhookSecret:
      title: WebhookSecret
      type: object
      properties:
        id:
          type: string
          description: The ID of the secret.
        secret:
          type: string
          description: The webhook's secret which is used to generate the header signature on event deliveries. This allows you to validate the event was sent by Lightrail.
        createdDate:
          type: string
          description: The date the secret was created.
    AttachContactToValue:
      title: AttachContactToValue
      type: object
      properties:
        valueId:
          type: string
          description: The `id` of the Value to attach to the Contact.  One of `valueId` or `code` must be specified.
        code:
          type: string
          description: The `code` of the Value to attach to the Contact.  One of `valueId` or `code` must be specified.
    BalanceRule:
      title: BalanceRule
      required:
        - explanation
        - rule
      type: object
      properties:
        explanation:
          type: string
        rule:
          type: string
      example:
        explanation: $5 off purchase
        rule: 500 + value.balanceChange
    CapturePendingRequest:
      title: CapturePendingRequest
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        metadata:
          type: object
          description: Arbitrary data associated with the Transaction.
    ChangeValueCodeRequest:
      title: ChangeValueCodeRequest
      type: object
      properties:
        code:
          type: string
          description: 'The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`.'
        generateCode:
          $ref: '#/components/schemas/CodeGeneration'
    CheckoutRequest:
      title: CheckoutRequest
      required:
        - id
        - currency
        - lineItems
        - sources
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        currency:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
          description: ''
        sources:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/LightrailTransactionParty'
              - $ref: '#/components/schemas/StripeTransactionParty'
              - $ref: '#/components/schemas/InternalTransactionParty'
          description: 'An array of payment sources to use for the checkout transaction. Supported payment rails: `lightrail`, `stripe`, `internal`.'
        simulate:
          type: boolean
          description: If `true` the Transaction is simulated and no changes take place. If the Transaction is repeated with `simulate=false` it is not guaranteed to behave the same way as the underlying Values can change.
        allowRemainder:
          type: boolean
          description: 'If `true` the Transaction will go through using whatever amount is available: this might not cover the full amount of the Transaction. The remainder (i.e. amount still owing) will be indicated.'
        pending:
          type: boolean
          description: If `true` the Transaction is created as pending for the default duration. The pending duration can be customized by passing in an ISO duration string instead of a boolean. A pending Transaction will be automatically [voided](#operation/VoidPending) after the pending duration if not [captured](#operation/CapturePending).
        tax:
          $ref: '#/components/schemas/Tax'
        metadata:
          type: object
          description: Any additional data you want to store for the item. All metadata will also be saved on any Stripe charge(s).
    CreateContactRequest:
      title: CreateContactRequest
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Contact.  Two Contacts can't have the same ID, guaranteeing repeated calls won't create extra resources.  We recommend not using email addresses as IDs because users can change email addresses but the ID can't be changed.
        firstName:
          type: string
          description: The Contact's first name.
        lastName:
          type: string
          description: The Contact's last name.
        email:
          type: string
          description: The Contact's email address.
        metadata:
          type: object
          description: Arbitrary data associated with the Contact.
    CreateCurrencyRequest:
      title: CreateCurrencyRequest
      required:
        - code
        - name
        - symbol
        - decimalPlaces
      type: object
      properties:
        code:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        name:
          type: string
          description: 'Long name for the currency, eg: `Dollars`.'
        symbol:
          type: number
          description: 'Currency symbol used for formatting, eg: `$`.'
        decimalPlaces:
          type: number
          description: 'The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.'
    CreateValueRequest:
      title: CreateValueRequest
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Value.  Two Values can't have the same ID, guaranteeing repeated calls won't create extra resources.
        programId:
          type: string
          description: Create as part of a Program and copy default properties from it.
        contactId:
          type: string
          description: Directly attach to a Contact.
        code:
          type: string
          description: Assign a code.
        isGenericCode:
          type: boolean
          description: If `true` the code is to be shared publicly and not secret. If `false` the code is treated as a secret. Defaults to false if not provided.
        genericCodeOptions:
          $ref: '#/components/schemas/GenericCodeOptions'
        generateCode:
          allOf:
            - description: Generate a code and set it.  Use an empty object for sensible defaults.
            - $ref: '#/components/schemas/CodeGeneration'
        currency:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`. Required if `programId` is not set.'
        balance:
          type: number
          description: |-
            The amount of money available in a Value. This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500. For generic codes that have a `perContact.balance` the `balance` can control maximum liability and will be drawn down by the `perContact.balance` when attached to a Contact.

            A value must have a `balance` or a `balanceRule` either directly or inherented from its Program.
        pretax:
          type: boolean
          description: If `true` the Value's balance is applied on checkout before tax is calculated.
        active:
          type: boolean
          description: Whether the Value is active and can be used upon creation.
        frozen:
          type: boolean
          description: If `true` the Value is frozen.  When frozen new Transactions cannot be created; pending Transactions can be voided.
        discount:
          type: boolean
          description: If `true` the Value will be marked as a discount on checkout.
        discountSellerLiability:
          type: number
          deprecated: true
          description: '(Note: deprecated, please use discountSellerLiabilityRule.) In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount. The Value must be a discount, ie `discount: true`.'
        discountSellerLiabilityRule:
          allOf:
            - description: 'In a marketplace, a [Lightrail Rule](https://www.lightrail.com/docs/#advanced/lightrail-rule-syntax) that calculates the amount of the discount the seller is liable for.  When returning 0 the marketplace is entirely liable for the discount.  For any other number the seller is liable for that amount of the discount. The Value must be a discount, ie `discount: true`.'
            - $ref: '#/components/schemas/Rule'
        redemptionRule:
          allOf:
            - description: A [Lightrail Rule](https://www.lightrail.com/docs/#use-cases/redemption-and-balance-rules) that calculates whether this Value can be redeemed (applied to) a [checkout Transaction](#operation/Checkout).
            - $ref: '#/components/schemas/Rule'
        balanceRule:
          allOf:
            - description: |-
                A [Lightrail Rule](https://www.lightrail.com/docs/#use-cases/redemption-and-balance-rules) that calculates how much this Value is worth in a [checkout Transaction](#operation/Checkout).

                A value must have a `balance` or a `balanceRule` either directly or inherented from its Program.
            - $ref: '#/components/schemas/Rule'
        usesRemaining:
          type: number
          description: The number of times the Value can be used in checkout. When this number reaches 0 the Value can no longer be used in checkout. For generic codes that have a `perContact.usesRemaining` the `usesRemaining` can control maximum uses and will be drawn down by the `perContact.usesRemaining` when attached to a Contact.
        startDate:
          type: string
          description: Date when the Value becomes available.
        endDate:
          type: string
          description: Date when the Value expires.  When expired new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
        metadata:
          type: object
          description: Arbitrary data associated with the Value. If `programId` is set `metadata` from the Program is inherited but any keys specified will override those of the Program.
    CreateIssuanceRequest:
      title: CreateIssuanceRequest
      required:
        - id
        - name
        - count
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Issuance.  Two Issuances can't have the same ID, guaranteeing repeated calls won't create extra resources.
        name:
          type: string
          description: A human-readable name for the Issuance.
        count:
          type: number
          description: The numbers of Values to issue. Must be between 1-10000.
        generateCode:
          $ref: '#/components/schemas/CodeGeneration'
        code:
          type: string
          description: The code to set on the Value. This is only available when `count` is 1.
        isGenericCode:
          type: boolean
          description: If true the code is to be shared publicly and not secret. If `false` the code is treated as a secret. Defaults to `false` if not provided. This is only available when `count` is 1.
        balance:
          type: number
          description: The balance to set on each Value. This can be constrained by the Program's `minInitialBalance` and `maxInitialBalance` or must be in the `fixedInitialBalances` array.
        usesRemaining:
          type: number
          description: The usesRemaining to set on each Value. This can be restricted to Values defined by the Program's `fixedInitialUsesRemaining`.
        startDate:
          type: string
          description: Override the Program's startDate for the Value.
        endDate:
          type: string
          description: Override the Program's endDate for the Value.
        redemptionRule:
          $ref: '#/components/schemas/Rule'
        balanceRule:
          $ref: '#/components/schemas/Rule'
        metadata:
          type: object
          description: Arbitrary data associated with the Issuance. `metadata` from the Program is inherited but any keys specified will override those of the Program.
    CreateProgramRequest:
      title: CreateProgramRequest
      required:
        - id
        - name
        - currency
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Program.
        name:
          type: string
          description: A human-readable name for the Program.
        currency:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        discount:
          type: boolean
          description: If true Values created in the Program will be marked as a discount on checkout.
        pretax:
          type: boolean
          description: If true the balance on Values created in the Program is applied on checkout before tax is calculated.
        active:
          type: boolean
          description: Whether Values created in the Program are active and can be used upon creation.
        redemptionRule:
          $ref: '#/components/schemas/Rule'
        balanceRule:
          $ref: '#/components/schemas/Rule'
        minInitialBalance:
          type: number
          description: The minimum balance Values created in the Program can be created with.
        maxInitialBalance:
          type: number
          description: The maximum balance Values created in the Program can be created with.
        fixedInitialBalances:
          type: array
          items:
            type: number
          description: A list of exact balances Values created in the Program can be created with.
        fixedInitialUsesRemaining:
          type: array
          items:
            type: number
          description: A list of exact usesRemaining the Value can be created with.
        discountSellerLiability:
          type: number
          description: '(Note: deprecated, please use discountSellerLiabilityRule.) Applies to Values created in the Program. In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Program must be a discount, ie `discount: true`.'
        discountSellerLiabilityRule:
          $ref: '#/components/schemas/Rule'
        startDate:
          type: string
          description: Earliest date that Values created in the Program can be active.
        endDate:
          type: string
          description: Latest date that Values created in the Program can be active.
        metadata:
          type: object
          description: Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys.
    CreateWebhookRequest:
      title: CreateWebhookRequest
      required:
        - id
        - url
        - events
      type: object
      properties:
        id:
          type: string
          description: The ID of the webhook.
        url:
          type: string
          description: The URL to send the event to.
        events:
          type: array
          items:
            type: string
          description: "Array of string event names. The `'*'` wild card is supported: for example, use `['*']` to match all events or use `['lightrail.value.*', 'lightrail.transaction.*']` to match all Value and Transaction related events. You can view the full list of supported event types [here](https://www.lightrail.com/docs/#webhooks/supported-event-types)."
        active:
          type: boolean
          description: If false, the webhook will not send events.
    CreditRequest:
      title: CreditRequest
      required:
        - id
        - destination
        - currency
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        destination:
          $ref: '#/components/schemas/LightrailUniqueTransactionParty'
        currency:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        amount:
          type: number
          description: The amount to credit.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        uses:
          type: number
          description: The number of `usesRemaining` to add.  Defaults to 0.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        simulate:
          type: boolean
          description: If `true` the Transaction is simulated and no changes take place. If the Transaction is repeated with `simulate=false` it is not guaranteed to behave the same way as the underlying Values can change.
        metadata:
          type: object
          description: Arbitrary data associated with the Transaction.
    DebitRequest:
      title: DebitRequest
      required:
        - id
        - source
        - currency
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        source:
          $ref: '#/components/schemas/LightrailUniqueTransactionParty'
        currency:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        amount:
          type: number
          description: The amount to debit.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        uses:
          type: number
          description: The number of `usesRemaining` to debit.  Defaults to 0.  Must be > 0 if specified.  One of `amount` or `uses` must be specified.
        simulate:
          type: boolean
          description: If `true` the Transaction is simulated and no changes take place. If the Transaction is repeated with `simulate=false` it is not guaranteed to behave the same way as the underlying Values can change.
        allowRemainder:
          type: boolean
          description: 'If `true` the Transaction will go through using whatever amount is available: this might not cover the full amount of the Transaction. The remainder (i.e. amount still owing) will be indicated.'
        pending:
          type: boolean
          description: If `true` the Transaction is created as pending for the default duration. The pending duration can be customized by passing in an ISO duration string instead of a boolean. A pending Transaction will be automatically [voided](#operation/VoidPending) after the pending duration if not [captured](#operation/CapturePending).
        metadata:
          type: object
          description: Arbitrary data associated with the Transaction.
    DeleteContactResponse:
      title: DeleteContactResponse
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
      example:
        success: true
    DeleteCurrencyResponse:
      title: DeleteCurrencyResponse
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
      example:
        success: true
    DeleteProgramResponse:
      title: DeleteProgramResponse
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
      example:
        success: true
    DetachContactFromValueRequest:
      title: DetachContactFromValueRequest
      required:
        - valueId
      type: object
      properties:
        valueId:
          type: string
          description: The `id` of the Value to detach from the Contact.
    GenericCodeOptions1:
      title: GenericCodeOptions1
      required:
        - perContact
      type: object
      properties:
        perContact:
          $ref: '#/components/schemas/PerContact1'
      example:
        perContact:
          usesRemaining: 1
    PerContact1:
      title: PerContact1
      required:
        - usesRemaining
      type: object
      properties:
        usesRemaining:
          type: integer
          format: int32
      example:
        usesRemaining: 1
    ReverseRequest:
      title: ReverseRequest
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        metadata:
          type: object
          description: Arbitrary data associated with the Transaction.
    TransferRequest:
      title: TransferRequest
      required:
        - id
        - source
        - destination
        - amount
        - currency
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        source:
          oneOf:
            - $ref: '#/components/schemas/LightrailTransactionParty'
            - $ref: '#/components/schemas/StripeTransactionParty'
        destination:
          $ref: '#/components/schemas/LightrailUniqueTransactionParty'
        amount:
          type: number
          description: The amount to transfer, > 0.
        currency:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`.'
        simulate:
          type: boolean
          description: If `true` the Transaction is simulated and no changes take place. If the Transaction is repeated with `simulate=false` it is not guaranteed to behave the same way as the underlying Values can change.
        allowRemainder:
          type: boolean
          description: 'If `true` the Transaction will go through using whatever amount is available: this might not cover the full amount of the Transaction. The remainder (i.e. amount still owing) will be indicated.'
        metadata:
          type: object
          description: Arbitrary data associated with the Transaction.
    UpdateContactRequest:
      title: UpdateContactRequest
      type: object
      properties:
        firstName:
          type: string
          description: The Contact's first name.
        lastName:
          type: string
          description: The Contact's last name.
        email:
          type: string
          description: The Contact's email address.
        metadata:
          type: object
          description: Arbitrary data associated with the Contact.
    UpdateCurrencyRequest:
      title: UpdateCurrencyRequest
      type: object
      properties:
        code:
          type: string
          description: 'Short code for a currency, eg: `USD`, `FUNBUX`. If present must match the code in the path.'
        name:
          type: string
          description: 'Long name for the currency, eg: `Dollars`.'
        symbol:
          type: string
          description: 'Currency symbol used for formatting, eg: `$`.'
        decimalPlaces:
          type: number
          description: 'The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`.'
    UpdateProgramRequest:
      title: UpdateProgramRequest
      type: object
      properties:
        name:
          type: string
          description: A human-readable name for the Program.
        active:
          type: boolean
          description: Whether Values created in the Program are active and can be used upon creation.
        discount:
          type: boolean
          description: If true Values created in the Program will be marked as a discount on checkout. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        pretax:
          type: boolean
          description: If true the balance on Values created in the Program is applied on checkout before tax is calculated. Default is `true`. If updating this member, you likely also want to update any existing Values already created through this Program.
        redemptionRule:
          $ref: '#/components/schemas/Rule'
        balanceRule:
          $ref: '#/components/schemas/Rule'
        minInitialBalance:
          type: number
          description: The minimum balance Values created in the Program can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        maxInitialBalance:
          type: number
          description: The maximum balance Values created in the Program can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        fixedInitialBalances:
          type: array
          items:
            type: number
          description: A list of exact balances Values created in the Program can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        fixedInitialUsesRemaining:
          type: array
          items:
            type: number
          description: A list of exact usesRemaining the Value can be created with. If updating this member, you likely also want to update any existing Values already created through this Program.
        discountSellerLiability:
          type: number
          description: '(Note: deprecated, please use discountSellerLiabilityRule.) Applies to Values created in the Program. In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Program must be a discount, ie `discount: true`.'
        startDate:
          type: string
          description: Earliest date that Values created in the Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        endDate:
          type: string
          description: Latest date that Values created in the Program can be active. If updating this member, you likely also want to update any existing Values already created through this Program.
        metadata:
          type: object
          description: Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys.
    UpdateValueRequest:
      title: UpdateValueRequest
      type: object
      properties:
        active:
          type: boolean
          description: Whether the Value is active and can be used upon creation.
        frozen:
          type: boolean
          description: If `true` the Value is frozen.  When frozen new Transactions cannot be created; pending Transactions can be voided.
        canceled:
          type: boolean
          description: If `true` the Value is canceled.  When canceled new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
        pretax:
          type: boolean
          description: If `true` the Value's balance is applied on checkout before tax is calculated.
        discount:
          type: boolean
          description: If `true` the Value will be marked as a discount on checkout.
        discountSellerLiability:
          type: number
          description: '(Note: deprecated, please use discountSellerLiabilityRule.) In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Value must be a discount, ie `discount: true`.'
        genericCodeOptions:
          $ref: '#/components/schemas/GenericCodeOptions'
        redemptionRule:
          $ref: '#/components/schemas/Rule'
        balanceRule:
          $ref: '#/components/schemas/Rule'
        startDate:
          type: string
          description: Date when the Value becomes available.
        endDate:
          type: string
          description: Date when the Value expires.  When expired new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided.
        metadata:
          type: object
          description: Arbitrary data associated with the Value.
    UpdateWebhookRequest:
      title: UpdateWebhookRequest
      required:
        - url
        - events
      type: object
      properties:
        url:
          type: string
          description: The URL to send the event to.
        events:
          type: array
          items:
            type: string
          description: "Array of string event names. The `'*'` wild card is supported: for example, use `['*']` to match all events or use `['lightrail.value.*', 'lightrail.transaction.*']` to match all Value and Transaction related events. You can view the full list of supported event types [here](https://www.lightrail.com/docs/#webhooks/supported-event-types)."
        active:
          type: boolean
          description: If false, the webhook will not send events.
    VoidPendingRequest:
      title: VoidPendingRequest
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The ID you choose to represent the Transaction.  Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice.
        metadata:
          type: object
          description: Arbitrary data associated with the Transaction.
  parameters:
    limit:
      name: limit
      in: query
      description: The max number of items to get.
      style: form
      explode: true
      schema:
        type: number
        format: integer
  examples:
    listCurrenciesResponse:
      value:
        - code: USD
          name: US Dollars
          symbol: $
          decimalPlaces: 2
          createdDate: '2020-01-27T17:51:20.000Z'
          updatedDate: '2020-01-27T17:51:20.000Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    getCurrencyResponse:
      value:
        code: USD
        name: US Dollars
        symbol: $
        decimalPlaces: 2
        createdDate: '2020-01-27T17:51:20.000Z'
        updatedDate: '2020-01-27T17:51:20.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createContactRequest:
      value:
        id: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
        firstName: Jeffrey
        lastName: Lebowski
        email: thedude@example.com
        metadata:
          alias: El Duderino
    deleteCurrencyInUseResponse:
      summary: Currency in use
      value:
        message: Currency 'USD' is in use.
        statusCode: 409
        messageCode: CurrencyInUse
    createContactResponse:
      value:
        id: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
        firstName: Jeffrey
        lastName: Lebowski
        email: thedude@example.com
        metadata:
          alias: El Duderino
        createdDate: '2020-09-02T00:21:46.000Z'
        updatedDate: '2020-09-02T00:21:46.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createContactAlreadyExistsResponse:
      summary: Contact exists
      value:
        message: A Contact with id '7efa9a53-52dd-4be1-bc0b-6fa2f8956896' already exists.
        statusCode: 409
        messageCode: ContactIdExists
    listContactsResponse:
      value:
        - id: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
          firstName: Jeffrey
          lastName: Lebowski
          email: thedude@example.com
          metadata:
            alias: El Duderino
          createdDate: '2020-09-02T00:21:46.000Z'
          updatedDate: '2020-09-02T00:21:46.000Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    updateContactRequest:
      value:
        firstName: The Dude
        metadata:
          alias: El Duderino
          note: Into the whole 'brevity thing'
    updateContactResponse:
      value:
        id: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
        firstName: The Dude
        lastName: Lebowski
        email: thedude@example.com
        metadata:
          alias: El Duderino
          note: Into the whole 'brevity thing'
        createdDate: '2020-09-02T00:21:46.000Z'
        updatedDate: '2020-09-02T00:21:46.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createProgramRequest:
      value:
        id: bc896cae-eb3a-4824-95b6-af9801130736
        name: Spring Promotion USD
        currency: USD
        pretax: true
        discount: true
        fixedInitialBalances:
          - 500
    createProgramResponse:
      value:
        id: bc896cae-eb3a-4824-95b6-af9801130736
        name: Spring Promotion USD
        currency: USD
        discount: true
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        pretax: true
        active: true
        minInitialBalance: null
        maxInitialBalance: null
        fixedInitialBalances:
          - 500
        fixedInitialUsesRemaining: null
        redemptionRule: null
        balanceRule: null
        startDate: null
        endDate: null
        metadata: null
        createdDate: '2020-09-02T00:21:46.000Z'
        updatedDate: '2020-09-02T00:21:46.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createProgramAlreadyExistsResponse:
      summary: Program exists
      value:
        message: A Program with id 'bc896cae-eb3a-4824-95b6-af9801130736' already exists.
        statusCode: 409
        messageCode: ProgramIdExists
    listProgramsResponse:
      value:
        - id: bc896cae-eb3a-4824-95b6-af9801130736
          name: Spring Promotion USD
          currency: USD
          discount: true
          discountSellerLiability: null
          discountSellerLiabilityRule: null
          pretax: true
          active: true
          minInitialBalance: null
          maxInitialBalance: null
          fixedInitialBalances:
            - 500
          fixedInitialUsesRemaining: null
          redemptionRule: null
          balanceRule: null
          startDate: null
          endDate: null
          metadata: null
          createdDate: '2020-09-02T00:21:46.000Z'
          updatedDate: '2020-09-02T00:21:46.000Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    updateProgram1Request:
      value:
        name: Spring Promo US Dollars
    updateProgram1Response:
      value:
        id: bc896cae-eb3a-4824-95b6-af9801130736
        name: Spring Promo US Dollars
        currency: USD
        discount: true
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        pretax: true
        active: true
        minInitialBalance: null
        maxInitialBalance: null
        fixedInitialBalances:
          - 500
        fixedInitialUsesRemaining: null
        redemptionRule: null
        balanceRule: null
        startDate: null
        endDate: null
        metadata: null
        createdDate: '2020-09-02T00:21:46.000Z'
        updatedDate: '2020-09-02T00:21:47.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createValue1Request:
      summary: Gift card with code
      description: 'This gift card will have a balance of $5, inherit properties from a Program and have a random code.'
      value:
        id: 41e1f20f-a677-41e4-92f5-ae3e12a46c18
        programId: bc896cae-eb3a-4824-95b6-af9801130736
        balance: 500
        generateCode: {}
    createValue1Response:
      summary: Gift card with code
      description: 'This gift card will have a balance of $5, inherit properties from a Program and have a random code.'
      value:
        id: 41e1f20f-a677-41e4-92f5-ae3e12a46c18
        currency: USD
        balance: 500
        usesRemaining: null
        programId: bc896cae-eb3a-4824-95b6-af9801130736
        issuanceId: null
        code: …G3PA
        isGenericCode: false
        contactId: null
        pretax: true
        active: true
        canceled: false
        frozen: false
        discount: true
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        redemptionRule: null
        balanceRule: null
        startDate: null
        endDate: null
        metadata: {}
        createdDate: '2020-09-02T00:21:47.000Z'
        updatedDate: '2020-09-02T00:21:47.000Z'
        updatedContactIdDate: null
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createValue2Request:
      summary: Gift card attached to Contact
      description: This gift card will have a balance of $5 and be attached to a specific Contact.
      value:
        id: a0e9dda1-901f-41c1-a505-e320f335faa1
        currency: USD
        balance: 500
        contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
    createValue2Response:
      summary: Gift card attached to Contact
      description: This gift card will have a balance of $5 and be attached to a specific Contact.
      value:
        id: a0e9dda1-901f-41c1-a505-e320f335faa1
        currency: USD
        balance: 500
        usesRemaining: null
        programId: null
        issuanceId: null
        code: null
        isGenericCode: false
        contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
        pretax: false
        active: true
        canceled: false
        frozen: false
        discount: false
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        redemptionRule: null
        balanceRule: null
        startDate: null
        endDate: null
        metadata: {}
        createdDate: '2020-09-02T00:21:47.000Z'
        updatedDate: '2020-09-02T00:21:47.000Z'
        updatedContactIdDate: '2020-09-02T00:21:47.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createValue3Request:
      summary: Unique promo code
      description: This unique promo code will be worth $5 off a purchase.  It can only be used once and is a pretax discount.
      value:
        id: 8b557f90-136a-4ebf-ae02-f4b9f31896b4
        currency: USD
        generateCode: {}
        usesRemaining: 1
        balanceRule:
          rule: 500 + value.balanceChange
          explanation: $5 off purchase
        redemptionRule:
          rule: '!(lineItems.find(item => item.lineTotal.discount > 0)) || value.balanceChange < 0'
          explanation: Limited to 1 promotion per transaction.
        pretax: true
        discount: true
    createValue3Response:
      summary: Unique promo code
      description: This unique promo code will be worth $5 off a purchase.  It can only be used once and is a pretax discount.
      value:
        id: 8b557f90-136a-4ebf-ae02-f4b9f31896b4
        currency: USD
        balance: null
        usesRemaining: 1
        programId: null
        issuanceId: null
        code: …M293
        isGenericCode: false
        contactId: null
        pretax: true
        active: true
        canceled: false
        frozen: false
        discount: true
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        redemptionRule:
          rule: '!(lineItems.find(item => item.lineTotal.discount > 0)) || value.balanceChange < 0'
          explanation: Limited to 1 promotion per transaction.
        balanceRule:
          rule: 500 + value.balanceChange
          explanation: $5 off purchase
        startDate: null
        endDate: null
        metadata: {}
        createdDate: '2020-09-02T00:21:47.000Z'
        updatedDate: '2020-09-02T00:21:47.000Z'
        updatedContactIdDate: null
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createValue4Request:
      summary: Generic promo code
      description: This generic promo code if worth %15 off an order.  It can be used by every Contact once.  To enforce this restriction it cannot be used anonymously at checkout.  It is a pretax discount.
      value:
        id: f08fd936-bb46-47ac-9c54-45158ce5c7b6
        currency: USD
        isGenericCode: true
        genericCodeOptions:
          perContact:
            usesRemaining: 1
        balanceRule:
          rule: currentLineItem.lineTotal.subtotal * 0.15
          explanation: '%15 off your order'
        pretax: true
        discount: true
    createValue4Response:
      summary: Generic promo code
      description: This generic promo code if worth %15 off an order.  It can be used by every Contact once.  To enforce this restriction it cannot be used anonymously at checkout.  It is a pretax discount.
      value:
        id: f08fd936-bb46-47ac-9c54-45158ce5c7b6
        currency: USD
        balance: null
        usesRemaining: null
        programId: null
        issuanceId: null
        code: null
        isGenericCode: true
        genericCodeOptions:
          perContact:
            usesRemaining: 1
        contactId: null
        pretax: true
        active: true
        canceled: false
        frozen: false
        discount: true
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        redemptionRule: null
        balanceRule:
          rule: currentLineItem.lineTotal.subtotal * 0.15
          explanation: '%15 off your order'
        startDate: null
        endDate: null
        metadata: {}
        createdDate: '2020-09-02T00:21:47.000Z'
        updatedDate: '2020-09-02T00:21:47.000Z'
        updatedContactIdDate: null
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createValueAlreadyExistsResponse:
      summary: Value exists
      value:
        message: A Value with id '41e1f20f-a677-41e4-92f5-ae3e12a46c18' already exists.
        statusCode: 409
        messageCode: ValueIdExists
    listValuesResponse:
      value:
        - id: f08fd936-bb46-47ac-9c54-45158ce5c7b6
          currency: USD
          balance: null
          usesRemaining: null
          programId: null
          issuanceId: null
          contactId: null
          code: null
          isGenericCode: true
          genericCodeOptions:
            perContact:
              balance: null
              usesRemaining: 1
          pretax: true
          active: true
          canceled: false
          frozen: false
          discount: true
          discountSellerLiability: null
          discountSellerLiabilityRule: null
          redemptionRule: null
          balanceRule:
            rule: currentLineItem.lineTotal.subtotal * 0.15
            explanation: '%15 off your order'
          startDate: null
          endDate: null
          metadata: {}
          createdDate: '2020-09-02T00:21:47.000Z'
          updatedDate: '2020-09-02T00:21:47.000Z'
          updatedContactIdDate: null
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    attachValueRequest:
      value:
        valueId: 41e1f20f-a677-41e4-92f5-ae3e12a46c18
    attachValueResponse:
      value:
        id: 41e1f20f-a677-41e4-92f5-ae3e12a46c18
        currency: USD
        balance: 500
        usesRemaining: null
        programId: bc896cae-eb3a-4824-95b6-af9801130736
        issuanceId: null
        contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
        code: …G3PA
        isGenericCode: false
        pretax: true
        active: true
        canceled: false
        frozen: false
        discount: true
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        redemptionRule: null
        balanceRule: null
        startDate: null
        endDate: null
        metadata: {}
        createdDate: '2020-09-02T00:21:47.000Z'
        updatedDate: '2020-09-02T00:21:48.000Z'
        updatedContactIdDate: '2020-09-02T00:21:48.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    listValueContactsResponse:
      value:
        - id: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
          firstName: The Dude
          lastName: Lebowski
          email: thedude@example.com
          metadata:
            alias: El Duderino
            note: Into the whole 'brevity thing'
          createdDate: '2020-09-02T00:21:46.000Z'
          updatedDate: '2020-09-02T00:21:46.000Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    listContactsValueResponse:
      value:
        - id: a0e9dda1-901f-41c1-a505-e320f335faa1
          currency: USD
          balance: 500
          usesRemaining: null
          programId: null
          issuanceId: null
          contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
          code: null
          isGenericCode: false
          pretax: false
          active: true
          canceled: false
          frozen: false
          discount: false
          discountSellerLiability: null
          discountSellerLiabilityRule: null
          redemptionRule: null
          balanceRule: null
          startDate: null
          endDate: null
          metadata: {}
          createdDate: '2020-09-02T00:21:47.000Z'
          updatedDate: '2020-09-02T00:21:47.000Z'
          updatedContactIdDate: '2020-09-02T00:21:47.000Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    detachValueRequest:
      value:
        valueId: 41e1f20f-a677-41e4-92f5-ae3e12a46c18
    detachValueResponse:
      value:
        id: 41e1f20f-a677-41e4-92f5-ae3e12a46c18
        currency: USD
        balance: 500
        usesRemaining: null
        programId: bc896cae-eb3a-4824-95b6-af9801130736
        issuanceId: null
        contactId: null
        code: …G3PA
        isGenericCode: false
        pretax: true
        active: true
        canceled: false
        frozen: false
        discount: true
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        redemptionRule: null
        balanceRule: null
        startDate: null
        endDate: null
        metadata: {}
        createdDate: '2020-09-02T00:21:47.000Z'
        updatedDate: '2020-09-02T00:21:48.000Z'
        updatedContactIdDate: '2020-09-02T00:21:48.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    updateValueRequest:
      value:
        frozen: true
    updateValueResponse:
      value:
        id: 41e1f20f-a677-41e4-92f5-ae3e12a46c18
        currency: USD
        balance: 500
        usesRemaining: null
        programId: bc896cae-eb3a-4824-95b6-af9801130736
        issuanceId: null
        contactId: null
        code: …G3PA
        isGenericCode: false
        pretax: true
        active: true
        canceled: false
        frozen: true
        discount: true
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        redemptionRule: null
        balanceRule: null
        startDate: null
        endDate: null
        metadata: {}
        createdDate: '2020-09-02T00:21:47.000Z'
        updatedDate: '2020-09-02T00:21:48.000Z'
        updatedContactIdDate: '2020-09-02T00:21:48.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    creditTransactionRequest:
      value:
        id: 12177c2f-5e11-4cad-8c7d-af1759440b10
        destination:
          rail: lightrail
          valueId: 45959925-418b-4e28-ad1b-2b10e5cd6e68
        amount: 2500
        currency: USD
        metadata:
          note: Frequent buyer bonus
    creditTransactionResponse:
      value:
        id: 12177c2f-5e11-4cad-8c7d-af1759440b10
        transactionType: credit
        currency: USD
        createdDate: '2020-09-02T00:21:49.000Z'
        tax: null
        totals: null
        lineItems: null
        steps:
          - rail: lightrail
            valueId: 45959925-418b-4e28-ad1b-2b10e5cd6e68
            contactId: null
            code: null
            balanceBefore: 500
            balanceChange: 2500
            balanceAfter: 3000
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule: null
        paymentSources: null
        pending: false
        metadata:
          note: Frequent buyer bonus
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    creditTransactionAlreadyExistsResponse:
      summary: Transaction exists
      value:
        message: A Lightrail transaction with transactionId '12177c2f-5e11-4cad-8c7d-af1759440b10' already exists.
        statusCode: 409
        messageCode: TransactionExists
    creditTransactionFrozenResponse:
      value:
        message: Value '6d36c939-9b50-48e4-a915-379c206dc855' cannot be transacted against because it is frozen.
        statusCode: 409
        messageCode: ValueFrozen
      summary: Value frozen
    debitTransactionRequest:
      value:
        id: 04d72cce-9a4c-4c2f-8d2c-802dce21dd14
        source:
          rail: lightrail
          valueId: 45959925-418b-4e28-ad1b-2b10e5cd6e68
        amount: 1000
        currency: USD
        metadata:
          note: Reduce loyalty points after 3mo contact inactivity
    debitTransactionResponse:
      value:
        id: 04d72cce-9a4c-4c2f-8d2c-802dce21dd14
        transactionType: debit
        currency: USD
        createdDate: '2020-09-02T00:21:49.000Z'
        tax: null
        totals:
          remainder: 0
        lineItems: null
        steps:
          - rail: lightrail
            valueId: 45959925-418b-4e28-ad1b-2b10e5cd6e68
            contactId: null
            code: null
            balanceBefore: 3000
            balanceChange: -1000
            balanceAfter: 2000
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule: null
        paymentSources: null
        pending: false
        metadata:
          note: Reduce loyalty points after 3mo contact inactivity
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    debitTransactionInsufficientBalanceResponse:
      summary: Insufficient balance
      value:
        message: Insufficient balance for the transaction.
        statusCode: 409
        messageCode: InsufficientBalance
    debitTransactionAlreadyExistsResponse:
      summary: Transaction exists
      value:
        message: A Lightrail transaction with transactionId '04d72cce-9a4c-4c2f-8d2c-802dce21dd14' already exists.
        statusCode: 409
        messageCode: TransactionExists
    debitTransactionFrozenResponse:
      summary: Value frozen
      value:
        message: Value '6d36c939-9b50-48e4-a915-379c206dc855' cannot be transacted against because it is frozen.
        statusCode: 409
        messageCode: ValueFrozen
    listTransactionsResponse:
      value:
        - id: 6d36c939-9b50-48e4-a915-379c206dc855
          transactionType: initialBalance
          currency: USD
          totals: null
          lineItems: null
          paymentSources: null
          steps:
            - rail: lightrail
              valueId: 6d36c939-9b50-48e4-a915-379c206dc855
              contactId: null
              code: null
              balanceBefore: 0
              balanceAfter: 500
              balanceChange: 500
              balanceRule: null
              usesRemainingBefore: null
              usesRemainingAfter: null
              usesRemainingChange: null
          metadata: null
          tax: null
          pending: false
          createdDate: '2020-09-02T00:21:49.000Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    checkout1Request:
      summary: Checkout with Lightrail and credit card
      description: |-
        Data used in example:

        - Purchasing: 
            - 2x $5 socks (8% tax rate)
            - 1x $1.99 chocolate bar  (5% tax rate)
            - 1x $3.49 shipping (0% tax rate)

        - Payment Sources:
            - Contact with prepaid account and a chocolate bar promotion.
                - Account has $10.
                - Sock promo is for 20% off retail price of socks.
            - Credit card
      value:
        id: 742693ee-80a7-4296-a73d-ed92bdbd6879
        sources:
          - rail: lightrail
            contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
          - rail: stripe
            source: tok_visa
        lineItems:
          - productId: socks
            unitPrice: 500
            quantity: 2
            taxRate: 0.08
          - productId: chocolate_bar
            unitPrice: 199
            taxRate: 0.05
          - productId: shipping
            unitPrice: 349
            taxRate: 0
        currency: USD
    checkout1Response:
      summary: Checkout with Lightrail and credit card
      description: |-
        Data used in example:

        - Purchasing: 
            - 2x $5 socks (8% tax rate)
            - 1x $1.99 chocolate bar  (5% tax rate)
            - 1x $3.49 shipping (0% tax rate)

        - Payment Sources:
            - Contact with prepaid account and a chocolate bar promotion.
                - Account has $10.
                - Sock promo is for 20% off retail price of socks.
            - Credit card
      value:
        id: 742693ee-80a7-4296-a73d-ed92bdbd6879
        transactionType: checkout
        currency: USD
        createdDate: '2020-09-02T00:21:51.000Z'
        tax:
          roundingMode: HALF_EVEN
        totals:
          subtotal: 1548
          tax: 74
          discount: 200
          payable: 1422
          remainder: 0
          forgiven: 0
          discountLightrail: 200
          paidLightrail: 1422
          paidStripe: 0
          paidInternal: 0
        lineItems:
          - productId: socks
            unitPrice: 500
            quantity: 2
            taxRate: 0.08
            lineTotal:
              subtotal: 1000
              taxable: 800
              tax: 64
              discount: 200
              remainder: 0
              payable: 864
          - productId: shipping
            unitPrice: 349
            taxRate: 0
            quantity: 1
            lineTotal:
              subtotal: 349
              taxable: 349
              tax: 0
              discount: 0
              remainder: 0
              payable: 349
          - productId: chocolate_bar
            unitPrice: 199
            taxRate: 0.05
            quantity: 1
            lineTotal:
              subtotal: 199
              taxable: 199
              tax: 10
              discount: 0
              remainder: 0
              payable: 209
        steps:
          - rail: lightrail
            valueId: a0bf7c32-a215-4896-903b-99f880a9d68b
            contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
            code: null
            balanceBefore: null
            balanceChange: -200
            balanceAfter: null
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule:
              rule: currentLineItem.lineTotal.subtotal * 0.20
              explanation: 20% off socks
          - rail: lightrail
            valueId: a0e9dda1-901f-41c1-a505-e320f335faa1
            contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
            code: null
            balanceBefore: 500
            balanceChange: -500
            balanceAfter: 0
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule: null
          - rail: lightrail
            valueId: 4fb45dc7-da01-41dc-840b-5eaf65ed4383
            contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
            code: null
            balanceBefore: 1000
            balanceChange: -922
            balanceAfter: 78
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule: null
        paymentSources:
          - rail: lightrail
            contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
          - rail: stripe
            source: tok_visa
        pending: false
        metadata: null
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    reverseCheckoutRequest:
      value:
        id: ef8b3058-fe78-488b-8e32-956284371292
    reverseCheckoutResponse:
      value:
        id: ef8b3058-fe78-488b-8e32-956284371292
        transactionType: reverse
        currency: USD
        createdDate: '2020-09-02T00:21:51.000Z'
        tax:
          roundingMode: HALF_EVEN
        totals:
          subtotal: -1548
          tax: -74
          discount: -200
          discountLightrail: -200
          payable: -1422
          paidLightrail: -1422
          paidStripe: 0
          paidInternal: 0
          remainder: 0
          forgiven: 0
        lineItems: null
        steps:
          - rail: lightrail
            valueId: a0bf7c32-a215-4896-903b-99f880a9d68b
            contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
            code: null
            balanceBefore: null
            balanceChange: 200
            balanceAfter: null
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule:
              rule: currentLineItem.lineTotal.subtotal * 0.20
              explanation: 20% off socks
          - rail: lightrail
            valueId: a0e9dda1-901f-41c1-a505-e320f335faa1
            contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
            code: null
            balanceBefore: 0
            balanceChange: 500
            balanceAfter: 500
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule: null
          - rail: lightrail
            valueId: 4fb45dc7-da01-41dc-840b-5eaf65ed4383
            contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
            code: null
            balanceBefore: 78
            balanceChange: 922
            balanceAfter: 1000
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule: null
        paymentSources: null
        pending: false
        metadata: null
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    reverseCheckoutAlreadyReversedResponse:
      summary: Transaction already reversed
      value:
        message: The Transaction has already been reversed in Transaction 'ef8b3058-fe78-488b-8e32-956284371292'.
        statusCode: 409
        messageCode: TransactionReversed
    transactionChainResponse:
      value:
        - id: 742693ee-80a7-4296-a73d-ed92bdbd6879
          transactionType: checkout
          currency: USD
          totals:
            subtotal: 1548
            tax: 74
            discount: 200
            discountLightrail: 200
            payable: 1422
            paidLightrail: 1422
            paidStripe: 0
            paidInternal: 0
            remainder: 0
            forgiven: 0
          lineItems:
            - productId: socks
              unitPrice: 500
              quantity: 2
              taxRate: 0.08
              lineTotal:
                subtotal: 1000
                taxable: 800
                tax: 64
                discount: 200
                remainder: 0
                payable: 864
            - productId: shipping
              unitPrice: 349
              taxRate: 0
              quantity: 1
              lineTotal:
                subtotal: 349
                taxable: 349
                tax: 0
                discount: 0
                remainder: 0
                payable: 349
            - productId: chocolate_bar
              unitPrice: 199
              taxRate: 0.05
              quantity: 1
              lineTotal:
                subtotal: 199
                taxable: 199
                tax: 10
                discount: 0
                remainder: 0
                payable: 209
          paymentSources:
            - rail: lightrail
              contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
            - rail: stripe
              source: tok_visa
          steps:
            - rail: lightrail
              valueId: a0bf7c32-a215-4896-903b-99f880a9d68b
              contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
              code: null
              balanceBefore: null
              balanceAfter: null
              balanceChange: -200
              balanceRule:
                rule: currentLineItem.lineTotal.subtotal * 0.20
                explanation: 20% off socks
              usesRemainingBefore: null
              usesRemainingAfter: null
              usesRemainingChange: null
            - rail: lightrail
              valueId: a0e9dda1-901f-41c1-a505-e320f335faa1
              contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
              code: null
              balanceBefore: 500
              balanceAfter: 0
              balanceChange: -500
              balanceRule: null
              usesRemainingBefore: null
              usesRemainingAfter: null
              usesRemainingChange: null
            - rail: lightrail
              valueId: 4fb45dc7-da01-41dc-840b-5eaf65ed4383
              contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
              code: null
              balanceBefore: 1000
              balanceAfter: 78
              balanceChange: -922
              balanceRule: null
              usesRemainingBefore: null
              usesRemainingAfter: null
              usesRemainingChange: null
          metadata: null
          tax:
            roundingMode: HALF_EVEN
          pending: false
          createdDate: '2020-09-02T00:21:51.000Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
        - id: ef8b3058-fe78-488b-8e32-956284371292
          transactionType: reverse
          currency: USD
          totals:
            subtotal: -1548
            tax: -74
            discount: -200
            discountLightrail: -200
            payable: -1422
            paidLightrail: -1422
            paidStripe: 0
            paidInternal: 0
            remainder: 0
            forgiven: 0
          lineItems: null
          paymentSources: null
          steps:
            - rail: lightrail
              valueId: a0bf7c32-a215-4896-903b-99f880a9d68b
              contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
              code: null
              balanceBefore: null
              balanceAfter: null
              balanceChange: 200
              balanceRule:
                rule: currentLineItem.lineTotal.subtotal * 0.20
                explanation: 20% off socks
              usesRemainingBefore: null
              usesRemainingAfter: null
              usesRemainingChange: null
            - rail: lightrail
              valueId: a0e9dda1-901f-41c1-a505-e320f335faa1
              contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
              code: null
              balanceBefore: 0
              balanceAfter: 500
              balanceChange: 500
              balanceRule: null
              usesRemainingBefore: null
              usesRemainingAfter: null
              usesRemainingChange: null
            - rail: lightrail
              valueId: 4fb45dc7-da01-41dc-840b-5eaf65ed4383
              contactId: 7efa9a53-52dd-4be1-bc0b-6fa2f8956896
              code: null
              balanceBefore: 78
              balanceAfter: 1000
              balanceChange: 922
              balanceRule: null
              usesRemainingBefore: null
              usesRemainingAfter: null
              usesRemainingChange: null
          metadata: null
          tax:
            roundingMode: HALF_EVEN
          pending: false
          createdDate: '2020-09-02T00:21:51.000Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    changeCodeRequest:
      value:
        generateCode: {}
    changeCodeResponse:
      value:
        id: 146c3808-d588-4d6d-88b9-281e8459e3cd
        currency: USD
        balance: 500
        usesRemaining: null
        programId: bc896cae-eb3a-4824-95b6-af9801130736
        issuanceId: null
        contactId: null
        code: …G29D
        isGenericCode: false
        pretax: true
        active: true
        canceled: false
        frozen: false
        discount: true
        discountSellerLiability: null
        discountSellerLiabilityRule: null
        redemptionRule: null
        balanceRule: null
        startDate: null
        endDate: null
        metadata: {}
        createdDate: '2020-09-02T00:21:51.000Z'
        updatedDate: '2020-09-02T00:21:52.000Z'
        updatedContactIdDate: null
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    transferRequest:
      value:
        id: 1e5caec7-f642-40f5-baee-49b5a6a89831
        source:
          rail: lightrail
          valueId: de9ecf23-3eaa-48e8-8867-5e6587e591ef
        destination:
          rail: lightrail
          valueId: 11696660-78c6-4ae9-bf99-60043fae65f3
        amount: 100
        currency: USD
        metadata:
          reference: 'customer request to move funds. ref: #4948173593'
    transferResponse:
      value:
        id: 1e5caec7-f642-40f5-baee-49b5a6a89831
        transactionType: transfer
        currency: USD
        createdDate: '2020-09-02T00:21:52.000Z'
        tax: null
        totals:
          remainder: 0
        lineItems: null
        steps:
          - rail: lightrail
            valueId: de9ecf23-3eaa-48e8-8867-5e6587e591ef
            contactId: null
            code: null
            balanceBefore: 500
            balanceChange: -100
            balanceAfter: 400
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule: null
          - rail: lightrail
            valueId: 11696660-78c6-4ae9-bf99-60043fae65f3
            contactId: null
            code: null
            balanceBefore: 500
            balanceChange: 100
            balanceAfter: 600
            usesRemainingBefore: null
            usesRemainingChange: null
            usesRemainingAfter: null
            balanceRule: null
        paymentSources: null
        pending: false
        metadata:
          reference: 'customer request to move funds. ref: #4948173593'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    transferInsufficientBalanceResponse:
      summary: Insufficient balance
      value:
        message: Insufficient balance for the transaction.
        statusCode: 409
        messageCode: InsufficientBalance
    transferTransactionExistsResponse:
      summary: Transaction exists
      value:
        message: A Lightrail transaction with transactionId '1e5caec7-f642-40f5-baee-49b5a6a89831' already exists.
        statusCode: 409
        messageCode: TransactionExists
    transferFrozenResponse:
      summary: Value frozen
      value:
        message: Value '6d36c939-9b50-48e4-a915-379c206dc855' cannot be transacted against because it is frozen.
        statusCode: 409
        messageCode: ValueFrozen
    createIssuanceRequest:
      value:
        id: 1ce206fd-b5ad-4262-86c4-e9db090433e6
        name: My First Issuance
        count: 10
        generateCode: {}
        balance: 500
    createIssuanceResponse:
      value:
        id: 1ce206fd-b5ad-4262-86c4-e9db090433e6
        name: My First Issuance
        programId: bc896cae-eb3a-4824-95b6-af9801130736
        count: 10
        balance: 500
        redemptionRule: null
        balanceRule: null
        usesRemaining: null
        active: true
        startDate: null
        endDate: null
        metadata: {}
        createdDate: '2020-09-02T00:21:53.000Z'
        updatedDate: '2020-09-02T00:21:53.000Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    listIssuancesResponse:
      value:
        - id: 1ce206fd-b5ad-4262-86c4-e9db090433e6
          name: My First Issuance
          programId: bc896cae-eb3a-4824-95b6-af9801130736
          count: 10
          balance: 500
          redemptionRule: null
          balanceRule: null
          usesRemaining: null
          active: true
          startDate: null
          endDate: null
          metadata: {}
          createdDate: '2020-09-02T00:21:53.000Z'
          updatedDate: '2020-09-02T00:21:53.000Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    pendingVoidRequest:
      value:
        id: ad5e21ff-0f89-457b-af95-cbffda6c7cd9
    pendingVoidResponse:
      value:
        id: ad5e21ff-0f89-457b-af95-cbffda6c7cd9
        transactionType: void
        currency: USD
        createdDate: '2020-09-02T00:21:55.000Z'
        tax:
          roundingMode: HALF_EVEN
        totals:
          subtotal: -2576
          tax: -206
          discount: 0
          discountLightrail: 0
          payable: -2782
          paidLightrail: 0
          paidStripe: -2782
          paidInternal: 0
          remainder: 0
          forgiven: 0
        lineItems: null
        steps:
          - rail: stripe
            chargeId: ch_1HMjjbCM9MOvFvZKRZhSHC2O
            charge:
              id: re_1HMjjcCM9MOvFvZK4XNFCs8l
              object: refund
              amount: 2782
              balance_transaction: null
              charge: ch_1HMjjbCM9MOvFvZKRZhSHC2O
              created: 1599006116
              currency: usd
              metadata:
                reason: not specified
              payment_intent: null
              reason: null
              receipt_number: null
              source_transfer_reversal: null
              status: succeeded
              transfer_reversal: null
            amount: 2782
        paymentSources: null
        pending: false
        metadata: null
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    pendingCaptureRequest:
      value:
        id: 9e252b0a-3299-4de3-a2cb-06ac54c762a0
    pendingCaptureResponse:
      value:
        id: 9e252b0a-3299-4de3-a2cb-06ac54c762a0
        transactionType: capture
        currency: USD
        createdDate: '2020-09-02T00:21:57.000Z'
        tax: null
        totals: null
        lineItems: null
        steps: []
        paymentSources: null
        pending: false
        metadata: null
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createWebhookRequest:
      value:
        id: webhook1
        url: 'https://example.com/callbackUrl'
        events:
          - '*'
    createWebhookResponse:
      value:
        id: webhook1
        url: 'https://example.com/callbackUrl'
        events:
          - '*'
        createdDate: '2020-09-02T00:21:58.031Z'
        updatedDate: '2020-09-02T00:21:58.031Z'
        secrets:
          - id: 5be791c6-70e3-4453-a37a-9f494f04f54b
            secret: 3ON7FKY32D3265T4
            createdDate: '2020-09-02T00:21:58.031Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
        active: true
    getWebhookResponse:
      value:
        id: webhook1
        url: 'https://example.com/callbackUrl'
        secrets:
          - id: 5be791c6-70e3-4453-a37a-9f494f04f54b
            secret: …65T4
            createdDate: '2020-09-02T00:21:58.031Z'
        events:
          - '*'
        active: true
        createdDate: '2020-09-02T00:21:58.031Z'
        updatedDate: '2020-09-02T00:21:58.031Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    listWebhooksResponse:
      value:
        - id: webhook1
          url: 'https://example.com/callbackUrl'
          secrets:
            - id: 5be791c6-70e3-4453-a37a-9f494f04f54b
              secret: …65T4
              createdDate: '2020-09-02T00:21:58.031Z'
          events:
            - '*'
          active: true
          createdDate: '2020-09-02T00:21:58.031Z'
          updatedDate: '2020-09-02T00:21:58.031Z'
          createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    updateWebhookRequest:
      value:
        events:
          - lightrail.value.*
    updateWebhookResponse:
      value:
        id: webhook1
        url: 'https://example.com/callbackUrl'
        secrets:
          - id: 5be791c6-70e3-4453-a37a-9f494f04f54b
            secret: …65T4
            createdDate: '2020-09-02T00:21:58.031Z'
        events:
          - lightrail.value.*
        active: true
        createdDate: '2020-09-02T00:21:58.031Z'
        updatedDate: '2020-09-02T00:21:58.892Z'
        createdBy: user-c0e4bc89ec714e6199199e8322459e2e-TEST
    createWebhookSecretResponse:
      value:
        id: bca46162-c115-47bc-8688-e743e12b2878
        secret: CJDCQE5P8O4LDY0W
        createdDate: '2020-09-02T00:21:59.613Z'
  headers:
    Limit:
      description: The limit on the number of items returned.
      schema:
        type: string
      example: 100
    MaxLimit:
      description: The maximum limit available on this endpoint.
      schema:
        type: string
      example: 1000
    Link:
      description: 'Links to the first, previous, next and last pages in this paginated endpoint.  See [paging](#section/Paging) for more information.'
      schema:
        type: string
      example: '<URL>; rel="first", <URL>; rel="prev", <URL>; rel="next", <URL>; rel="last"'
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: <API_KEY>
      description: |
        Lightrail authenticates your calls with an API key.  You can retrieve your Lightrail API key from [the Lightrail website](https://www.lightrail.com/app/#/account/api).

        Your API key carries many privileges, so keep it secure!  Do not share it publicly, embed it in publicly assessible web pages or source code.

        To use your API key in a request include in the following header:

        ```
        Authorization: Bearer <API_KEY>
        ```
security:
  - Bearer: []
tags:
  - name: Contacts
    description: |-
      Contacts are the people or businesses who buy products or services from you.  They're identified by a unique `id`, which typically corresponds to an existing identifier in your system.

      Values can be [attached](#operation/AttachContactToValue) to Contacts.  All (applicable) Value attached to a Contact will be used in a [checkout Transaction](#operation/Checkout) simply by specifying the Contact checking out.
  - name: Currencies
    description: |-
      A Currency is a unit of money in Lightrail.  It can be a standard currency such as `USD`, or a made up currency such as `FUNBUX`.  All currencies must be created before they are used, though they are typically created on initial setup in the web app.
  - name: Programs
    description: |-
      Programs organize [Values](#tag/Values) and Values can be [issued](#operation/CreateIssuance) from Programs.  Programs are typically created through the web app.

      Programs are most commonly used to define and organize promotion campaigns. For example, the Value issued for a new user promotion that gives them a 5% discount on their first purchase should behave differently from the Value for a "TEN-DOLLAR-TUESDAYS" promotion. These different promotions will also need to be tracked and analyzed separately, all of which can happen in the web app.
  - name: Transactions
    description: |-
      Transactions can add and remove balance on Lightrail Values or create Stripe charges.

      Lightrail Values cannot be transacted against if they are inactive, canceled, frozen, have not yet started or have ended.
  - name: Values
    description: |-
      A Value (naturally) represents value in the Lightrail system.  This includes a gift card, a promotion, a coupon, store credit, etc.  Values can be created one at a time or [issued](#operation/CreateIssuance) from a [Program](#tag/Programs).  Issuing Value from a Program makes it part of that Program which keeps different ways of using Value organized.

      Most Values will be accessed by a code, or attached to a [Contact](#tag/Contacts).  All Values attached to a Contact can be used in a [checkout Transaction](#operation/Checkout) by only specifying the Contact.
  - name: Webhooks
    description: |-
      Webhooks can notify your application when Lightrail events occur. They enable you to react to events and trigger additional workflows.
