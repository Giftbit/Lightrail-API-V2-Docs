currency: "Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`."
customer:
  createdDate: "ISO date for when the Customer was created."
  customerId: "Unique idempotent ID for the Customer."
  email: "The Customer's email."
  firstName: "The Customer's first name."
  lastName: "The Customer's last name."
  metadata: "Arbitrary data associated with the Customer."
  updatedDate: "ISO date for when the Customer was last updated."
header:
  authorization: "Authorization: Bearer <API_KEY>"
pagination:
  count: "The number of items returned."
  limit: "The max number of items to get."
  maxLimit: "The `limit` available`."
  offset: "The number of items to skip."
transaction:
  allowRemainder: "If true the transaction will go through without all value being debited, and the remainder indicated."
  createdDate: "ISO date for when the Transaction was created."
  remainder: "The remainder of value that could not be debited."
  simulate: "If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change."
  simulated: "True if the transaction was simulated."
  steps: "An array of transaction steps."
  transactionId: "Unique idempotent ID for the Transaction."
  transactionType: "The type of the transaction, eg: `debit`, `credit`, `order`..."
  metadata: "Arbitrary data associated with the Transaction."
valueStore:
  valueStoreId: "Unique idempotent id for the ValueStore."
  value: "An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500."
  expires: "The expiry in ISO-8601"
  inactive: "Whether the ValueStore is active and can be used upon creation."
