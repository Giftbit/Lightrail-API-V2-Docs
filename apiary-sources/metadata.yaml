currency: "Currency code. Can be a standard ISO form such as USD or CAD but can also be any branded currency, eg: `megabucks`."
tags: "Segmentation tags."
currencies:
  code: "Currency code, eg: 'USD'."
  decimalPlaces: "The number of decimal places used in formatting."
  name: "Name for the currency, eg: 'Dollars'."
  symbol: "Currency symbol, eg: '$'."
customer:
  createdDate: "ISO date for when the Customer was created."
  customerId: "Unique idempotent ID for the Customer."
  email: "The Customer's email."
  firstName: "The Customer's first name."
  lastName: "The Customer's last name."
  metadata: "Arbitrary data associated with the Customer."
  updatedDate: "ISO date for when the Customer was last updated."
header:
  authorization: "Authorization: Bearer <API_KEY>"
pagination:
  count: "The number of items returned."
  limit: "The max number of items to get."
  maxLimit: "The `limit` available`."
  offset: "The number of items to skip."
program:
  createdDate: "ISO date for when the Program was created."
  programId: "Unique idempotent ID for the Program."
  metadata: "Arbitrary data associated with the Program."
  maxInitialValue: "The maximum value the Value Store can be created with."
  minInitialValue: "The minimum value the Value Store can be created with."
  name: "A human-readable name for the Program."
  programId: "Unique idempotent ID for the Program."
  updatedDate: "ISO date for when the Program was last updated."
transaction:
  allowRemainder: "If true the transaction will go through without all value being debited, and the remainder indicated."
  createdDate: "ISO date for when the Transaction was created."
  remainder: "The remainder of value that could not be debited."
  simulate: "If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying values can change."
  simulated: "True if the transaction was simulated."
  steps: "An array of transaction steps."
  transactionId: "Unique idempotent ID for the Transaction."
  transactionType: "The type of the transaction, eg: `debit`, `credit`, `order`..."
  metadata: "Arbitrary data associated with the Transaction."
  lineItem:
    type: "Must be either `product`, `shipping` or `fee`."
    productId: "The ID of the product."
    variantId: "The variant ID of a product. (Can be used to store SKU.)"
    unitPrice: "The unit price of the item."
    quantity: "The number of items. Defaults to 1 if not provided."
    taxRate: "Tax rate for the item. This is needed when a transaction contains items that have different tax rates."
    tags: "A list of tags associated with the item. For example, 'seasonal' or 'clothing'."
    metadata: "Any additional data you want to store for the item."
    lineTotal:
      price: "The total cost of the items. ie `unitPrice * quantity`."
      taxable: "The taxable amount. ie `price - preTaxDiscount`."
      tax: "The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding'."
      discount: "The discount"
      payable: "The cost of the line item after tax and discounts have been applied."

valueStore:
  active: "Whether the ValueStore is active and can be used upon creation."
  endDate: "ISO date for when the valueStore can last be transacted with."
  frozen: "If true the Value Store is frozen and cannot be transacted with."
  discount: "If true the Value Store will be noted as a discount for the customer in orders."
  metadata: "Arbitrary data associated with the Value Store."
  preTax: "If true the Value Store's value is applied before tax is calculated."
  programId: "The programId of the Program this ValueStore is in."
  redemptionRule: "A Redemption Rule controlling when the Value Store can be used in an order."
  ruleExplanation: "An explanation for the `redemptionRule` does that can be used to display to the customer."
  startDate: "ISO date for when the valueStore can start to be transacted with."
  uses: "The number of times the value store can be transacted with."
  value: "An integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500."
  valueRule: "A Value Rule controlling the value of the ValueStore in an Order.  To use this `value` must be set to `null`."
  valueStoreId: "Unique idempotent id for the ValueStore."
  code:
    code: "The code if it is publicly viewable."
    codeLastFour: "The last four digits of the code if it is secure."

