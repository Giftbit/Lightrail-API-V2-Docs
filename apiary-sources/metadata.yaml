tags: "Segmentation tags. (support coming soon)"
createdDate: "Date of creation."
updatedDate: "Date of last update."
contact:
  createdDate: "Date when the Contact was created."
  id: "The ID you choose to represent the Contact."
  idPurpose: "Two Contacts can't have the same ID, guaranteeing repeated calls won't create extra resources."
  email: "The Contact's email."
  firstName: "The Contact's first name."
  lastName: "The Contact's last name."
  metadata: "Arbitrary data associated with the Contact."
  updatedDate: "Date when the Contact was last updated."
currency:
  code: "Short code for a currency, eg: `USD`, `FUNBUX`."
  decimalPlaces: "The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`."
  name: "Long name for the currency, eg: `Dollars`."
  symbol: "Currency symbol used for formatting, eg: `$`."
filter:
  active: "Filter active/inactive."
  balance: "Filter by balance."
  canceled: "Filter canceled."
  contactId: "Filter by Values attached to the given Contact ID."
  createdDate: "Filter by createdDate."
  currency: "Filter by currency."
  discount: "Filter by discount."
  endDate: "Filter by endDate."
  firstName: "Filter by the firstName."
  frozen: "Filter frozen/unfrozen."
  email: "Filter by email."
  id: "Filter by ID."
  lastName: "Filter by the lastName."
  list: "Multiple values can be sent as a comma separated list in which case only one value must match."
  maxCreatedDate: "Filter up to the createdDate."
  pretax: "Filter by whether or not the Value is applied pretax."
  programId: "Filter by Program ID."
  startDate: "Filter by startDate."
  tags: "Filter by tag. (support coming soon)"
  transactionType: "Filter by the transactionType."
  updatedDate: "Filter by updatedDate."
  uses: "Filter by number of uses remaining."
  valueId: "Filter by Value ID."
  ops:
    date: "This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information."
    in: "This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information."
    number: "This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information."
    string: "This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information."
header:
  authorization: "Authorization: Bearer <API_KEY>"
issuance:
  createdDate: "Date when the Issuance was created."
  id: "The ID you choose to represent the Issuance."
  idPurpose: "Two Issuances can't have the same ID, guaranteeing repeated calls won't create extra resources."
  name: "A human-readable name for the Issuance."
  programId: "The ID of the program it was created from."
  count: "The numbers of Values to issue. Must be between 1-1000."
  generateCode: "This will cause each Value created in the Issuance to have its own unique generated code. The code generated will be stored securely. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`."
  code: "The code to set on the Value. This is only available when `count` is 1."
  isGenericCode: "If true the code is to be shared publicly and not secret. If false the code is treated as a secret. Defaults to false if not provided. This is only available when `count` is 1."
  balance: "The balance to set on each Value. This can be constrained by the Program's `minInitialBalance` and `maxInitialBalance` or must be in the `fixedInitialBalances` array."
  uses: "The uses to set on each Value. This can be restricted to values defined by the Program's `fixedInitialUses`."
  startDate: "Override the Program's startDate for the Value."
  endDate: "Override the Program's endDate for the Value."
  redemptionRule: "A Redemption Rule controlling when the Values can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md)."
  valueRule: "A Value Rule controlling the effective balance of the Values in checkout. To use this `balance` must be set to `null`. The syntax will be defined in a separate document."
  metadata: "Arbitrary data associated with the Issuance."
pagination:
  limit: "The max number of items to get."
  maxLimit: "The `limit` available`."
patch:
  merge: "Applies a JSON merge. Only members that are present are changed and all others are left untouched."
  alsoChangeValues: "If updating this member, you likely also want to update any existing Values already created through this Program."
program:
  id: "The ID you choose to represent the Program."
  name: "A human-readable name for the Program."
  type: "Must be either `promotion`, `giftCard`, or `account`."
  maxInitialBalance: "The maximum balance the Value can be created with."
  minInitialBalance: "The minimum balance the Value can be created with."
  fixedInitialBalances: "A list of exact balances the Value can be created with."
  fixedInitialUses: "A list of exact uses the Value can be created with."
  uses: "If set the number of uses the Value will be created with. Set `null` or omit for infinite uses."
  startDate: "Earliest date that Values belonging to this Program can be active."
  endDate: "Latest date that Values belonging to this Program can be active."
  createdDate: "Date when the Program was created."
  updatedDate: "Date when the Program was last updated."
  metadata: "Arbitrary data associated with the Program."
  issuance:
    generateCode: "Settings for randomly generated codes."
    lengthMatchCount: "The length of the list must match `count`."
    oneOfAccess: "One of `contacts`, `codes`, or `codeGeneration` must be specified."
    secureCodes: "Codes are stored securely. They will only be visible in the CSV file."
    startDate: "Override the Program's configured startDate."
    endDate: "Override the Program's configured endDate."
transaction:
  allowRemainder: "If true the transaction will go through using whatever amount is available: this might not cover the full amount of the transaction. The remainder (i.e. amount still owing) will be indicated."
  remainderResponse: "The amount still owing, if a remainder is allowed by setting `allowRemainder: true`."
  createdDate: "Date when the Transaction was created."
  destination: "Only supported rail is `\"lightrail\"` and must it refer to a single Value."
  id: "The ID you choose to represent the Transaction."
  idPurpose: "Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice."
  metadata: "Arbitrary data associated with the Transaction."
  pending: "(Coming soon) If true the transaction is created as pending and does not complete until captured. The transaction will be automatically voided if not captured."
  simulate: "If true the transaction is simulated and no changes take place. If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change."
  simulated: "True if the transaction was simulated."
  source: "Supported rails: `[\"lightrail\", \"stripe\"]`."
  steps: "An array of transaction steps."
  transactionType: "The type of the transaction, eg: `debit`, `credit`, `checkout`..."
  lineItem:
    type: "Must be either `product`, `shipping` or `fee`."
    productId: "The ID of the product."
    variantId: "The variant ID of a product. (Can be used to store SKU.)"
    unitPrice: "The unit price of the item."
    quantity: "The number of items. Defaults to 1 if not provided."
    taxRate: "Tax rate for the item. This is needed when a transaction contains items that have different tax rates."
    tags: "A list of tags associated with the item. For example, 'seasonal' or 'clothing'."
    marketplaceRate: "A number between 0 and 1 for the marketplace's commission rate. If this number is set on any lineItems then the `marketplace` section of totals will be calculated."
    metadata: "Any additional data you want to store for the item."
    lineTotal:
      subtotal: "The total cost of the items. ie `unitPrice * quantity`."
      taxable: "The taxable amount. ie `price - pretaxDiscount`."
      tax: "The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding'."
      discount: "The discount"
      payable: "The cost of the line item after tax and discounts have been applied."
  checkout:
    metadata: "Any additional data you want to store for the item. All metadata will also be saved on any Stripe charge(s)."
  tax:
    roundingMode: "The rounding mode used for tax calculations. Modes: `\"HALF_EVEN\"`, `\"HALF_UP\"`. Defaults to `\"HALF_EVEN\"`, also known as bankers rounding, which is the standard for most financial calculations."
value:
  active: "Whether the Value is active and can be used upon creation."
  balance: "The amount of money available in a Value. This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500."
  canceled: "If true the Value is canceled. Once canceled the Value can never be uncanceled."
  code: "The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `â€¦ABCD`."
  contactId: "The ID of the Contact that has claimed this Value."
  discount: "If true the Value will be noted as a discount for the Contact on checkout."
  discountSellerLiability: "In a marketplace: a number between 0 and 1 for the ratio of the discount the seller is liable for. (eg: at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount)."
  endDate: "Date when the Value expires."
  frozen: "If true the Value is frozen and cannot be transacted with."
  generateCode: "Parameters to generate a code. The code generated will be stored securely. Required if `code` is not set. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`."
  id: "The ID you choose to represent the Value."
  idPurpose: "Two Values can't have the same ID, guaranteeing repeated calls won't create extra resources."
  isGenericCode: "If true the code is to be shared publicly and not secret. If false the code is treated as a secret. Defaults to false if not provided."
  metadata: "Arbitrary data associated with the Value."
  pretax: "If true the Value's balance is applied on checkout before tax is calculated."
  programId: "The ID of the Program this Value is in."
  redemptionRule: "A Redemption Rule controlling when the Value can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-Docs/blob/master/feature-deep-dive/redemption-rules.md)."
  ruleExplanation: "An explanation for the `redemptionRule` does that can be used to display to the contact."
  showCode: "Show the full code for the Value."
  startDate: "Date when the Value becomes available."
  updatedContactIdDate: "Date of the last contactId update (Contact attached)."
  usesRemaining: "The number of times the Value can be used. When this number reaches 0 the Value can no longer be used."
  balanceRule: "A Rule controlling the effective balance of the Value in a Checkout. To use this `balance` must be set to `null`. The syntax will be defined in a separate document."
  create:
    code: "Assign a code."
    contactId: "Directly attach to a Contact."
    programId: "Create as part of a Program and copy default properties from it."
