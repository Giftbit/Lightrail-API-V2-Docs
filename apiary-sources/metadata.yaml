tags: "Segmentation tags."
code:
  secure: "If true the code is stored securely and only shown in abbreviated form.  If false or omitted the code will be shown in the web app and reports in plain text."
  set: "The code to set.  If there is an existing code it will no longer refer to this Value."
contact:
  createdDate: "ISO date for when the Contact was created."
  id: "Unique idempotent ID for the Contact."
  email: "The Contact's email."
  firstName: "The Contact's first name."
  lastName: "The Contact's last name."
  metadata: "Arbitrary data associated with the Contact."
  updatedDate: "ISO date for when the Contact was last updated."
currency:
  code: "Short code for a currency, eg: `USD`, `FUNBUX`."
  decimalPlaces: "The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`."
  name: "Long name for the currency, eg: `Dollars`."
  symbol: "Currency symbol used for formatting, eg: `$`."
filter:
  active: "Filter active/inactive."
  canceled: "Filter canceled."
  contact: "Filter by Values attached to the given Contact ID."
  currency: "Filter by currency."
  firstName: "Filter by the firstName."
  frozen: "Filter frozen/unfrozen."
  email: "Filter by email."
  id: "Filter by ID."
  lastName: "Filter by the lastName."
  list: "Multiple values can be sent as a comma separated list in which case only one value must match."
  maxCreatedDate: "Filter by the maximum createdDate, inclusive."
  minCreatedDate: "Filter by the minimum createdDate, inclusive."
  program: "Filter by Program ID."
  tags: "Filter by tag."
  transactionType: "Filter by the transactionType."
  type: "Filter by Value type."
header:
  authorization: "Authorization: Bearer <API_KEY>"
pagination:
  count: "The number of items returned."
  limit: "The max number of items to get."
  maxLimit: "The `limit` available`."
  offset: "The number of items to skip."
patch:
  merge: "Applies a JSON merge.  Only members that are present are changed and all others are left untouched."
  alsoChangeValues: "If updating this member, you likely also want to update any existing Values already created through this Program."
program:
  id: "Unique idempotent ID for the Program."
  name: "A human-readable name for the Program."
  type: "Must be either `promotion`, `giftCard`, or `account`."
  maxInitialBalance: "The maximum balance the Value can be created with."
  minInitialBalance: "The minimum balance the Value can be created with."
  fixedInitialBalances: "A list of exact balances the Value can be created with."
  uses: "If set the number of uses the Value will be created with.  Set `null` or omit for infinite uses."
  startDate: "Earliest ISO date that Values belonging to this Program can be active."
  endDate: "Latest ISO date that Values belonging to this Program can be active."
  createdDate: "ISO date for when the Program was created."
  updatedDate: "ISO date for when the Program was last updated."
  metadata: "Arbitrary data associated with the Program."
  issuance:
    codeGeneration: "Settings for randomly generated codes."
    lengthMatchCount: "The length of the list must match `count`."
    oneOfAccess: "One of `contacts`, `codes`, or `codeGeneration` must be specified."
    secureCodes: "Codes are stored securely.  They will only be visible in the CSV file."
    startDate: "Override the Program's configured startDate."
    endDate: "Override the Program's configured endDate."
transaction:
  allowRemainder: "If true the transaction will go through without all balance being debited, and the remainder indicated."
  createdDate: "ISO date for when the Transaction was created."
  id: "Unique idempotent ID for the Transaction."
  metadata: "Arbitrary data associated with the Transaction."
  pending: "If true the transaction is created as pending and does not complete until captured.  The transaction will be automatically voided if not captured."
  remainder: "The remainder of balance that could not be debited."
  simulate: "If true the transaction is simulated and no changes take place.  If the transaction is repeated with simulate=false it is not guaranteed to behave the same way as the underlying Values can change."
  simulated: "True if the transaction was simulated."
  steps: "An array of transaction steps."
  transactionType: "The type of the transaction, eg: `debit`, `credit`, `checkout`..."
  lineItem:
    type: "Must be either `product`, `shipping` or `fee`."
    productId: "The ID of the product."
    variantId: "The variant ID of a product. (Can be used to store SKU.)"
    unitPrice: "The unit price of the item."
    quantity: "The number of items. Defaults to 1 if not provided."
    taxRate: "Tax rate for the item. This is needed when a transaction contains items that have different tax rates."
    tags: "A list of tags associated with the item. For example, 'seasonal' or 'clothing'."
    metadata: "Any additional data you want to store for the item."
    lineTotal:
      price: "The total cost of the items. ie `unitPrice * quantity`."
      taxable: "The taxable amount. ie `price - preTaxDiscount`."
      tax: "The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding'."
      discount: "The discount"
      payable: "The cost of the line item after tax and discounts have been applied."
value:
  active: "Whether the Value is active and can be used upon creation."
  balance: "The amount of money available in a Value.  This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500."
  canceled: "If true the Value is canceled.  Once canceled the Value can never be uncanceled."
  code: "The code.  If the code is secure only the last four digits are displayed with an ellipsis, eg: `â€¦ABCD`."
  contact: "The ID of the Contact that has claimed this Value."
  endDate: "ISO date for when the Value expires."
  frozen: "If true the Value is frozen and cannot be transacted with."
  discount: "If true the Value will be noted as a discount for the Contact on checkout."
  id: "Unique idempotent ID of the Value."
  metadata: "Arbitrary data associated with the Value."
  preTax: "If true the Value's balance is applied on checkout before tax is calculated."
  program: "The ID of the Program this Value is in."
  redemptionRule: "A Redemption Rule controlling when the Value can be used in checkout."
  ruleExplanation: "An explanation for the `redemptionRule` does that can be used to display to the contact."
  startDate: "ISO date for when the Value becomes available."
  type: "`account`, `giftCard` or `promotion`"
  uses: "The number of times the Value can be used.  When this number reaches 0 the Value is expired."
  valueRule: "A Value Rule controlling the effective balance of the Value in a Checkout.  To use this `balance` must be set to `null`."
  create:
    code: "Assign a code.  Cannot be set with `contact`."
    contact: "Directly apply to a Contact.  Cannot be set with `code`."
    program: "Create as part of a Program and copy default properties from it."
  access:
    description: "How the values can be accessed"
    types:
      contact: "must be associated with a Contact by ID."
      secureCode: "a code is generated or supplied and is stored securely."
      publicCode: "a code is generated or supplied and can be displayed."
