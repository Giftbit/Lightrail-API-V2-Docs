createdDate: "Date of creation."
updatedDate: "Date of last update."
contact:
  createdDate: "Date when the Contact was created."
  id: "The ID you choose to represent the Contact."
  idPurpose: "Two Contacts can't have the same ID, guaranteeing repeated calls won't create extra resources.  We recommend not using email addresses as IDs because users can change email addresses but the ID can't be changed."
  email: "The Contact's email."
  firstName: "The Contact's first name."
  lastName: "The Contact's last name."
  metadata: "Arbitrary data associated with the Contact."
  updatedDate: "Date when the Contact was last updated."
currency:
  code: "Short code for a currency, eg: `USD`, `FUNBUX`."
  decimalPlaces: "The number of decimal places used in formatting, eg: US Dollars are stored in cents so `decimalPlaces` is `2`."
  name: "Long name for the currency, eg: `Dollars`."
  symbol: "Currency symbol used for formatting, eg: `$`."
filter:
  active: "Filter active/inactive."
  balance: "Filter by balance."
  canceled: "Filter canceled."
  contactId: "Filter by Values attached to the given Contact ID."
  createdDate: "Filter by createdDate."
  currency: "Filter by currency."
  discount: "Filter by discount."
  endDate: "Filter by endDate."
  firstName: "Filter by the firstName."
  frozen: "Filter frozen/unfrozen."
  email: "Filter by email."
  id: "Filter by ID."
  isGenericCode: "Filter by isGenericCode."
  lastName: "Filter by the lastName."
  list: "Multiple values can be sent as a comma separated list in which case only one Value must match."
  maxCreatedDate: "Filter up to the createdDate."
  pretax: "Filter by whether or not the Value is applied pretax."
  programId: "Filter by Program ID."
  startDate: "Filter by startDate."
  transactionType: "Filter by the transactionType."
  updatedDate: "Filter by updatedDate."
  usesRemaining: "Filter by number of uses remaining."
  valueId: "Filter by Value ID."
  ops:
    date: "This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information."
    in: "This filter supports the operators `eq`, `in`.  See [filtering](#introduction/filtering) for more information."
    number: "This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`.  See [filtering](#introduction/filtering) for more information."
    string: "This filter supports operators: `lt`, `lte`, `gt`, `gte`, `eq`, `ne`, `like`.  See [filtering](#introduction/filtering) for more information."
header:
  authorization: "Authorization: Bearer <API_KEY>"
issuance:
  createdDate: "Date when the Issuance was created."
  id: "The ID you choose to represent the Issuance."
  idPurpose: "Two Issuances can't have the same ID, guaranteeing repeated calls won't create extra resources."
  name: "A human-readable name for the Issuance."
  programId: "The ID of the program it was created from."
  count: "The numbers of Values to issue. Must be between 1-1000."
  generateCode: "This will cause each Value created in the Issuance to have its own unique generated code. The code generated will be stored securely. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`."
  code: "The code to set on the Value. This is only available when `count` is 1."
  isGenericCode: "If true the code is to be shared publicly and not secret. If `false` the code is treated as a secret. Defaults to `false` if not provided. This is only available when `count` is 1."
  balance: "The balance to set on each Value. This can be constrained by the Program's `minInitialBalance` and `maxInitialBalance` or must be in the `fixedInitialBalances` array."
  usesRemaining: "The usesRemaining to set on each Value. This can be restricted to Values defined by the Program's `fixedInitialUsesRemaining`."
  startDate: "Override the Program's startDate for the Value."
  endDate: "Override the Program's endDate for the Value."
  redemptionRule: "A Redemption Rule controlling when the Values can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md)."
  balanceRule: "A Rule controlling the effective balance of the Values in checkout. To use this `balance` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md)."
  metadata: "Arbitrary data associated with the Issuance."
pagination:
  limit: "The max number of items to get."
  maxLimit: "The `limit` available`."
patch:
  merge: "Applies a JSON merge. Only members that are present are changed and all others are left untouched."
  alsoChangeValues: "If updating this member, you likely also want to update any existing Values already created through this Program."
program:
  active: "Whether Values created in the Program are active and can be used upon creation."
  balanceRule: "A Rule controlling the effective balance in checkout of Values created in the Program. To use this `minInitialBalance`, `maxInitialBalance` and `fixedInitialBalances` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md)."
  createdDate: "Date when the Program was created."
  discount: "If true Values created in the Program will be marked as a discount on checkout."
  endDate: "Latest date that Values created in the Program can be active."
  fixedInitialBalances: "A list of exact balances Values created in the Program can be created with."
  fixedInitialUsesRemaining: "A list of exact usesRemaining the Value can be created with."
  id: "The ID you choose to represent the Program."
  maxInitialBalance: "The maximum balance Values created in the Program can be created with."
  metadata: "Arbitrary data associated with the Program. Values will inherit this `metadata` but may override any keys."
  minInitialBalance: "The minimum balance Values created in the Program can be created with."
  discountSellerLiability: "(Note: deprecated, please use discountSellerLiabilityRule.) Applies to Values created in the Program. In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Program must be a discount, ie `discount: true`."
  discountSellerLiabilityRule: "Applies to Values created in the Program. In a marketplace, can be set as a rule that'll evaluate to a number between 0 and 1 for the ratio of the discount the seller is liable for. Examples: `{\"rule\": \"0\", \"explanation\": \"marketplace 100% liable\"}`, `{\"rule\": \"1\", \"explanation\": \"seller 100% liable\"}`, `{\"rule\": \"1 - currentLineItem.marketplaceRate\", \"explanation\": \"liability proportionally shared based on lineItem's marketplaceRate\"}`. Note, the Value must be a discount (`discount: true`)."
  name: "A human-readable name for the Program."
  pretax: "If true the balance on Values created in the Program is applied on checkout before tax is calculated."
  redemptionRule: "A Redemption Rule controlling when Values created in the Program can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md)."
  startDate: "Earliest date that Values created in the Program can be active."
  updatedDate: "Date when the Program was last updated."
  issuance:
    generateCode: "Settings for randomly generated codes."
    lengthMatchCount: "The length of the list must match `count`."
    oneOfAccess: "One of `contacts`, `codes`, or `codeGeneration` must be specified."
    secureCodes: "Codes are stored securely. They will only be visible in the CSV file."
    startDate: "Override the Program's configured startDate."
    endDate: "Override the Program's configured endDate."
transaction:
  allowRemainder: "If `true` the Transaction will go through using whatever amount is available: this might not cover the full amount of the Transaction. The remainder (i.e. amount still owing) will be indicated."
  createdDate: "Date when the Transaction was created."
  id: "The ID you choose to represent the Transaction."
  idPurpose: "Two Transactions can't have the same ID, guaranteeing the Transaction can't happen twice."
  metadata: "Arbitrary data associated with the Transaction."
  pending: "If `true` the Transaction is created as pending for the default duration. The pending duration can be customized by passing in an ISO duration string instead of a boolean. A pending Transaction will be automatically [voided](#reference/0/transactions/void-pending) after the pending duration if not [captured](#reference/0/transactions/capture-pending)."
  pendingResponse: "If `true` the Transaction was created as pending and does not complete until captured.  Not all transactionTypes can be created as pending."
  pendingVoidDate: "Date after which the pending Transaction will be automatically [voided](#reference/0/transactions/void-pending).  It cannot be [captured](#reference/0/transactions/capture-pending) after this Date."
  remainderResponse: "The amount still owing, if a remainder is allowed by setting `allowRemainder: true`."
  simulate: "If `true` the Transaction is simulated and no changes take place. If the Transaction is repeated with `simulate=false` it is not guaranteed to behave the same way as the underlying Values can change."
  simulated: "If `true` the Transaction was simulated."
  steps: "An array of Transaction steps. A Transaction may have steps from different payment rails (`lightrail` | `stripe` | `internal`), which will have different attributes."
  transactionType: "The type of the Transaction, eg: `debit`, `credit`, `checkout`..."
  lineItem:
    type: "Must be either `product`, `shipping` or `fee`."
    productId: "The ID of the product."
    variantId: "The variant ID of a product. (Can be used to store SKU.)"
    unitPrice: "The unit price of the item."
    quantity: "The number of items. Defaults to 1 if not provided."
    taxRate: "Tax rate for the item. This is needed when a Transaction contains items that have different tax rates."
    tags: "A list of tags associated with the item. For example, 'seasonal' or 'clothing'."
    marketplaceRate: "A number between 0 and 1 for the marketplace's commission rate. If this number is set on any lineItems then the `marketplace` section of totals will be calculated."
    metadata: "Any additional data you want to store for the item."
    lineTotal:
      subtotal: "The total cost of the items. ie `unitPrice * quantity`."
      taxable: "The taxable amount. ie `price - pretaxDiscount`."
      tax: "The taxable amount multiplied by the taxRate for the item. Uses 'bankers rounding' by default."
      discount: "The discount"
      sellerDiscount: "The amount of discount the seller is responsible for providing for the line item. Calculated if marketplaceRate is set on the line item and/or a Value with a discountSellerLiabilityRule is used to pay for the item."
      remainder: "The amount remaining to be paid for the line item after the transaction has been processed. Will be 0 unless the transaction has `allowRemainder: true`."
      payable: "The cost of the line item after tax and discounts have been applied."
  checkout:
    metadata: "Any additional data you want to store for the item. All metadata will also be saved on any Stripe charge(s)."
  tax:
    roundingMode: "The rounding mode used for tax calculations. Modes: `\"HALF_EVEN\"`, `\"HALF_UP\"`. Defaults to `\"HALF_EVEN\"`, also known as bankers rounding, which is the standard for most financial calculations."
value:
  active: "Whether the Value is active and can be used upon creation."
  balance: "The amount of money available in a Value. This is always an integer greater than or equal to 0 representing the smallest units of the currency. For example, $25 USD = 2500. For generic codes that have a `perContact.balance` the `balance` can control maximum liability and will be drawn down by the `perContact.balance` when attached to a Contact."
  balanceRule: "A Rule controlling the effective balance of the Value in a Checkout. To use this `balance` must be set to `null`. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md)."
  canceled: "If `true` the Value is canceled.  When canceled new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided."
  code: "The code. Unless `isGenericCode` is set to true the code will be treated as a secret and only the last four digits are displayed with an ellipsis, eg: `…ABCD`."
  contactId: "The ID of the Contact that has claimed this Value."
  discount: "If `true` the Value will be marked as a discount on checkout."
  endDate: "Date when the Value expires.  When expired new Transactions cannot be created but existing Transactions can be reversed; pending Transactions can be captured or voided."
  frozen: "If `true` the Value is frozen.  When frozen new Transactions cannot be created; pending Transactions can be voided."
  discountSellerLiability: "(Note: deprecated, please use discountSellerLiabilityRule.) In a marketplace, can be set as a number between 0 and 1 for the ratio of the discount the seller is liable for. For example, set at 0 the marketplace is entirely liable for the discount, at 1 the seller is entirely liable for the discount). The Value must be a discount, ie `discount: true`."
  discountSellerLiabilityRule: "In a marketplace, can be set as a rule that'll evaluate to a number between 0 and 1 for the ratio of the discount the seller is liable for. Examples: `{\"rule\": \"0\", \"explanation\": \"marketplace 100% liable\"}`, `{\"rule\": \"1\", \"explanation\": \"seller 100% liable\"}`, `{\"rule\": \"1 - currentLineItem.marketplaceRate\", \"explanation\": \"liability proportionally shared based on lineItem's marketplaceRate\"}`. Note, the Value must be a discount (`discount: true`)."
  generateCode: "Parameters to generate a unique code. The code generated will be stored securely. We recommend using the default length and character set. To do so, simply set to an empty object. ie `generateCode: {}`."
  id: "The ID you choose to represent the Value."
  idPurpose: "Two Values can't have the same ID, guaranteeing repeated calls won't create extra resources."
  isGenericCode: "If `true` the code is to be shared publicly and not secret. If `false` the code is treated as a secret. Defaults to false if not provided."
  metadata: "Arbitrary data associated with the Value."
  pretax: "If `true` the Value's balance is applied on checkout before tax is calculated."
  programId: "The ID of the Program this Value is in."
  redemptionRule: "A Redemption Rule controlling when the Value can be used in checkout. The syntax is defined in a [separate document](https://github.com/Giftbit/Lightrail-API-V2-Docs/blob/master/feature-deep-dive/redemption-and-balance-rules.md)."
  ruleExplanation: "An explanation for the `redemptionRule` does that can be used to display to the contact."
  showCode: "Show the full code for the Value."
  startDate: "Date when the Value becomes available."
  updatedContactIdDate: "Date of the last contactId update (Contact attached)."
  usesRemaining: "The number of times the Value can be used in checkout. When this number reaches 0 the Value can no longer be used in checkout. For generic codes that have a `perContact.usesRemaining` the `usesRemaining` can control maximum uses and will be drawn down by the `perContact.usesRemaining` when attached to a Contact."
  create:
    code: "Assign a code."
    contactId: "Directly attach to a Contact."
    programId: "Create as part of a Program and copy default properties from it."
webhook:
  id: "The ID of the Webhook."
  url: "The URL to send the event to."
  secret:
    id: "The ID of the secret."
    secret: "The Webhook's secret which is used to generate the header signature on event deliveries. This allows you to validate the event was sent by Lightrail."
    createdDate: "The date the secret was created."
  events: "List of comma-separated events. The `'*'` wild card is supported: for example, use `'*'` to match all events or use `'lightrail.value.*'` to match all Value related events. You can view the full list of supported event types [here](https://www.lightrail.com/docs/#webhooks/supported-event-types)."
  active: "If false, the Webhook will not send events."
  createdBy: "The ID of the user who created the Webhook."